/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "file1_types.h"

#include <folly/io/IOBuf.h>
#include <folly/io/IOBufQueue.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <thrift/lib/cpp/transport/THeader.h>
#include <thrift/lib/cpp2/GeneratedCodeHelper.h>
#include <thrift/lib/cpp2/GeneratedSerializationCodeHelper.h>
#include <thrift/lib/cpp2/server/Cpp2ConnContext.h>

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>

namespace cpp2 {

template <class Protocol_>
uint32_t Struct0::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field1 = std::map<double, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<double, float>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field7 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field10 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field11 = std::map<float, std::vector<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::map<float, std::vector<std::string>>>::read(*iprot, this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field12 = std::map<int32_t, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int32_t, float>>::read(*iprot, this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field13 = std::vector<std::vector<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::vector<std::vector<std::string>>>::read(*iprot, this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field19 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field23 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field24 = std::map<double, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, std::map<double, std::string>>::read(*iprot, this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field25 = std::map<int8_t, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int8_t>>::read(*iprot, this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field26 = std::map<float, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>, std::map<float, std::string>>::read(*iprot, this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field27);
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field28);
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field29);
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 30:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field30 = std::map<std::set<int16_t>, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>, std::map<std::set<int16_t>, std::string>>::read(*iprot, this->field30);
          this->__isset.field30 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 31:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field31);
          this->__isset.field31 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 32:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field32);
          this->__isset.field32 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 33:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field33 = std::map<int8_t, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int8_t, std::string>>::read(*iprot, this->field33);
          this->__isset.field33 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 34:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field34);
          this->__isset.field34 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 35:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field35 = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->field35);
          this->__isset.field35 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 36:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field36 = std::set<std::map<bool, int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<bool, int32_t>>>::read(*iprot, this->field36);
          this->__isset.field36 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 37:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field37 = std::map<std::vector<float>, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::integral>, std::map<std::vector<float>, int8_t>>::read(*iprot, this->field37);
          this->__isset.field37 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 38:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field38);
          this->__isset.field38 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 39:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field39);
          this->__isset.field39 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 40:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field40);
          this->__isset.field40 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 41:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field41);
          this->__isset.field41 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 42:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field42 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field42);
          this->__isset.field42 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 43:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field43);
          this->__isset.field43 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 44:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field44);
          this->__isset.field44 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 45:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field45);
          this->__isset.field45 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 46:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field46);
          this->__isset.field46 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 47:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field47);
          this->__isset.field47 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 48:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field48);
          this->__isset.field48 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 49:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field49);
          this->__isset.field49 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 50:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field50);
          this->__isset.field50 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 51:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field51);
          this->__isset.field51 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 52:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field52);
          this->__isset.field52 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 53:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field53);
          this->__isset.field53 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 54:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field54);
          this->__isset.field54 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 55:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field55);
          this->__isset.field55 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 56:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field56 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field56);
          this->__isset.field56 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 57:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field57);
          this->__isset.field57 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 58:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field58);
          this->__isset.field58 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 59:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field59);
          this->__isset.field59 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 60:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field60);
          this->__isset.field60 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 61:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field61 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field61);
          this->__isset.field61 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 62:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field62);
          this->__isset.field62 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 63:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field63);
          this->__isset.field63 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 64:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field64 = std::map<int8_t, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int16_t>>::read(*iprot, this->field64);
          this->__isset.field64 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 65:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field65);
          this->__isset.field65 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 66:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field66);
          this->__isset.field66 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 67:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field67);
          this->__isset.field67 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 68:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field68 = std::map<int64_t, std::vector<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::map<int64_t, std::vector<std::string>>>::read(*iprot, this->field68);
          this->__isset.field68 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 69:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field69);
          this->__isset.field69 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 70:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field70);
          this->__isset.field70 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 71:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field71);
          this->__isset.field71 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 72:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field72);
          this->__isset.field72 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 73:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field73);
          this->__isset.field73 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 74:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field74);
          this->__isset.field74 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 75:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field75);
          this->__isset.field75 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 76:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field76);
          this->__isset.field76 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 77:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field77);
          this->__isset.field77 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 78:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field78);
          this->__isset.field78 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 79:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field79 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field79);
          this->__isset.field79 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 80:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field80);
          this->__isset.field80 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 81:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field81 = std::map<std::string, double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::floating_point>, std::map<std::string, double>>::read(*iprot, this->field81);
          this->__isset.field81 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 82:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field82 = std::map<std::vector<bool>, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<bool>, bool>>::read(*iprot, this->field82);
          this->__isset.field82 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 83:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field83 = std::map<int64_t, double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int64_t, double>>::read(*iprot, this->field83);
          this->__isset.field83 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 84:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field84);
          this->__isset.field84 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 85:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field85 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field85);
          this->__isset.field85 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 86:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field86);
          this->__isset.field86 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 87:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field87);
          this->__isset.field87 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 88:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field88 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field88);
          this->__isset.field88 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 89:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field89 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field89);
          this->__isset.field89 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 90:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field90);
          this->__isset.field90 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 91:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field91);
          this->__isset.field91 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 92:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field92 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field92);
          this->__isset.field92 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 93:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field93);
          this->__isset.field93 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 94:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field94);
          this->__isset.field94 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 95:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field95);
          this->__isset.field95 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 96:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field96 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field96);
          this->__isset.field96 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 97:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field97);
          this->__isset.field97 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 98:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field98);
          this->__isset.field98 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 99:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field99 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field99);
          this->__isset.field99 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 100:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field100);
          this->__isset.field100 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 101:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field101 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field101);
          this->__isset.field101 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 102:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field102 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field102);
          this->__isset.field102 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 103:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field103);
          this->__isset.field103 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 104:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field104);
          this->__isset.field104 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 105:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field105 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field105);
          this->__isset.field105 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 106:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field106);
          this->__isset.field106 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 107:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field107 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field107);
          this->__isset.field107 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 108:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field108 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field108);
          this->__isset.field108 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 109:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field109);
          this->__isset.field109 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 110:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field110);
          this->__isset.field110 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 111:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field111 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field111);
          this->__isset.field111 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 112:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field112);
          this->__isset.field112 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 113:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field113);
          this->__isset.field113 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 114:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field114);
          this->__isset.field114 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 115:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field115);
          this->__isset.field115 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 116:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field116);
          this->__isset.field116 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 117:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field117);
          this->__isset.field117 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 118:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field118);
          this->__isset.field118 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 119:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field119 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field119);
          this->__isset.field119 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 120:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field120 = std::map<std::map<double, float>, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::floating_point>, std::map<std::map<double, float>, float>>::read(*iprot, this->field120);
          this->__isset.field120 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 121:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field121);
          this->__isset.field121 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 122:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field122);
          this->__isset.field122 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 123:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field123 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field123);
          this->__isset.field123 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct0::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct0");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<double, float>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeBinary(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->serializedSizeI64(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_FLOAT, 4);
  xfer += prot_->serializedSizeFloat(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRING, 5);
  xfer += prot_->serializedSizeString(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I64, 6);
  xfer += prot_->serializedSizeI64(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_I16, 8);
  xfer += prot_->serializedSizeI16(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_I16, 9);
  xfer += prot_->serializedSizeI16(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_LIST, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_MAP, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::map<float, std::vector<std::string>>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_MAP, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int32_t, float>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::vector<std::vector<std::string>>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_I32, 14);
  xfer += prot_->serializedSizeI32(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_BYTE, 15);
  xfer += prot_->serializedSizeByte(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_BOOL, 16);
  xfer += prot_->serializedSizeBool(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_STRING, 17);
  xfer += prot_->serializedSizeBinary(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_I16, 18);
  xfer += prot_->serializedSizeI16(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_LIST, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_DOUBLE, 20);
  xfer += prot_->serializedSizeDouble(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_I64, 21);
  xfer += prot_->serializedSizeI64(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_BOOL, 22);
  xfer += prot_->serializedSizeBool(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_SET, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_MAP, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, std::map<double, std::string>>::serializedSize<false>(*prot_, this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_MAP, 25);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int8_t>>::serializedSize<false>(*prot_, this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_MAP, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>, std::map<float, std::string>>::serializedSize<false>(*prot_, this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_BYTE, 27);
  xfer += prot_->serializedSizeByte(this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_BOOL, 28);
  xfer += prot_->serializedSizeBool(this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_I64, 29);
  xfer += prot_->serializedSizeI64(this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_MAP, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>, std::map<std::set<int16_t>, std::string>>::serializedSize<false>(*prot_, this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_I32, 31);
  xfer += prot_->serializedSizeI32(this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_I64, 32);
  xfer += prot_->serializedSizeI64(this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_MAP, 33);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int8_t, std::string>>::serializedSize<false>(*prot_, this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_STRING, 34);
  xfer += prot_->serializedSizeBinary(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_LIST, 35);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_SET, 36);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<bool, int32_t>>>::serializedSize<false>(*prot_, this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_MAP, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::integral>, std::map<std::vector<float>, int8_t>>::serializedSize<false>(*prot_, this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_BOOL, 38);
  xfer += prot_->serializedSizeBool(this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_I32, 39);
  xfer += prot_->serializedSizeI32(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_BYTE, 40);
  xfer += prot_->serializedSizeByte(this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_BOOL, 41);
  xfer += prot_->serializedSizeBool(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_LIST, 42);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_BYTE, 43);
  xfer += prot_->serializedSizeByte(this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_STRING, 44);
  xfer += prot_->serializedSizeBinary(this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_FLOAT, 45);
  xfer += prot_->serializedSizeFloat(this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_BOOL, 46);
  xfer += prot_->serializedSizeBool(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_BOOL, 47);
  xfer += prot_->serializedSizeBool(this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_BYTE, 48);
  xfer += prot_->serializedSizeByte(this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_BOOL, 49);
  xfer += prot_->serializedSizeBool(this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_I64, 50);
  xfer += prot_->serializedSizeI64(this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_I32, 51);
  xfer += prot_->serializedSizeI32(this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_I32, 52);
  xfer += prot_->serializedSizeI32(this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_FLOAT, 53);
  xfer += prot_->serializedSizeFloat(this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_DOUBLE, 54);
  xfer += prot_->serializedSizeDouble(this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_I64, 55);
  xfer += prot_->serializedSizeI64(this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_SET, 56);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_DOUBLE, 57);
  xfer += prot_->serializedSizeDouble(this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_STRING, 58);
  xfer += prot_->serializedSizeBinary(this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_I32, 59);
  xfer += prot_->serializedSizeI32(this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_BOOL, 60);
  xfer += prot_->serializedSizeBool(this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_SET, 61);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_I16, 62);
  xfer += prot_->serializedSizeI16(this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_BOOL, 63);
  xfer += prot_->serializedSizeBool(this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_MAP, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int16_t>>::serializedSize<false>(*prot_, this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_I16, 65);
  xfer += prot_->serializedSizeI16(this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_FLOAT, 66);
  xfer += prot_->serializedSizeFloat(this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_FLOAT, 67);
  xfer += prot_->serializedSizeFloat(this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_MAP, 68);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::map<int64_t, std::vector<std::string>>>::serializedSize<false>(*prot_, this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_I64, 69);
  xfer += prot_->serializedSizeI64(this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_BOOL, 70);
  xfer += prot_->serializedSizeBool(this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_STRING, 71);
  xfer += prot_->serializedSizeBinary(this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_STRING, 72);
  xfer += prot_->serializedSizeString(this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_STRING, 73);
  xfer += prot_->serializedSizeBinary(this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_I16, 74);
  xfer += prot_->serializedSizeI16(this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_BOOL, 75);
  xfer += prot_->serializedSizeBool(this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_DOUBLE, 76);
  xfer += prot_->serializedSizeDouble(this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_BOOL, 77);
  xfer += prot_->serializedSizeBool(this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_STRING, 78);
  xfer += prot_->serializedSizeBinary(this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_SET, 79);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_BOOL, 80);
  xfer += prot_->serializedSizeBool(this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_MAP, 81);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::floating_point>, std::map<std::string, double>>::serializedSize<false>(*prot_, this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_MAP, 82);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<bool>, bool>>::serializedSize<false>(*prot_, this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_MAP, 83);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int64_t, double>>::serializedSize<false>(*prot_, this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_I16, 84);
  xfer += prot_->serializedSizeI16(this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_SET, 85);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_I32, 86);
  xfer += prot_->serializedSizeI32(this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_I32, 87);
  xfer += prot_->serializedSizeI32(this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_LIST, 88);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_LIST, 89);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_STRING, 90);
  xfer += prot_->serializedSizeBinary(this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_BYTE, 91);
  xfer += prot_->serializedSizeByte(this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_LIST, 92);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_BOOL, 93);
  xfer += prot_->serializedSizeBool(this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_BOOL, 94);
  xfer += prot_->serializedSizeBool(this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_BOOL, 95);
  xfer += prot_->serializedSizeBool(this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_SET, 96);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field96);
  xfer += prot_->serializedFieldSize("field97", apache::thrift::protocol::T_STRING, 97);
  xfer += prot_->serializedSizeBinary(this->field97);
  xfer += prot_->serializedFieldSize("field98", apache::thrift::protocol::T_STRING, 98);
  xfer += prot_->serializedSizeBinary(this->field98);
  xfer += prot_->serializedFieldSize("field99", apache::thrift::protocol::T_LIST, 99);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field99);
  xfer += prot_->serializedFieldSize("field100", apache::thrift::protocol::T_I64, 100);
  xfer += prot_->serializedSizeI64(this->field100);
  xfer += prot_->serializedFieldSize("field101", apache::thrift::protocol::T_SET, 101);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field101);
  xfer += prot_->serializedFieldSize("field102", apache::thrift::protocol::T_LIST, 102);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field102);
  xfer += prot_->serializedFieldSize("field103", apache::thrift::protocol::T_I16, 103);
  xfer += prot_->serializedSizeI16(this->field103);
  xfer += prot_->serializedFieldSize("field104", apache::thrift::protocol::T_DOUBLE, 104);
  xfer += prot_->serializedSizeDouble(this->field104);
  xfer += prot_->serializedFieldSize("field105", apache::thrift::protocol::T_LIST, 105);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field105);
  xfer += prot_->serializedFieldSize("field106", apache::thrift::protocol::T_I16, 106);
  xfer += prot_->serializedSizeI16(this->field106);
  xfer += prot_->serializedFieldSize("field107", apache::thrift::protocol::T_SET, 107);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field107);
  xfer += prot_->serializedFieldSize("field108", apache::thrift::protocol::T_LIST, 108);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field108);
  xfer += prot_->serializedFieldSize("field109", apache::thrift::protocol::T_FLOAT, 109);
  xfer += prot_->serializedSizeFloat(this->field109);
  xfer += prot_->serializedFieldSize("field110", apache::thrift::protocol::T_FLOAT, 110);
  xfer += prot_->serializedSizeFloat(this->field110);
  xfer += prot_->serializedFieldSize("field111", apache::thrift::protocol::T_LIST, 111);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field111);
  xfer += prot_->serializedFieldSize("field112", apache::thrift::protocol::T_BOOL, 112);
  xfer += prot_->serializedSizeBool(this->field112);
  xfer += prot_->serializedFieldSize("field113", apache::thrift::protocol::T_STRING, 113);
  xfer += prot_->serializedSizeString(this->field113);
  xfer += prot_->serializedFieldSize("field114", apache::thrift::protocol::T_I32, 114);
  xfer += prot_->serializedSizeI32(this->field114);
  xfer += prot_->serializedFieldSize("field115", apache::thrift::protocol::T_I32, 115);
  xfer += prot_->serializedSizeI32(this->field115);
  xfer += prot_->serializedFieldSize("field116", apache::thrift::protocol::T_I32, 116);
  xfer += prot_->serializedSizeI32(this->field116);
  xfer += prot_->serializedFieldSize("field117", apache::thrift::protocol::T_DOUBLE, 117);
  xfer += prot_->serializedSizeDouble(this->field117);
  xfer += prot_->serializedFieldSize("field118", apache::thrift::protocol::T_STRING, 118);
  xfer += prot_->serializedSizeString(this->field118);
  xfer += prot_->serializedFieldSize("field119", apache::thrift::protocol::T_LIST, 119);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field119);
  xfer += prot_->serializedFieldSize("field120", apache::thrift::protocol::T_MAP, 120);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::floating_point>, std::map<std::map<double, float>, float>>::serializedSize<false>(*prot_, this->field120);
  xfer += prot_->serializedFieldSize("field121", apache::thrift::protocol::T_I64, 121);
  xfer += prot_->serializedSizeI64(this->field121);
  xfer += prot_->serializedFieldSize("field122", apache::thrift::protocol::T_BOOL, 122);
  xfer += prot_->serializedSizeBool(this->field122);
  xfer += prot_->serializedFieldSize("field123", apache::thrift::protocol::T_LIST, 123);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field123);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct0::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct0");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<double, float>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeZCBinary(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->serializedSizeI64(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_FLOAT, 4);
  xfer += prot_->serializedSizeFloat(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRING, 5);
  xfer += prot_->serializedSizeString(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I64, 6);
  xfer += prot_->serializedSizeI64(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_I16, 8);
  xfer += prot_->serializedSizeI16(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_I16, 9);
  xfer += prot_->serializedSizeI16(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_LIST, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_MAP, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::map<float, std::vector<std::string>>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_MAP, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int32_t, float>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::vector<std::vector<std::string>>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_I32, 14);
  xfer += prot_->serializedSizeI32(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_BYTE, 15);
  xfer += prot_->serializedSizeByte(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_BOOL, 16);
  xfer += prot_->serializedSizeBool(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_STRING, 17);
  xfer += prot_->serializedSizeZCBinary(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_I16, 18);
  xfer += prot_->serializedSizeI16(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_LIST, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_DOUBLE, 20);
  xfer += prot_->serializedSizeDouble(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_I64, 21);
  xfer += prot_->serializedSizeI64(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_BOOL, 22);
  xfer += prot_->serializedSizeBool(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_SET, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_MAP, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, std::map<double, std::string>>::serializedSize<false>(*prot_, this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_MAP, 25);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int8_t>>::serializedSize<false>(*prot_, this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_MAP, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>, std::map<float, std::string>>::serializedSize<false>(*prot_, this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_BYTE, 27);
  xfer += prot_->serializedSizeByte(this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_BOOL, 28);
  xfer += prot_->serializedSizeBool(this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_I64, 29);
  xfer += prot_->serializedSizeI64(this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_MAP, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>, std::map<std::set<int16_t>, std::string>>::serializedSize<false>(*prot_, this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_I32, 31);
  xfer += prot_->serializedSizeI32(this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_I64, 32);
  xfer += prot_->serializedSizeI64(this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_MAP, 33);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int8_t, std::string>>::serializedSize<false>(*prot_, this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_STRING, 34);
  xfer += prot_->serializedSizeZCBinary(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_LIST, 35);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_SET, 36);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<bool, int32_t>>>::serializedSize<false>(*prot_, this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_MAP, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::integral>, std::map<std::vector<float>, int8_t>>::serializedSize<false>(*prot_, this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_BOOL, 38);
  xfer += prot_->serializedSizeBool(this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_I32, 39);
  xfer += prot_->serializedSizeI32(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_BYTE, 40);
  xfer += prot_->serializedSizeByte(this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_BOOL, 41);
  xfer += prot_->serializedSizeBool(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_LIST, 42);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_BYTE, 43);
  xfer += prot_->serializedSizeByte(this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_STRING, 44);
  xfer += prot_->serializedSizeZCBinary(this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_FLOAT, 45);
  xfer += prot_->serializedSizeFloat(this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_BOOL, 46);
  xfer += prot_->serializedSizeBool(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_BOOL, 47);
  xfer += prot_->serializedSizeBool(this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_BYTE, 48);
  xfer += prot_->serializedSizeByte(this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_BOOL, 49);
  xfer += prot_->serializedSizeBool(this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_I64, 50);
  xfer += prot_->serializedSizeI64(this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_I32, 51);
  xfer += prot_->serializedSizeI32(this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_I32, 52);
  xfer += prot_->serializedSizeI32(this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_FLOAT, 53);
  xfer += prot_->serializedSizeFloat(this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_DOUBLE, 54);
  xfer += prot_->serializedSizeDouble(this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_I64, 55);
  xfer += prot_->serializedSizeI64(this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_SET, 56);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_DOUBLE, 57);
  xfer += prot_->serializedSizeDouble(this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_STRING, 58);
  xfer += prot_->serializedSizeZCBinary(this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_I32, 59);
  xfer += prot_->serializedSizeI32(this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_BOOL, 60);
  xfer += prot_->serializedSizeBool(this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_SET, 61);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_I16, 62);
  xfer += prot_->serializedSizeI16(this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_BOOL, 63);
  xfer += prot_->serializedSizeBool(this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_MAP, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int16_t>>::serializedSize<false>(*prot_, this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_I16, 65);
  xfer += prot_->serializedSizeI16(this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_FLOAT, 66);
  xfer += prot_->serializedSizeFloat(this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_FLOAT, 67);
  xfer += prot_->serializedSizeFloat(this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_MAP, 68);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::map<int64_t, std::vector<std::string>>>::serializedSize<false>(*prot_, this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_I64, 69);
  xfer += prot_->serializedSizeI64(this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_BOOL, 70);
  xfer += prot_->serializedSizeBool(this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_STRING, 71);
  xfer += prot_->serializedSizeZCBinary(this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_STRING, 72);
  xfer += prot_->serializedSizeString(this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_STRING, 73);
  xfer += prot_->serializedSizeZCBinary(this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_I16, 74);
  xfer += prot_->serializedSizeI16(this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_BOOL, 75);
  xfer += prot_->serializedSizeBool(this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_DOUBLE, 76);
  xfer += prot_->serializedSizeDouble(this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_BOOL, 77);
  xfer += prot_->serializedSizeBool(this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_STRING, 78);
  xfer += prot_->serializedSizeZCBinary(this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_SET, 79);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_BOOL, 80);
  xfer += prot_->serializedSizeBool(this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_MAP, 81);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::floating_point>, std::map<std::string, double>>::serializedSize<false>(*prot_, this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_MAP, 82);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<bool>, bool>>::serializedSize<false>(*prot_, this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_MAP, 83);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int64_t, double>>::serializedSize<false>(*prot_, this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_I16, 84);
  xfer += prot_->serializedSizeI16(this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_SET, 85);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_I32, 86);
  xfer += prot_->serializedSizeI32(this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_I32, 87);
  xfer += prot_->serializedSizeI32(this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_LIST, 88);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_LIST, 89);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_STRING, 90);
  xfer += prot_->serializedSizeZCBinary(this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_BYTE, 91);
  xfer += prot_->serializedSizeByte(this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_LIST, 92);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_BOOL, 93);
  xfer += prot_->serializedSizeBool(this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_BOOL, 94);
  xfer += prot_->serializedSizeBool(this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_BOOL, 95);
  xfer += prot_->serializedSizeBool(this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_SET, 96);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field96);
  xfer += prot_->serializedFieldSize("field97", apache::thrift::protocol::T_STRING, 97);
  xfer += prot_->serializedSizeZCBinary(this->field97);
  xfer += prot_->serializedFieldSize("field98", apache::thrift::protocol::T_STRING, 98);
  xfer += prot_->serializedSizeZCBinary(this->field98);
  xfer += prot_->serializedFieldSize("field99", apache::thrift::protocol::T_LIST, 99);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field99);
  xfer += prot_->serializedFieldSize("field100", apache::thrift::protocol::T_I64, 100);
  xfer += prot_->serializedSizeI64(this->field100);
  xfer += prot_->serializedFieldSize("field101", apache::thrift::protocol::T_SET, 101);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field101);
  xfer += prot_->serializedFieldSize("field102", apache::thrift::protocol::T_LIST, 102);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field102);
  xfer += prot_->serializedFieldSize("field103", apache::thrift::protocol::T_I16, 103);
  xfer += prot_->serializedSizeI16(this->field103);
  xfer += prot_->serializedFieldSize("field104", apache::thrift::protocol::T_DOUBLE, 104);
  xfer += prot_->serializedSizeDouble(this->field104);
  xfer += prot_->serializedFieldSize("field105", apache::thrift::protocol::T_LIST, 105);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field105);
  xfer += prot_->serializedFieldSize("field106", apache::thrift::protocol::T_I16, 106);
  xfer += prot_->serializedSizeI16(this->field106);
  xfer += prot_->serializedFieldSize("field107", apache::thrift::protocol::T_SET, 107);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field107);
  xfer += prot_->serializedFieldSize("field108", apache::thrift::protocol::T_LIST, 108);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field108);
  xfer += prot_->serializedFieldSize("field109", apache::thrift::protocol::T_FLOAT, 109);
  xfer += prot_->serializedSizeFloat(this->field109);
  xfer += prot_->serializedFieldSize("field110", apache::thrift::protocol::T_FLOAT, 110);
  xfer += prot_->serializedSizeFloat(this->field110);
  xfer += prot_->serializedFieldSize("field111", apache::thrift::protocol::T_LIST, 111);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field111);
  xfer += prot_->serializedFieldSize("field112", apache::thrift::protocol::T_BOOL, 112);
  xfer += prot_->serializedSizeBool(this->field112);
  xfer += prot_->serializedFieldSize("field113", apache::thrift::protocol::T_STRING, 113);
  xfer += prot_->serializedSizeString(this->field113);
  xfer += prot_->serializedFieldSize("field114", apache::thrift::protocol::T_I32, 114);
  xfer += prot_->serializedSizeI32(this->field114);
  xfer += prot_->serializedFieldSize("field115", apache::thrift::protocol::T_I32, 115);
  xfer += prot_->serializedSizeI32(this->field115);
  xfer += prot_->serializedFieldSize("field116", apache::thrift::protocol::T_I32, 116);
  xfer += prot_->serializedSizeI32(this->field116);
  xfer += prot_->serializedFieldSize("field117", apache::thrift::protocol::T_DOUBLE, 117);
  xfer += prot_->serializedSizeDouble(this->field117);
  xfer += prot_->serializedFieldSize("field118", apache::thrift::protocol::T_STRING, 118);
  xfer += prot_->serializedSizeString(this->field118);
  xfer += prot_->serializedFieldSize("field119", apache::thrift::protocol::T_LIST, 119);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field119);
  xfer += prot_->serializedFieldSize("field120", apache::thrift::protocol::T_MAP, 120);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::floating_point>, std::map<std::map<double, float>, float>>::serializedSize<false>(*prot_, this->field120);
  xfer += prot_->serializedFieldSize("field121", apache::thrift::protocol::T_I64, 121);
  xfer += prot_->serializedSizeI64(this->field121);
  xfer += prot_->serializedFieldSize("field122", apache::thrift::protocol::T_BOOL, 122);
  xfer += prot_->serializedSizeBool(this->field122);
  xfer += prot_->serializedFieldSize("field123", apache::thrift::protocol::T_LIST, 123);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field123);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct0::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct0");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<double, float>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeBinary(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->writeI64(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_FLOAT, 4);
  xfer += prot_->writeFloat(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_STRING, 5);
  xfer += prot_->writeString(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_I64, 6);
  xfer += prot_->writeI64(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_I16, 8);
  xfer += prot_->writeI16(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_I16, 9);
  xfer += prot_->writeI16(this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_LIST, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_MAP, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::map<float, std::vector<std::string>>>::write(*prot_, this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_MAP, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int32_t, float>>::write(*prot_, this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::vector<std::vector<std::string>>>::write(*prot_, this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_I32, 14);
  xfer += prot_->writeI32(this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_BYTE, 15);
  xfer += prot_->writeByte(this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_BOOL, 16);
  xfer += prot_->writeBool(this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_STRING, 17);
  xfer += prot_->writeBinary(this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_I16, 18);
  xfer += prot_->writeI16(this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_LIST, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_DOUBLE, 20);
  xfer += prot_->writeDouble(this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_I64, 21);
  xfer += prot_->writeI64(this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_BOOL, 22);
  xfer += prot_->writeBool(this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_SET, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_MAP, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, std::map<double, std::string>>::write(*prot_, this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_MAP, 25);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int8_t>>::write(*prot_, this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_MAP, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>, std::map<float, std::string>>::write(*prot_, this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_BYTE, 27);
  xfer += prot_->writeByte(this->field27);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_BOOL, 28);
  xfer += prot_->writeBool(this->field28);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field29", apache::thrift::protocol::T_I64, 29);
  xfer += prot_->writeI64(this->field29);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field30", apache::thrift::protocol::T_MAP, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>, std::map<std::set<int16_t>, std::string>>::write(*prot_, this->field30);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field31", apache::thrift::protocol::T_I32, 31);
  xfer += prot_->writeI32(this->field31);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field32", apache::thrift::protocol::T_I64, 32);
  xfer += prot_->writeI64(this->field32);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field33", apache::thrift::protocol::T_MAP, 33);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int8_t, std::string>>::write(*prot_, this->field33);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field34", apache::thrift::protocol::T_STRING, 34);
  xfer += prot_->writeBinary(this->field34);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field35", apache::thrift::protocol::T_LIST, 35);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->field35);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field36", apache::thrift::protocol::T_SET, 36);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<bool, int32_t>>>::write(*prot_, this->field36);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field37", apache::thrift::protocol::T_MAP, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::integral>, std::map<std::vector<float>, int8_t>>::write(*prot_, this->field37);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field38", apache::thrift::protocol::T_BOOL, 38);
  xfer += prot_->writeBool(this->field38);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field39", apache::thrift::protocol::T_I32, 39);
  xfer += prot_->writeI32(this->field39);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field40", apache::thrift::protocol::T_BYTE, 40);
  xfer += prot_->writeByte(this->field40);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field41", apache::thrift::protocol::T_BOOL, 41);
  xfer += prot_->writeBool(this->field41);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field42", apache::thrift::protocol::T_LIST, 42);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field42);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field43", apache::thrift::protocol::T_BYTE, 43);
  xfer += prot_->writeByte(this->field43);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field44", apache::thrift::protocol::T_STRING, 44);
  xfer += prot_->writeBinary(this->field44);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field45", apache::thrift::protocol::T_FLOAT, 45);
  xfer += prot_->writeFloat(this->field45);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field46", apache::thrift::protocol::T_BOOL, 46);
  xfer += prot_->writeBool(this->field46);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field47", apache::thrift::protocol::T_BOOL, 47);
  xfer += prot_->writeBool(this->field47);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field48", apache::thrift::protocol::T_BYTE, 48);
  xfer += prot_->writeByte(this->field48);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field49", apache::thrift::protocol::T_BOOL, 49);
  xfer += prot_->writeBool(this->field49);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field50", apache::thrift::protocol::T_I64, 50);
  xfer += prot_->writeI64(this->field50);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field51", apache::thrift::protocol::T_I32, 51);
  xfer += prot_->writeI32(this->field51);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field52", apache::thrift::protocol::T_I32, 52);
  xfer += prot_->writeI32(this->field52);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field53", apache::thrift::protocol::T_FLOAT, 53);
  xfer += prot_->writeFloat(this->field53);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field54", apache::thrift::protocol::T_DOUBLE, 54);
  xfer += prot_->writeDouble(this->field54);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field55", apache::thrift::protocol::T_I64, 55);
  xfer += prot_->writeI64(this->field55);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field56", apache::thrift::protocol::T_SET, 56);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field56);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field57", apache::thrift::protocol::T_DOUBLE, 57);
  xfer += prot_->writeDouble(this->field57);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field58", apache::thrift::protocol::T_STRING, 58);
  xfer += prot_->writeBinary(this->field58);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field59", apache::thrift::protocol::T_I32, 59);
  xfer += prot_->writeI32(this->field59);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field60", apache::thrift::protocol::T_BOOL, 60);
  xfer += prot_->writeBool(this->field60);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field61", apache::thrift::protocol::T_SET, 61);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field61);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field62", apache::thrift::protocol::T_I16, 62);
  xfer += prot_->writeI16(this->field62);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field63", apache::thrift::protocol::T_BOOL, 63);
  xfer += prot_->writeBool(this->field63);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field64", apache::thrift::protocol::T_MAP, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int16_t>>::write(*prot_, this->field64);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field65", apache::thrift::protocol::T_I16, 65);
  xfer += prot_->writeI16(this->field65);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field66", apache::thrift::protocol::T_FLOAT, 66);
  xfer += prot_->writeFloat(this->field66);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field67", apache::thrift::protocol::T_FLOAT, 67);
  xfer += prot_->writeFloat(this->field67);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field68", apache::thrift::protocol::T_MAP, 68);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::map<int64_t, std::vector<std::string>>>::write(*prot_, this->field68);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field69", apache::thrift::protocol::T_I64, 69);
  xfer += prot_->writeI64(this->field69);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field70", apache::thrift::protocol::T_BOOL, 70);
  xfer += prot_->writeBool(this->field70);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field71", apache::thrift::protocol::T_STRING, 71);
  xfer += prot_->writeBinary(this->field71);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field72", apache::thrift::protocol::T_STRING, 72);
  xfer += prot_->writeString(this->field72);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field73", apache::thrift::protocol::T_STRING, 73);
  xfer += prot_->writeBinary(this->field73);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field74", apache::thrift::protocol::T_I16, 74);
  xfer += prot_->writeI16(this->field74);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field75", apache::thrift::protocol::T_BOOL, 75);
  xfer += prot_->writeBool(this->field75);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field76", apache::thrift::protocol::T_DOUBLE, 76);
  xfer += prot_->writeDouble(this->field76);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field77", apache::thrift::protocol::T_BOOL, 77);
  xfer += prot_->writeBool(this->field77);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field78", apache::thrift::protocol::T_STRING, 78);
  xfer += prot_->writeBinary(this->field78);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field79", apache::thrift::protocol::T_SET, 79);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field79);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field80", apache::thrift::protocol::T_BOOL, 80);
  xfer += prot_->writeBool(this->field80);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field81", apache::thrift::protocol::T_MAP, 81);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::floating_point>, std::map<std::string, double>>::write(*prot_, this->field81);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field82", apache::thrift::protocol::T_MAP, 82);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<bool>, bool>>::write(*prot_, this->field82);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field83", apache::thrift::protocol::T_MAP, 83);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int64_t, double>>::write(*prot_, this->field83);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field84", apache::thrift::protocol::T_I16, 84);
  xfer += prot_->writeI16(this->field84);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field85", apache::thrift::protocol::T_SET, 85);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field85);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field86", apache::thrift::protocol::T_I32, 86);
  xfer += prot_->writeI32(this->field86);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field87", apache::thrift::protocol::T_I32, 87);
  xfer += prot_->writeI32(this->field87);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field88", apache::thrift::protocol::T_LIST, 88);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field88);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field89", apache::thrift::protocol::T_LIST, 89);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field89);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field90", apache::thrift::protocol::T_STRING, 90);
  xfer += prot_->writeBinary(this->field90);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field91", apache::thrift::protocol::T_BYTE, 91);
  xfer += prot_->writeByte(this->field91);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field92", apache::thrift::protocol::T_LIST, 92);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field92);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field93", apache::thrift::protocol::T_BOOL, 93);
  xfer += prot_->writeBool(this->field93);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field94", apache::thrift::protocol::T_BOOL, 94);
  xfer += prot_->writeBool(this->field94);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field95", apache::thrift::protocol::T_BOOL, 95);
  xfer += prot_->writeBool(this->field95);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field96", apache::thrift::protocol::T_SET, 96);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field96);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field97", apache::thrift::protocol::T_STRING, 97);
  xfer += prot_->writeBinary(this->field97);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field98", apache::thrift::protocol::T_STRING, 98);
  xfer += prot_->writeBinary(this->field98);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field99", apache::thrift::protocol::T_LIST, 99);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field99);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field100", apache::thrift::protocol::T_I64, 100);
  xfer += prot_->writeI64(this->field100);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field101", apache::thrift::protocol::T_SET, 101);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field101);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field102", apache::thrift::protocol::T_LIST, 102);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field102);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field103", apache::thrift::protocol::T_I16, 103);
  xfer += prot_->writeI16(this->field103);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field104", apache::thrift::protocol::T_DOUBLE, 104);
  xfer += prot_->writeDouble(this->field104);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field105", apache::thrift::protocol::T_LIST, 105);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field105);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field106", apache::thrift::protocol::T_I16, 106);
  xfer += prot_->writeI16(this->field106);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field107", apache::thrift::protocol::T_SET, 107);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field107);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field108", apache::thrift::protocol::T_LIST, 108);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field108);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field109", apache::thrift::protocol::T_FLOAT, 109);
  xfer += prot_->writeFloat(this->field109);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field110", apache::thrift::protocol::T_FLOAT, 110);
  xfer += prot_->writeFloat(this->field110);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field111", apache::thrift::protocol::T_LIST, 111);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field111);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field112", apache::thrift::protocol::T_BOOL, 112);
  xfer += prot_->writeBool(this->field112);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field113", apache::thrift::protocol::T_STRING, 113);
  xfer += prot_->writeString(this->field113);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field114", apache::thrift::protocol::T_I32, 114);
  xfer += prot_->writeI32(this->field114);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field115", apache::thrift::protocol::T_I32, 115);
  xfer += prot_->writeI32(this->field115);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field116", apache::thrift::protocol::T_I32, 116);
  xfer += prot_->writeI32(this->field116);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field117", apache::thrift::protocol::T_DOUBLE, 117);
  xfer += prot_->writeDouble(this->field117);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field118", apache::thrift::protocol::T_STRING, 118);
  xfer += prot_->writeString(this->field118);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field119", apache::thrift::protocol::T_LIST, 119);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field119);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field120", apache::thrift::protocol::T_MAP, 120);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::floating_point>, std::map<std::map<double, float>, float>>::write(*prot_, this->field120);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field121", apache::thrift::protocol::T_I64, 121);
  xfer += prot_->writeI64(this->field121);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field122", apache::thrift::protocol::T_BOOL, 122);
  xfer += prot_->writeBool(this->field122);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field123", apache::thrift::protocol::T_LIST, 123);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field123);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace cpp2 {

template <class Protocol_>
uint32_t Struct1::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field1 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field5 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field7 = std::map<int16_t, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int8_t>>::read(*iprot, this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field9 = std::map<int32_t, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int32_t, std::string>>::read(*iprot, this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field13 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field14 = std::vector<std::vector<bool>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<bool>>>::read(*iprot, this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field15 = std::map<int16_t, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int64_t>>::read(*iprot, this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct1::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct1");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeBinary(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->serializedSizeI32(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int8_t>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->serializedSizeString(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int32_t, std::string>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_I32, 10);
  xfer += prot_->serializedSizeI32(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_STRUCT, 11);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_I64, 12);
  xfer += prot_->serializedSizeI64(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_SET, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_LIST, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<bool>>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_MAP, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int64_t>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_I64, 16);
  xfer += prot_->serializedSizeI64(this->field16);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct1::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct1");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeZCBinary(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->serializedSizeI32(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int8_t>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->serializedSizeString(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int32_t, std::string>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_I32, 10);
  xfer += prot_->serializedSizeI32(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_STRUCT, 11);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_I64, 12);
  xfer += prot_->serializedSizeI64(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_SET, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_LIST, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<bool>>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_MAP, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int64_t>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_I64, 16);
  xfer += prot_->serializedSizeI64(this->field16);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct1::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct1");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->writeI32(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->writeBinary(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->writeI32(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int8_t>>::write(*prot_, this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->writeString(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int32_t, std::string>>::write(*prot_, this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_I32, 10);
  xfer += prot_->writeI32(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_STRUCT, 11);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_I64, 12);
  xfer += prot_->writeI64(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_SET, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_LIST, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<bool>>>::write(*prot_, this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_MAP, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int64_t>>::write(*prot_, this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_I64, 16);
  xfer += prot_->writeI64(this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace cpp2 {

template <class Protocol_>
uint32_t Struct2::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field5 = std::map<std::set<int16_t>, std::vector<std::set<bool>>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>>, std::map<std::set<int16_t>, std::vector<std::set<bool>>>>::read(*iprot, this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field6 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field7 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field8 = std::map<double, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, std::map<double, std::string>>::read(*iprot, this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field9 = std::map<int32_t, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int32_t, float>>::read(*iprot, this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field18 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field19 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field20 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field24 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field27 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field27);
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field28 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field28);
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field29 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field29);
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 30:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field30);
          this->__isset.field30 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 31:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field31);
          this->__isset.field31 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 32:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field32);
          this->__isset.field32 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 33:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field33 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field33);
          this->__isset.field33 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 34:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field34);
          this->__isset.field34 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 35:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field35);
          this->__isset.field35 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 36:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field36);
          this->__isset.field36 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 37:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field37 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field37);
          this->__isset.field37 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 38:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field38);
          this->__isset.field38 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 39:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field39);
          this->__isset.field39 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 40:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field40);
          this->__isset.field40 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 41:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field41);
          this->__isset.field41 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 42:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field42);
          this->__isset.field42 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 43:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field43 = std::map< ::cpp2::Struct1, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::floating_point>, std::map< ::cpp2::Struct1, float>>::read(*iprot, this->field43);
          this->__isset.field43 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 44:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field44);
          this->__isset.field44 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 45:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field45 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field45);
          this->__isset.field45 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 46:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field46);
          this->__isset.field46 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 47:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field47 = std::set<std::vector<int8_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int8_t>>>::read(*iprot, this->field47);
          this->__isset.field47 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 48:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field48);
          this->__isset.field48 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 49:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field49 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field49);
          this->__isset.field49 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 50:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field50);
          this->__isset.field50 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 51:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field51 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field51);
          this->__isset.field51 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 52:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field52);
          this->__isset.field52 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 53:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field53 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field53);
          this->__isset.field53 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 54:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field54);
          this->__isset.field54 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 55:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field55);
          this->__isset.field55 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 56:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field56);
          this->__isset.field56 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 57:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field57 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field57);
          this->__isset.field57 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 58:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field58 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field58);
          this->__isset.field58 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 59:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field59 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field59);
          this->__isset.field59 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 60:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field60);
          this->__isset.field60 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 61:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field61);
          this->__isset.field61 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 62:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field62 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field62);
          this->__isset.field62 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 63:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field63);
          this->__isset.field63 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 64:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field64 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field64);
          this->__isset.field64 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 65:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field65 = std::map<std::map< ::cpp2::Struct0, bool>, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::map< ::cpp2::Struct0, bool>, int32_t>>::read(*iprot, this->field65);
          this->__isset.field65 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 66:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field66);
          this->__isset.field66 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 67:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field67 = std::vector< ::cpp2::Struct0>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct0>>::read(*iprot, this->field67);
          this->__isset.field67 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 68:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field68 = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->field68);
          this->__isset.field68 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 69:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field69 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field69);
          this->__isset.field69 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 70:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field70 = std::map<double, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int64_t>>::read(*iprot, this->field70);
          this->__isset.field70 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 71:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field71 = std::map<float, std::vector<bool>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<float, std::vector<bool>>>::read(*iprot, this->field71);
          this->__isset.field71 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 72:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field72);
          this->__isset.field72 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 73:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field73);
          this->__isset.field73 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 74:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field74 = std::vector<std::vector<int64_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int64_t>>>::read(*iprot, this->field74);
          this->__isset.field74 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 75:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field75);
          this->__isset.field75 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 76:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field76 = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->field76);
          this->__isset.field76 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 77:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field77);
          this->__isset.field77 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 78:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field78);
          this->__isset.field78 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 79:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field79 = std::map<int16_t, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int16_t>>::read(*iprot, this->field79);
          this->__isset.field79 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 80:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field80 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field80);
          this->__isset.field80 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 81:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field81);
          this->__isset.field81 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 82:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field82 = std::map<std::string, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::floating_point>, std::map<std::string, float>>::read(*iprot, this->field82);
          this->__isset.field82 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 83:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field83);
          this->__isset.field83 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 84:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field84 = std::set<std::map<bool, std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>>, std::set<std::map<bool, std::string>>>::read(*iprot, this->field84);
          this->__isset.field84 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 85:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field85);
          this->__isset.field85 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 86:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field86);
          this->__isset.field86 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 87:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field87);
          this->__isset.field87 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 88:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field88);
          this->__isset.field88 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 89:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field89 = std::map<bool, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<bool, std::string>>::read(*iprot, this->field89);
          this->__isset.field89 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 90:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field90);
          this->__isset.field90 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 91:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field91 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field91);
          this->__isset.field91 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 92:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field92 = std::map<std::vector<int32_t>, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<int32_t>, int8_t>>::read(*iprot, this->field92);
          this->__isset.field92 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 93:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field93 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field93);
          this->__isset.field93 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 94:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field94 = std::map<int16_t, std::set<int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<int16_t, std::set<int32_t>>>::read(*iprot, this->field94);
          this->__isset.field94 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 95:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field95 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field95);
          this->__isset.field95 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 96:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field96 = std::map<float, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, bool>>::read(*iprot, this->field96);
          this->__isset.field96 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 97:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field97);
          this->__isset.field97 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 98:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field98);
          this->__isset.field98 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 99:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field99);
          this->__isset.field99 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 100:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field100 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field100);
          this->__isset.field100 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 101:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field101 = std::set< ::cpp2::Struct0>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct0>>::read(*iprot, this->field101);
          this->__isset.field101 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 102:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field102 = std::map<bool, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int32_t>>::read(*iprot, this->field102);
          this->__isset.field102 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 103:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field103);
          this->__isset.field103 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 104:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field104);
          this->__isset.field104 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 105:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field105 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field105);
          this->__isset.field105 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 106:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field106);
          this->__isset.field106 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 107:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field107);
          this->__isset.field107 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 108:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field108);
          this->__isset.field108 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 109:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field109);
          this->__isset.field109 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 110:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field110);
          this->__isset.field110 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 111:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field111);
          this->__isset.field111 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 112:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field112);
          this->__isset.field112 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 113:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field113);
          this->__isset.field113 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 114:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field114);
          this->__isset.field114 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 115:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field115 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field115);
          this->__isset.field115 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 116:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field116 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field116);
          this->__isset.field116 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 117:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field117);
          this->__isset.field117 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 118:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field118 = std::map<double, std::set<int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<double, std::set<int32_t>>>::read(*iprot, this->field118);
          this->__isset.field118 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 119:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field119);
          this->__isset.field119 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 120:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field120);
          this->__isset.field120 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 121:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field121);
          this->__isset.field121 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 122:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field122 = std::vector< ::cpp2::Struct1>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct1>>::read(*iprot, this->field122);
          this->__isset.field122 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 123:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field123 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field123);
          this->__isset.field123 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 124:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field124);
          this->__isset.field124 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 125:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field125);
          this->__isset.field125 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 126:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field126 = std::map<bool, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<bool, std::string>>::read(*iprot, this->field126);
          this->__isset.field126 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 127:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field127);
          this->__isset.field127 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 128:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field128);
          this->__isset.field128 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 129:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field129 = std::vector<std::map<bool, float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::vector<std::map<bool, float>>>::read(*iprot, this->field129);
          this->__isset.field129 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 130:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field130);
          this->__isset.field130 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 131:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field131);
          this->__isset.field131 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 132:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field132);
          this->__isset.field132 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 133:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field133);
          this->__isset.field133 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 134:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field134);
          this->__isset.field134 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 135:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field135 = std::map<double, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, std::map<double, std::string>>::read(*iprot, this->field135);
          this->__isset.field135 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 136:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field136);
          this->__isset.field136 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 137:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field137);
          this->__isset.field137 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 138:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field138);
          this->__isset.field138 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 139:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field139);
          this->__isset.field139 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 140:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field140 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field140);
          this->__isset.field140 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 141:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field141);
          this->__isset.field141 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 142:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field142 = std::map<int64_t, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int64_t>>::read(*iprot, this->field142);
          this->__isset.field142 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 143:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field143);
          this->__isset.field143 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 144:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field144);
          this->__isset.field144 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct2::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct2");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->serializedSizeI64(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I16, 2);
  xfer += prot_->serializedSizeI16(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_BYTE, 3);
  xfer += prot_->serializedSizeByte(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeString(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>>, std::map<std::set<int16_t>, std::vector<std::set<bool>>>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_MAP, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, std::map<double, std::string>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int32_t, float>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_STRING, 10);
  xfer += prot_->serializedSizeBinary(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_STRUCT, 11);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_I64, 12);
  xfer += prot_->serializedSizeI64(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_DOUBLE, 13);
  xfer += prot_->serializedSizeDouble(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_STRUCT, 14);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_I32, 15);
  xfer += prot_->serializedSizeI32(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_BOOL, 16);
  xfer += prot_->serializedSizeBool(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_I32, 17);
  xfer += prot_->serializedSizeI32(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_SET, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_LIST, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_LIST, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_STRUCT, 21);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_STRING, 22);
  xfer += prot_->serializedSizeString(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_I16, 23);
  xfer += prot_->serializedSizeI16(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_LIST, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_I16, 25);
  xfer += prot_->serializedSizeI16(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_DOUBLE, 26);
  xfer += prot_->serializedSizeDouble(this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_SET, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_LIST, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_LIST, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_DOUBLE, 30);
  xfer += prot_->serializedSizeDouble(this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_I64, 31);
  xfer += prot_->serializedSizeI64(this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_STRING, 32);
  xfer += prot_->serializedSizeString(this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_LIST, 33);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_STRUCT, 34);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_STRUCT, 35);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_BOOL, 36);
  xfer += prot_->serializedSizeBool(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_LIST, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_I32, 38);
  xfer += prot_->serializedSizeI32(this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_I32, 39);
  xfer += prot_->serializedSizeI32(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_BOOL, 40);
  xfer += prot_->serializedSizeBool(this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_BOOL, 41);
  xfer += prot_->serializedSizeBool(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_I32, 42);
  xfer += prot_->serializedSizeI32(this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_MAP, 43);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::floating_point>, std::map< ::cpp2::Struct1, float>>::serializedSize<false>(*prot_, this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_FLOAT, 44);
  xfer += prot_->serializedSizeFloat(this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_SET, 45);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_STRING, 46);
  xfer += prot_->serializedSizeBinary(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_SET, 47);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int8_t>>>::serializedSize<false>(*prot_, this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_BOOL, 48);
  xfer += prot_->serializedSizeBool(this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_SET, 49);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_BOOL, 50);
  xfer += prot_->serializedSizeBool(this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_SET, 51);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_STRUCT, 52);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_LIST, 53);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_STRUCT, 54);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_STRING, 55);
  xfer += prot_->serializedSizeBinary(this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_I16, 56);
  xfer += prot_->serializedSizeI16(this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_SET, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_LIST, 58);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_LIST, 59);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_BYTE, 60);
  xfer += prot_->serializedSizeByte(this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_STRING, 61);
  xfer += prot_->serializedSizeString(this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_LIST, 62);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_I16, 63);
  xfer += prot_->serializedSizeI16(this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_LIST, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_MAP, 65);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::map< ::cpp2::Struct0, bool>, int32_t>>::serializedSize<false>(*prot_, this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_STRUCT, 66);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_LIST, 67);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct0>>::serializedSize<false>(*prot_, this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_LIST, 68);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_SET, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_MAP, 70);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int64_t>>::serializedSize<false>(*prot_, this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_MAP, 71);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<float, std::vector<bool>>>::serializedSize<false>(*prot_, this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_DOUBLE, 72);
  xfer += prot_->serializedSizeDouble(this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_I16, 73);
  xfer += prot_->serializedSizeI16(this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_LIST, 74);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int64_t>>>::serializedSize<false>(*prot_, this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_STRUCT, 75);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_LIST, 76);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_STRING, 77);
  xfer += prot_->serializedSizeString(this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_DOUBLE, 78);
  xfer += prot_->serializedSizeDouble(this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_MAP, 79);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int16_t>>::serializedSize<false>(*prot_, this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_LIST, 80);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_BYTE, 81);
  xfer += prot_->serializedSizeByte(this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_MAP, 82);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::floating_point>, std::map<std::string, float>>::serializedSize<false>(*prot_, this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_I64, 83);
  xfer += prot_->serializedSizeI64(this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_SET, 84);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>>, std::set<std::map<bool, std::string>>>::serializedSize<false>(*prot_, this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_BYTE, 85);
  xfer += prot_->serializedSizeByte(this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_I64, 86);
  xfer += prot_->serializedSizeI64(this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_BOOL, 87);
  xfer += prot_->serializedSizeBool(this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_STRING, 88);
  xfer += prot_->serializedSizeString(this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_MAP, 89);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<bool, std::string>>::serializedSize<false>(*prot_, this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_BYTE, 90);
  xfer += prot_->serializedSizeByte(this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_SET, 91);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_MAP, 92);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<int32_t>, int8_t>>::serializedSize<false>(*prot_, this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_SET, 93);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_MAP, 94);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<int16_t, std::set<int32_t>>>::serializedSize<false>(*prot_, this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_SET, 95);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_MAP, 96);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, bool>>::serializedSize<false>(*prot_, this->field96);
  xfer += prot_->serializedFieldSize("field97", apache::thrift::protocol::T_STRUCT, 97);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field97);
  xfer += prot_->serializedFieldSize("field98", apache::thrift::protocol::T_STRUCT, 98);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field98);
  xfer += prot_->serializedFieldSize("field99", apache::thrift::protocol::T_I32, 99);
  xfer += prot_->serializedSizeI32(this->field99);
  xfer += prot_->serializedFieldSize("field100", apache::thrift::protocol::T_LIST, 100);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field100);
  xfer += prot_->serializedFieldSize("field101", apache::thrift::protocol::T_SET, 101);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct0>>::serializedSize<false>(*prot_, this->field101);
  xfer += prot_->serializedFieldSize("field102", apache::thrift::protocol::T_MAP, 102);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int32_t>>::serializedSize<false>(*prot_, this->field102);
  xfer += prot_->serializedFieldSize("field103", apache::thrift::protocol::T_I16, 103);
  xfer += prot_->serializedSizeI16(this->field103);
  xfer += prot_->serializedFieldSize("field104", apache::thrift::protocol::T_FLOAT, 104);
  xfer += prot_->serializedSizeFloat(this->field104);
  xfer += prot_->serializedFieldSize("field105", apache::thrift::protocol::T_LIST, 105);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field105);
  xfer += prot_->serializedFieldSize("field106", apache::thrift::protocol::T_I64, 106);
  xfer += prot_->serializedSizeI64(this->field106);
  xfer += prot_->serializedFieldSize("field107", apache::thrift::protocol::T_STRUCT, 107);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field107);
  xfer += prot_->serializedFieldSize("field108", apache::thrift::protocol::T_I64, 108);
  xfer += prot_->serializedSizeI64(this->field108);
  xfer += prot_->serializedFieldSize("field109", apache::thrift::protocol::T_I64, 109);
  xfer += prot_->serializedSizeI64(this->field109);
  xfer += prot_->serializedFieldSize("field110", apache::thrift::protocol::T_FLOAT, 110);
  xfer += prot_->serializedSizeFloat(this->field110);
  xfer += prot_->serializedFieldSize("field111", apache::thrift::protocol::T_FLOAT, 111);
  xfer += prot_->serializedSizeFloat(this->field111);
  xfer += prot_->serializedFieldSize("field112", apache::thrift::protocol::T_BYTE, 112);
  xfer += prot_->serializedSizeByte(this->field112);
  xfer += prot_->serializedFieldSize("field113", apache::thrift::protocol::T_I16, 113);
  xfer += prot_->serializedSizeI16(this->field113);
  xfer += prot_->serializedFieldSize("field114", apache::thrift::protocol::T_STRUCT, 114);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field114);
  xfer += prot_->serializedFieldSize("field115", apache::thrift::protocol::T_SET, 115);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field115);
  xfer += prot_->serializedFieldSize("field116", apache::thrift::protocol::T_SET, 116);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field116);
  xfer += prot_->serializedFieldSize("field117", apache::thrift::protocol::T_BYTE, 117);
  xfer += prot_->serializedSizeByte(this->field117);
  xfer += prot_->serializedFieldSize("field118", apache::thrift::protocol::T_MAP, 118);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<double, std::set<int32_t>>>::serializedSize<false>(*prot_, this->field118);
  xfer += prot_->serializedFieldSize("field119", apache::thrift::protocol::T_BYTE, 119);
  xfer += prot_->serializedSizeByte(this->field119);
  xfer += prot_->serializedFieldSize("field120", apache::thrift::protocol::T_STRING, 120);
  xfer += prot_->serializedSizeBinary(this->field120);
  xfer += prot_->serializedFieldSize("field121", apache::thrift::protocol::T_I16, 121);
  xfer += prot_->serializedSizeI16(this->field121);
  xfer += prot_->serializedFieldSize("field122", apache::thrift::protocol::T_LIST, 122);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct1>>::serializedSize<false>(*prot_, this->field122);
  xfer += prot_->serializedFieldSize("field123", apache::thrift::protocol::T_LIST, 123);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field123);
  xfer += prot_->serializedFieldSize("field124", apache::thrift::protocol::T_I16, 124);
  xfer += prot_->serializedSizeI16(this->field124);
  xfer += prot_->serializedFieldSize("field125", apache::thrift::protocol::T_I16, 125);
  xfer += prot_->serializedSizeI16(this->field125);
  xfer += prot_->serializedFieldSize("field126", apache::thrift::protocol::T_MAP, 126);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<bool, std::string>>::serializedSize<false>(*prot_, this->field126);
  xfer += prot_->serializedFieldSize("field127", apache::thrift::protocol::T_STRUCT, 127);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field127);
  xfer += prot_->serializedFieldSize("field128", apache::thrift::protocol::T_BYTE, 128);
  xfer += prot_->serializedSizeByte(this->field128);
  xfer += prot_->serializedFieldSize("field129", apache::thrift::protocol::T_LIST, 129);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::vector<std::map<bool, float>>>::serializedSize<false>(*prot_, this->field129);
  xfer += prot_->serializedFieldSize("field130", apache::thrift::protocol::T_STRUCT, 130);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field130);
  xfer += prot_->serializedFieldSize("field131", apache::thrift::protocol::T_DOUBLE, 131);
  xfer += prot_->serializedSizeDouble(this->field131);
  xfer += prot_->serializedFieldSize("field132", apache::thrift::protocol::T_I16, 132);
  xfer += prot_->serializedSizeI16(this->field132);
  xfer += prot_->serializedFieldSize("field133", apache::thrift::protocol::T_BOOL, 133);
  xfer += prot_->serializedSizeBool(this->field133);
  xfer += prot_->serializedFieldSize("field134", apache::thrift::protocol::T_I64, 134);
  xfer += prot_->serializedSizeI64(this->field134);
  xfer += prot_->serializedFieldSize("field135", apache::thrift::protocol::T_MAP, 135);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, std::map<double, std::string>>::serializedSize<false>(*prot_, this->field135);
  xfer += prot_->serializedFieldSize("field136", apache::thrift::protocol::T_STRUCT, 136);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field136);
  xfer += prot_->serializedFieldSize("field137", apache::thrift::protocol::T_STRUCT, 137);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field137);
  xfer += prot_->serializedFieldSize("field138", apache::thrift::protocol::T_I32, 138);
  xfer += prot_->serializedSizeI32(this->field138);
  xfer += prot_->serializedFieldSize("field139", apache::thrift::protocol::T_STRUCT, 139);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field139);
  xfer += prot_->serializedFieldSize("field140", apache::thrift::protocol::T_SET, 140);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field140);
  xfer += prot_->serializedFieldSize("field141", apache::thrift::protocol::T_I64, 141);
  xfer += prot_->serializedSizeI64(this->field141);
  xfer += prot_->serializedFieldSize("field142", apache::thrift::protocol::T_MAP, 142);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int64_t>>::serializedSize<false>(*prot_, this->field142);
  xfer += prot_->serializedFieldSize("field143", apache::thrift::protocol::T_STRING, 143);
  xfer += prot_->serializedSizeBinary(this->field143);
  xfer += prot_->serializedFieldSize("field144", apache::thrift::protocol::T_I16, 144);
  xfer += prot_->serializedSizeI16(this->field144);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct2::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct2");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->serializedSizeI64(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I16, 2);
  xfer += prot_->serializedSizeI16(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_BYTE, 3);
  xfer += prot_->serializedSizeByte(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeString(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>>, std::map<std::set<int16_t>, std::vector<std::set<bool>>>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_MAP, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, std::map<double, std::string>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int32_t, float>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_STRING, 10);
  xfer += prot_->serializedSizeZCBinary(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_STRUCT, 11);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_I64, 12);
  xfer += prot_->serializedSizeI64(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_DOUBLE, 13);
  xfer += prot_->serializedSizeDouble(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_STRUCT, 14);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_I32, 15);
  xfer += prot_->serializedSizeI32(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_BOOL, 16);
  xfer += prot_->serializedSizeBool(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_I32, 17);
  xfer += prot_->serializedSizeI32(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_SET, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_LIST, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_LIST, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_STRUCT, 21);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_STRING, 22);
  xfer += prot_->serializedSizeString(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_I16, 23);
  xfer += prot_->serializedSizeI16(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_LIST, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_I16, 25);
  xfer += prot_->serializedSizeI16(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_DOUBLE, 26);
  xfer += prot_->serializedSizeDouble(this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_SET, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_LIST, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_LIST, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_DOUBLE, 30);
  xfer += prot_->serializedSizeDouble(this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_I64, 31);
  xfer += prot_->serializedSizeI64(this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_STRING, 32);
  xfer += prot_->serializedSizeString(this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_LIST, 33);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_STRUCT, 34);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_STRUCT, 35);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_BOOL, 36);
  xfer += prot_->serializedSizeBool(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_LIST, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_I32, 38);
  xfer += prot_->serializedSizeI32(this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_I32, 39);
  xfer += prot_->serializedSizeI32(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_BOOL, 40);
  xfer += prot_->serializedSizeBool(this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_BOOL, 41);
  xfer += prot_->serializedSizeBool(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_I32, 42);
  xfer += prot_->serializedSizeI32(this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_MAP, 43);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::floating_point>, std::map< ::cpp2::Struct1, float>>::serializedSize<false>(*prot_, this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_FLOAT, 44);
  xfer += prot_->serializedSizeFloat(this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_SET, 45);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_STRING, 46);
  xfer += prot_->serializedSizeZCBinary(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_SET, 47);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int8_t>>>::serializedSize<false>(*prot_, this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_BOOL, 48);
  xfer += prot_->serializedSizeBool(this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_SET, 49);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_BOOL, 50);
  xfer += prot_->serializedSizeBool(this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_SET, 51);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_STRUCT, 52);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_LIST, 53);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_STRUCT, 54);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_STRING, 55);
  xfer += prot_->serializedSizeZCBinary(this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_I16, 56);
  xfer += prot_->serializedSizeI16(this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_SET, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_LIST, 58);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_LIST, 59);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_BYTE, 60);
  xfer += prot_->serializedSizeByte(this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_STRING, 61);
  xfer += prot_->serializedSizeString(this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_LIST, 62);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_I16, 63);
  xfer += prot_->serializedSizeI16(this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_LIST, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_MAP, 65);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::map< ::cpp2::Struct0, bool>, int32_t>>::serializedSize<false>(*prot_, this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_STRUCT, 66);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_LIST, 67);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct0>>::serializedSize<false>(*prot_, this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_LIST, 68);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_SET, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_MAP, 70);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int64_t>>::serializedSize<false>(*prot_, this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_MAP, 71);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<float, std::vector<bool>>>::serializedSize<false>(*prot_, this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_DOUBLE, 72);
  xfer += prot_->serializedSizeDouble(this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_I16, 73);
  xfer += prot_->serializedSizeI16(this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_LIST, 74);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int64_t>>>::serializedSize<false>(*prot_, this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_STRUCT, 75);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_LIST, 76);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_STRING, 77);
  xfer += prot_->serializedSizeString(this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_DOUBLE, 78);
  xfer += prot_->serializedSizeDouble(this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_MAP, 79);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int16_t>>::serializedSize<false>(*prot_, this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_LIST, 80);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_BYTE, 81);
  xfer += prot_->serializedSizeByte(this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_MAP, 82);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::floating_point>, std::map<std::string, float>>::serializedSize<false>(*prot_, this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_I64, 83);
  xfer += prot_->serializedSizeI64(this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_SET, 84);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>>, std::set<std::map<bool, std::string>>>::serializedSize<false>(*prot_, this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_BYTE, 85);
  xfer += prot_->serializedSizeByte(this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_I64, 86);
  xfer += prot_->serializedSizeI64(this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_BOOL, 87);
  xfer += prot_->serializedSizeBool(this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_STRING, 88);
  xfer += prot_->serializedSizeString(this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_MAP, 89);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<bool, std::string>>::serializedSize<false>(*prot_, this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_BYTE, 90);
  xfer += prot_->serializedSizeByte(this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_SET, 91);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_MAP, 92);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<int32_t>, int8_t>>::serializedSize<false>(*prot_, this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_SET, 93);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_MAP, 94);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<int16_t, std::set<int32_t>>>::serializedSize<false>(*prot_, this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_SET, 95);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_MAP, 96);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, bool>>::serializedSize<false>(*prot_, this->field96);
  xfer += prot_->serializedFieldSize("field97", apache::thrift::protocol::T_STRUCT, 97);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field97);
  xfer += prot_->serializedFieldSize("field98", apache::thrift::protocol::T_STRUCT, 98);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field98);
  xfer += prot_->serializedFieldSize("field99", apache::thrift::protocol::T_I32, 99);
  xfer += prot_->serializedSizeI32(this->field99);
  xfer += prot_->serializedFieldSize("field100", apache::thrift::protocol::T_LIST, 100);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field100);
  xfer += prot_->serializedFieldSize("field101", apache::thrift::protocol::T_SET, 101);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct0>>::serializedSize<false>(*prot_, this->field101);
  xfer += prot_->serializedFieldSize("field102", apache::thrift::protocol::T_MAP, 102);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int32_t>>::serializedSize<false>(*prot_, this->field102);
  xfer += prot_->serializedFieldSize("field103", apache::thrift::protocol::T_I16, 103);
  xfer += prot_->serializedSizeI16(this->field103);
  xfer += prot_->serializedFieldSize("field104", apache::thrift::protocol::T_FLOAT, 104);
  xfer += prot_->serializedSizeFloat(this->field104);
  xfer += prot_->serializedFieldSize("field105", apache::thrift::protocol::T_LIST, 105);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field105);
  xfer += prot_->serializedFieldSize("field106", apache::thrift::protocol::T_I64, 106);
  xfer += prot_->serializedSizeI64(this->field106);
  xfer += prot_->serializedFieldSize("field107", apache::thrift::protocol::T_STRUCT, 107);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field107);
  xfer += prot_->serializedFieldSize("field108", apache::thrift::protocol::T_I64, 108);
  xfer += prot_->serializedSizeI64(this->field108);
  xfer += prot_->serializedFieldSize("field109", apache::thrift::protocol::T_I64, 109);
  xfer += prot_->serializedSizeI64(this->field109);
  xfer += prot_->serializedFieldSize("field110", apache::thrift::protocol::T_FLOAT, 110);
  xfer += prot_->serializedSizeFloat(this->field110);
  xfer += prot_->serializedFieldSize("field111", apache::thrift::protocol::T_FLOAT, 111);
  xfer += prot_->serializedSizeFloat(this->field111);
  xfer += prot_->serializedFieldSize("field112", apache::thrift::protocol::T_BYTE, 112);
  xfer += prot_->serializedSizeByte(this->field112);
  xfer += prot_->serializedFieldSize("field113", apache::thrift::protocol::T_I16, 113);
  xfer += prot_->serializedSizeI16(this->field113);
  xfer += prot_->serializedFieldSize("field114", apache::thrift::protocol::T_STRUCT, 114);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field114);
  xfer += prot_->serializedFieldSize("field115", apache::thrift::protocol::T_SET, 115);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field115);
  xfer += prot_->serializedFieldSize("field116", apache::thrift::protocol::T_SET, 116);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field116);
  xfer += prot_->serializedFieldSize("field117", apache::thrift::protocol::T_BYTE, 117);
  xfer += prot_->serializedSizeByte(this->field117);
  xfer += prot_->serializedFieldSize("field118", apache::thrift::protocol::T_MAP, 118);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<double, std::set<int32_t>>>::serializedSize<false>(*prot_, this->field118);
  xfer += prot_->serializedFieldSize("field119", apache::thrift::protocol::T_BYTE, 119);
  xfer += prot_->serializedSizeByte(this->field119);
  xfer += prot_->serializedFieldSize("field120", apache::thrift::protocol::T_STRING, 120);
  xfer += prot_->serializedSizeZCBinary(this->field120);
  xfer += prot_->serializedFieldSize("field121", apache::thrift::protocol::T_I16, 121);
  xfer += prot_->serializedSizeI16(this->field121);
  xfer += prot_->serializedFieldSize("field122", apache::thrift::protocol::T_LIST, 122);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct1>>::serializedSize<false>(*prot_, this->field122);
  xfer += prot_->serializedFieldSize("field123", apache::thrift::protocol::T_LIST, 123);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field123);
  xfer += prot_->serializedFieldSize("field124", apache::thrift::protocol::T_I16, 124);
  xfer += prot_->serializedSizeI16(this->field124);
  xfer += prot_->serializedFieldSize("field125", apache::thrift::protocol::T_I16, 125);
  xfer += prot_->serializedSizeI16(this->field125);
  xfer += prot_->serializedFieldSize("field126", apache::thrift::protocol::T_MAP, 126);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<bool, std::string>>::serializedSize<false>(*prot_, this->field126);
  xfer += prot_->serializedFieldSize("field127", apache::thrift::protocol::T_STRUCT, 127);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field127);
  xfer += prot_->serializedFieldSize("field128", apache::thrift::protocol::T_BYTE, 128);
  xfer += prot_->serializedSizeByte(this->field128);
  xfer += prot_->serializedFieldSize("field129", apache::thrift::protocol::T_LIST, 129);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::vector<std::map<bool, float>>>::serializedSize<false>(*prot_, this->field129);
  xfer += prot_->serializedFieldSize("field130", apache::thrift::protocol::T_STRUCT, 130);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field130);
  xfer += prot_->serializedFieldSize("field131", apache::thrift::protocol::T_DOUBLE, 131);
  xfer += prot_->serializedSizeDouble(this->field131);
  xfer += prot_->serializedFieldSize("field132", apache::thrift::protocol::T_I16, 132);
  xfer += prot_->serializedSizeI16(this->field132);
  xfer += prot_->serializedFieldSize("field133", apache::thrift::protocol::T_BOOL, 133);
  xfer += prot_->serializedSizeBool(this->field133);
  xfer += prot_->serializedFieldSize("field134", apache::thrift::protocol::T_I64, 134);
  xfer += prot_->serializedSizeI64(this->field134);
  xfer += prot_->serializedFieldSize("field135", apache::thrift::protocol::T_MAP, 135);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, std::map<double, std::string>>::serializedSize<false>(*prot_, this->field135);
  xfer += prot_->serializedFieldSize("field136", apache::thrift::protocol::T_STRUCT, 136);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field136);
  xfer += prot_->serializedFieldSize("field137", apache::thrift::protocol::T_STRUCT, 137);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field137);
  xfer += prot_->serializedFieldSize("field138", apache::thrift::protocol::T_I32, 138);
  xfer += prot_->serializedSizeI32(this->field138);
  xfer += prot_->serializedFieldSize("field139", apache::thrift::protocol::T_STRUCT, 139);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field139);
  xfer += prot_->serializedFieldSize("field140", apache::thrift::protocol::T_SET, 140);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field140);
  xfer += prot_->serializedFieldSize("field141", apache::thrift::protocol::T_I64, 141);
  xfer += prot_->serializedSizeI64(this->field141);
  xfer += prot_->serializedFieldSize("field142", apache::thrift::protocol::T_MAP, 142);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int64_t>>::serializedSize<false>(*prot_, this->field142);
  xfer += prot_->serializedFieldSize("field143", apache::thrift::protocol::T_STRING, 143);
  xfer += prot_->serializedSizeZCBinary(this->field143);
  xfer += prot_->serializedFieldSize("field144", apache::thrift::protocol::T_I16, 144);
  xfer += prot_->serializedSizeI16(this->field144);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct2::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct2");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->writeI64(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_I16, 2);
  xfer += prot_->writeI16(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_BYTE, 3);
  xfer += prot_->writeByte(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->writeString(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>>, std::map<std::set<int16_t>, std::vector<std::set<bool>>>>::write(*prot_, this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_MAP, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, std::map<double, std::string>>::write(*prot_, this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int32_t, float>>::write(*prot_, this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_STRING, 10);
  xfer += prot_->writeBinary(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_STRUCT, 11);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_I64, 12);
  xfer += prot_->writeI64(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_DOUBLE, 13);
  xfer += prot_->writeDouble(this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_STRUCT, 14);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_I32, 15);
  xfer += prot_->writeI32(this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_BOOL, 16);
  xfer += prot_->writeBool(this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_I32, 17);
  xfer += prot_->writeI32(this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_SET, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_LIST, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_LIST, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_STRUCT, 21);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_STRING, 22);
  xfer += prot_->writeString(this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_I16, 23);
  xfer += prot_->writeI16(this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_LIST, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_I16, 25);
  xfer += prot_->writeI16(this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_DOUBLE, 26);
  xfer += prot_->writeDouble(this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_SET, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field27);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_LIST, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field28);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field29", apache::thrift::protocol::T_LIST, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field29);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field30", apache::thrift::protocol::T_DOUBLE, 30);
  xfer += prot_->writeDouble(this->field30);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field31", apache::thrift::protocol::T_I64, 31);
  xfer += prot_->writeI64(this->field31);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field32", apache::thrift::protocol::T_STRING, 32);
  xfer += prot_->writeString(this->field32);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field33", apache::thrift::protocol::T_LIST, 33);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field33);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field34", apache::thrift::protocol::T_STRUCT, 34);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field34);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field35", apache::thrift::protocol::T_STRUCT, 35);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field35);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field36", apache::thrift::protocol::T_BOOL, 36);
  xfer += prot_->writeBool(this->field36);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field37", apache::thrift::protocol::T_LIST, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field37);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field38", apache::thrift::protocol::T_I32, 38);
  xfer += prot_->writeI32(this->field38);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field39", apache::thrift::protocol::T_I32, 39);
  xfer += prot_->writeI32(this->field39);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field40", apache::thrift::protocol::T_BOOL, 40);
  xfer += prot_->writeBool(this->field40);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field41", apache::thrift::protocol::T_BOOL, 41);
  xfer += prot_->writeBool(this->field41);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field42", apache::thrift::protocol::T_I32, 42);
  xfer += prot_->writeI32(this->field42);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field43", apache::thrift::protocol::T_MAP, 43);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::floating_point>, std::map< ::cpp2::Struct1, float>>::write(*prot_, this->field43);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field44", apache::thrift::protocol::T_FLOAT, 44);
  xfer += prot_->writeFloat(this->field44);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field45", apache::thrift::protocol::T_SET, 45);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field45);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field46", apache::thrift::protocol::T_STRING, 46);
  xfer += prot_->writeBinary(this->field46);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field47", apache::thrift::protocol::T_SET, 47);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int8_t>>>::write(*prot_, this->field47);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field48", apache::thrift::protocol::T_BOOL, 48);
  xfer += prot_->writeBool(this->field48);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field49", apache::thrift::protocol::T_SET, 49);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field49);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field50", apache::thrift::protocol::T_BOOL, 50);
  xfer += prot_->writeBool(this->field50);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field51", apache::thrift::protocol::T_SET, 51);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field51);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field52", apache::thrift::protocol::T_STRUCT, 52);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field52);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field53", apache::thrift::protocol::T_LIST, 53);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field53);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field54", apache::thrift::protocol::T_STRUCT, 54);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field54);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field55", apache::thrift::protocol::T_STRING, 55);
  xfer += prot_->writeBinary(this->field55);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field56", apache::thrift::protocol::T_I16, 56);
  xfer += prot_->writeI16(this->field56);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field57", apache::thrift::protocol::T_SET, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field57);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field58", apache::thrift::protocol::T_LIST, 58);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field58);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field59", apache::thrift::protocol::T_LIST, 59);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field59);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field60", apache::thrift::protocol::T_BYTE, 60);
  xfer += prot_->writeByte(this->field60);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field61", apache::thrift::protocol::T_STRING, 61);
  xfer += prot_->writeString(this->field61);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field62", apache::thrift::protocol::T_LIST, 62);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field62);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field63", apache::thrift::protocol::T_I16, 63);
  xfer += prot_->writeI16(this->field63);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field64", apache::thrift::protocol::T_LIST, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field64);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field65", apache::thrift::protocol::T_MAP, 65);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::map< ::cpp2::Struct0, bool>, int32_t>>::write(*prot_, this->field65);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field66", apache::thrift::protocol::T_STRUCT, 66);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field66);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field67", apache::thrift::protocol::T_LIST, 67);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct0>>::write(*prot_, this->field67);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field68", apache::thrift::protocol::T_LIST, 68);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->field68);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field69", apache::thrift::protocol::T_SET, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field69);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field70", apache::thrift::protocol::T_MAP, 70);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int64_t>>::write(*prot_, this->field70);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field71", apache::thrift::protocol::T_MAP, 71);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<float, std::vector<bool>>>::write(*prot_, this->field71);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field72", apache::thrift::protocol::T_DOUBLE, 72);
  xfer += prot_->writeDouble(this->field72);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field73", apache::thrift::protocol::T_I16, 73);
  xfer += prot_->writeI16(this->field73);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field74", apache::thrift::protocol::T_LIST, 74);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int64_t>>>::write(*prot_, this->field74);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field75", apache::thrift::protocol::T_STRUCT, 75);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field75);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field76", apache::thrift::protocol::T_LIST, 76);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->field76);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field77", apache::thrift::protocol::T_STRING, 77);
  xfer += prot_->writeString(this->field77);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field78", apache::thrift::protocol::T_DOUBLE, 78);
  xfer += prot_->writeDouble(this->field78);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field79", apache::thrift::protocol::T_MAP, 79);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int16_t>>::write(*prot_, this->field79);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field80", apache::thrift::protocol::T_LIST, 80);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field80);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field81", apache::thrift::protocol::T_BYTE, 81);
  xfer += prot_->writeByte(this->field81);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field82", apache::thrift::protocol::T_MAP, 82);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::floating_point>, std::map<std::string, float>>::write(*prot_, this->field82);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field83", apache::thrift::protocol::T_I64, 83);
  xfer += prot_->writeI64(this->field83);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field84", apache::thrift::protocol::T_SET, 84);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>>, std::set<std::map<bool, std::string>>>::write(*prot_, this->field84);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field85", apache::thrift::protocol::T_BYTE, 85);
  xfer += prot_->writeByte(this->field85);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field86", apache::thrift::protocol::T_I64, 86);
  xfer += prot_->writeI64(this->field86);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field87", apache::thrift::protocol::T_BOOL, 87);
  xfer += prot_->writeBool(this->field87);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field88", apache::thrift::protocol::T_STRING, 88);
  xfer += prot_->writeString(this->field88);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field89", apache::thrift::protocol::T_MAP, 89);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<bool, std::string>>::write(*prot_, this->field89);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field90", apache::thrift::protocol::T_BYTE, 90);
  xfer += prot_->writeByte(this->field90);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field91", apache::thrift::protocol::T_SET, 91);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field91);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field92", apache::thrift::protocol::T_MAP, 92);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<int32_t>, int8_t>>::write(*prot_, this->field92);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field93", apache::thrift::protocol::T_SET, 93);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field93);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field94", apache::thrift::protocol::T_MAP, 94);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<int16_t, std::set<int32_t>>>::write(*prot_, this->field94);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field95", apache::thrift::protocol::T_SET, 95);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field95);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field96", apache::thrift::protocol::T_MAP, 96);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, bool>>::write(*prot_, this->field96);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field97", apache::thrift::protocol::T_STRUCT, 97);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field97);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field98", apache::thrift::protocol::T_STRUCT, 98);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field98);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field99", apache::thrift::protocol::T_I32, 99);
  xfer += prot_->writeI32(this->field99);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field100", apache::thrift::protocol::T_LIST, 100);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field100);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field101", apache::thrift::protocol::T_SET, 101);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct0>>::write(*prot_, this->field101);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field102", apache::thrift::protocol::T_MAP, 102);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int32_t>>::write(*prot_, this->field102);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field103", apache::thrift::protocol::T_I16, 103);
  xfer += prot_->writeI16(this->field103);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field104", apache::thrift::protocol::T_FLOAT, 104);
  xfer += prot_->writeFloat(this->field104);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field105", apache::thrift::protocol::T_LIST, 105);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field105);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field106", apache::thrift::protocol::T_I64, 106);
  xfer += prot_->writeI64(this->field106);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field107", apache::thrift::protocol::T_STRUCT, 107);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field107);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field108", apache::thrift::protocol::T_I64, 108);
  xfer += prot_->writeI64(this->field108);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field109", apache::thrift::protocol::T_I64, 109);
  xfer += prot_->writeI64(this->field109);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field110", apache::thrift::protocol::T_FLOAT, 110);
  xfer += prot_->writeFloat(this->field110);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field111", apache::thrift::protocol::T_FLOAT, 111);
  xfer += prot_->writeFloat(this->field111);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field112", apache::thrift::protocol::T_BYTE, 112);
  xfer += prot_->writeByte(this->field112);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field113", apache::thrift::protocol::T_I16, 113);
  xfer += prot_->writeI16(this->field113);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field114", apache::thrift::protocol::T_STRUCT, 114);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field114);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field115", apache::thrift::protocol::T_SET, 115);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field115);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field116", apache::thrift::protocol::T_SET, 116);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field116);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field117", apache::thrift::protocol::T_BYTE, 117);
  xfer += prot_->writeByte(this->field117);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field118", apache::thrift::protocol::T_MAP, 118);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<double, std::set<int32_t>>>::write(*prot_, this->field118);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field119", apache::thrift::protocol::T_BYTE, 119);
  xfer += prot_->writeByte(this->field119);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field120", apache::thrift::protocol::T_STRING, 120);
  xfer += prot_->writeBinary(this->field120);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field121", apache::thrift::protocol::T_I16, 121);
  xfer += prot_->writeI16(this->field121);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field122", apache::thrift::protocol::T_LIST, 122);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct1>>::write(*prot_, this->field122);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field123", apache::thrift::protocol::T_LIST, 123);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field123);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field124", apache::thrift::protocol::T_I16, 124);
  xfer += prot_->writeI16(this->field124);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field125", apache::thrift::protocol::T_I16, 125);
  xfer += prot_->writeI16(this->field125);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field126", apache::thrift::protocol::T_MAP, 126);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<bool, std::string>>::write(*prot_, this->field126);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field127", apache::thrift::protocol::T_STRUCT, 127);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field127);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field128", apache::thrift::protocol::T_BYTE, 128);
  xfer += prot_->writeByte(this->field128);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field129", apache::thrift::protocol::T_LIST, 129);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::vector<std::map<bool, float>>>::write(*prot_, this->field129);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field130", apache::thrift::protocol::T_STRUCT, 130);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field130);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field131", apache::thrift::protocol::T_DOUBLE, 131);
  xfer += prot_->writeDouble(this->field131);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field132", apache::thrift::protocol::T_I16, 132);
  xfer += prot_->writeI16(this->field132);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field133", apache::thrift::protocol::T_BOOL, 133);
  xfer += prot_->writeBool(this->field133);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field134", apache::thrift::protocol::T_I64, 134);
  xfer += prot_->writeI64(this->field134);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field135", apache::thrift::protocol::T_MAP, 135);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, std::map<double, std::string>>::write(*prot_, this->field135);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field136", apache::thrift::protocol::T_STRUCT, 136);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field136);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field137", apache::thrift::protocol::T_STRUCT, 137);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field137);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field138", apache::thrift::protocol::T_I32, 138);
  xfer += prot_->writeI32(this->field138);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field139", apache::thrift::protocol::T_STRUCT, 139);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field139);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field140", apache::thrift::protocol::T_SET, 140);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field140);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field141", apache::thrift::protocol::T_I64, 141);
  xfer += prot_->writeI64(this->field141);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field142", apache::thrift::protocol::T_MAP, 142);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int64_t>>::write(*prot_, this->field142);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field143", apache::thrift::protocol::T_STRING, 143);
  xfer += prot_->writeBinary(this->field143);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field144", apache::thrift::protocol::T_I16, 144);
  xfer += prot_->writeI16(this->field144);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace cpp2 {

template <class Protocol_>
uint32_t Struct3::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field1 = std::map<bool, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<bool, float>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field4 = std::map<bool, double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<bool, double>>::read(*iprot, this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field5 = std::map<std::vector<int8_t>, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<int8_t>, int64_t>>::read(*iprot, this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field9 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field10 = std::set<std::vector<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::set<std::vector<std::string>>>::read(*iprot, this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field11 = std::vector<std::set<int64_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int64_t>>>::read(*iprot, this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field12 = std::set<std::map<std::string, double>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::floating_point>>, std::set<std::map<std::string, double>>>::read(*iprot, this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field15 = std::vector<std::set<std::map<int8_t, std::string>>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>>>, std::vector<std::set<std::map<int8_t, std::string>>>>::read(*iprot, this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field16 = std::map< ::cpp2::Struct0, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::string>, std::map< ::cpp2::Struct0, std::string>>::read(*iprot, this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field17 = std::vector< ::cpp2::Struct1>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct1>>::read(*iprot, this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field19 = std::map<bool, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, bool>>::read(*iprot, this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field20 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field24 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field27);
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field28 = std::set< ::cpp2::Struct0>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct0>>::read(*iprot, this->field28);
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field29);
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 30:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field30);
          this->__isset.field30 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 31:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field31 = std::set<std::vector<bool>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<bool>>>::read(*iprot, this->field31);
          this->__isset.field31 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 32:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field32 = std::vector<std::vector<int16_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int16_t>>>::read(*iprot, this->field32);
          this->__isset.field32 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 33:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field33);
          this->__isset.field33 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 34:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field34);
          this->__isset.field34 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 35:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field35);
          this->__isset.field35 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 36:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field36);
          this->__isset.field36 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 37:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field37 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field37);
          this->__isset.field37 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 38:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field38);
          this->__isset.field38 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 39:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field39);
          this->__isset.field39 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 40:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field40 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field40);
          this->__isset.field40 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 41:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field41);
          this->__isset.field41 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 42:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field42 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field42);
          this->__isset.field42 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 43:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field43);
          this->__isset.field43 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 44:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field44);
          this->__isset.field44 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 45:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field45 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field45);
          this->__isset.field45 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 46:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field46);
          this->__isset.field46 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 47:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field47);
          this->__isset.field47 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 48:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field48 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field48);
          this->__isset.field48 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 49:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field49 = std::map<int16_t, std::set<int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<int16_t, std::set<int32_t>>>::read(*iprot, this->field49);
          this->__isset.field49 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 50:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field50);
          this->__isset.field50 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 51:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field51);
          this->__isset.field51 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 52:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field52);
          this->__isset.field52 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 53:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field53 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field53);
          this->__isset.field53 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 54:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field54);
          this->__isset.field54 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 55:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field55);
          this->__isset.field55 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 56:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field56);
          this->__isset.field56 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 57:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field57);
          this->__isset.field57 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 58:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field58);
          this->__isset.field58 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 59:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field59);
          this->__isset.field59 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 60:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field60);
          this->__isset.field60 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 61:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field61);
          this->__isset.field61 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 62:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field62 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field62);
          this->__isset.field62 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 63:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field63 = std::set<std::map<int16_t, int64_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int16_t, int64_t>>>::read(*iprot, this->field63);
          this->__isset.field63 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 64:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field64);
          this->__isset.field64 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 65:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field65);
          this->__isset.field65 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 66:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field66 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field66);
          this->__isset.field66 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 67:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field67);
          this->__isset.field67 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 68:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field68);
          this->__isset.field68 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 69:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field69);
          this->__isset.field69 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 70:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field70);
          this->__isset.field70 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 71:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field71);
          this->__isset.field71 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 72:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field72 = std::map<std::map<std::string, int8_t>, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>, std::map<std::map<std::string, int8_t>, std::string>>::read(*iprot, this->field72);
          this->__isset.field72 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 73:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field73);
          this->__isset.field73 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 74:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field74);
          this->__isset.field74 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 75:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field75);
          this->__isset.field75 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 76:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field76);
          this->__isset.field76 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 77:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field77 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field77);
          this->__isset.field77 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 78:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field78 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field78);
          this->__isset.field78 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 79:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field79);
          this->__isset.field79 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 80:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field80);
          this->__isset.field80 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 81:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field81);
          this->__isset.field81 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 82:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field82 = std::map<double, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int64_t>>::read(*iprot, this->field82);
          this->__isset.field82 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 83:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field83 = std::map<int64_t, std::vector<double>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<int64_t, std::vector<double>>>::read(*iprot, this->field83);
          this->__isset.field83 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 84:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field84);
          this->__isset.field84 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 85:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field85 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field85);
          this->__isset.field85 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 86:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field86);
          this->__isset.field86 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 87:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field87);
          this->__isset.field87 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 88:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field88);
          this->__isset.field88 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 89:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field89);
          this->__isset.field89 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 90:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field90);
          this->__isset.field90 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 91:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field91);
          this->__isset.field91 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 92:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field92 = std::set< ::cpp2::Struct2>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct2>>::read(*iprot, this->field92);
          this->__isset.field92 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 93:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field93);
          this->__isset.field93 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 94:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field94);
          this->__isset.field94 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 95:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field95 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field95);
          this->__isset.field95 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 96:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field96 = std::map<int64_t, std::map<double, int64_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::map<int64_t, std::map<double, int64_t>>>::read(*iprot, this->field96);
          this->__isset.field96 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 97:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field97 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field97);
          this->__isset.field97 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 98:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field98 = std::map<int8_t, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::read(*iprot, this->field98);
          this->__isset.field98 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 99:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field99);
          this->__isset.field99 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 100:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field100);
          this->__isset.field100 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 101:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field101 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field101);
          this->__isset.field101 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 102:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field102);
          this->__isset.field102 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 103:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field103);
          this->__isset.field103 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 104:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field104 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field104);
          this->__isset.field104 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 105:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field105);
          this->__isset.field105 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 106:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field106);
          this->__isset.field106 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 107:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field107);
          this->__isset.field107 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 108:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field108);
          this->__isset.field108 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 109:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field109);
          this->__isset.field109 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 110:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field110);
          this->__isset.field110 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 111:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field111 = std::map<int8_t,  ::cpp2::Struct0>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int8_t,  ::cpp2::Struct0>>::read(*iprot, this->field111);
          this->__isset.field111 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 112:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field112);
          this->__isset.field112 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 113:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field113);
          this->__isset.field113 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 114:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field114);
          this->__isset.field114 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 115:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field115);
          this->__isset.field115 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 116:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field116 = std::map<bool, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int16_t>>::read(*iprot, this->field116);
          this->__isset.field116 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 117:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field117);
          this->__isset.field117 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 118:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field118);
          this->__isset.field118 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 119:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field119 = std::map<std::string, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::read(*iprot, this->field119);
          this->__isset.field119 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 120:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field120);
          this->__isset.field120 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 121:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field121);
          this->__isset.field121 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 122:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field122);
          this->__isset.field122 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 123:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field123);
          this->__isset.field123 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 124:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field124);
          this->__isset.field124 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 125:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field125 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field125);
          this->__isset.field125 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 126:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field126);
          this->__isset.field126 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 127:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field127);
          this->__isset.field127 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 128:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field128);
          this->__isset.field128 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 129:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field129);
          this->__isset.field129 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 130:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field130);
          this->__isset.field130 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 131:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field131);
          this->__isset.field131 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 132:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field132);
          this->__isset.field132 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 133:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field133 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field133);
          this->__isset.field133 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 134:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field134);
          this->__isset.field134 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 135:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field135 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field135);
          this->__isset.field135 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 136:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field136 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field136);
          this->__isset.field136 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 137:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field137 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field137);
          this->__isset.field137 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 138:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field138 = std::map<float, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>, std::map<float, std::string>>::read(*iprot, this->field138);
          this->__isset.field138 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 139:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field139 = std::map<bool,  ::cpp2::Struct1>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<bool,  ::cpp2::Struct1>>::read(*iprot, this->field139);
          this->__isset.field139 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 140:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field140 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field140);
          this->__isset.field140 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 141:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field141 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field141);
          this->__isset.field141 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 142:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field142 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field142);
          this->__isset.field142 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 143:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field143);
          this->__isset.field143 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 144:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field144);
          this->__isset.field144 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 145:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field145);
          this->__isset.field145 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 146:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field146);
          this->__isset.field146 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 147:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field147);
          this->__isset.field147 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 148:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field148 = std::set<std::vector<int8_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int8_t>>>::read(*iprot, this->field148);
          this->__isset.field148 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 149:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field149 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field149);
          this->__isset.field149 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 150:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field150 = std::map<std::string, double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::floating_point>, std::map<std::string, double>>::read(*iprot, this->field150);
          this->__isset.field150 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 151:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field151 = std::map<std::set<int32_t>, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::set<int32_t>, int16_t>>::read(*iprot, this->field151);
          this->__isset.field151 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 152:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field152 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field152);
          this->__isset.field152 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 153:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field153);
          this->__isset.field153 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 154:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field154 = std::map<bool, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int64_t>>::read(*iprot, this->field154);
          this->__isset.field154 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 155:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field155 = std::vector< ::cpp2::Struct1>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct1>>::read(*iprot, this->field155);
          this->__isset.field155 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 156:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field156);
          this->__isset.field156 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 157:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field157 = std::map<int16_t, std::set<bool>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<int16_t, std::set<bool>>>::read(*iprot, this->field157);
          this->__isset.field157 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 158:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field158);
          this->__isset.field158 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 159:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field159);
          this->__isset.field159 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 160:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field160);
          this->__isset.field160 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 161:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field161);
          this->__isset.field161 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 162:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field162);
          this->__isset.field162 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 163:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field163 = std::vector< ::cpp2::Struct1>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct1>>::read(*iprot, this->field163);
          this->__isset.field163 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 164:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field164);
          this->__isset.field164 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 165:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field165);
          this->__isset.field165 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 166:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field166);
          this->__isset.field166 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 167:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field167);
          this->__isset.field167 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 168:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field168);
          this->__isset.field168 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 169:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field169 = std::map<float, double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, double>>::read(*iprot, this->field169);
          this->__isset.field169 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 170:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field170);
          this->__isset.field170 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 171:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field171 = std::map<std::vector<double>, double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::floating_point>, std::map<std::vector<double>, double>>::read(*iprot, this->field171);
          this->__isset.field171 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 172:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field172);
          this->__isset.field172 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 173:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field173 = std::vector<std::vector<float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<float>>>::read(*iprot, this->field173);
          this->__isset.field173 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 174:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field174);
          this->__isset.field174 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 175:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field175);
          this->__isset.field175 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 176:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field176);
          this->__isset.field176 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 177:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field177);
          this->__isset.field177 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 178:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field178 = std::map<int32_t, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int32_t, std::string>>::read(*iprot, this->field178);
          this->__isset.field178 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 179:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field179 = std::set<std::set<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::set<std::set<std::string>>>::read(*iprot, this->field179);
          this->__isset.field179 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 180:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field180);
          this->__isset.field180 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct3::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct3");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<bool, float>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->serializedSizeDouble(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<bool, double>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<int8_t>, int64_t>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_STRING, 6);
  xfer += prot_->serializedSizeBinary(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_I64, 8);
  xfer += prot_->serializedSizeI64(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_SET, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::set<std::vector<std::string>>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int64_t>>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_SET, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::floating_point>>, std::set<std::map<std::string, double>>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_STRING, 13);
  xfer += prot_->serializedSizeString(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_STRUCT, 14);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_LIST, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>>>, std::vector<std::set<std::map<int8_t, std::string>>>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_MAP, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::string>, std::map< ::cpp2::Struct0, std::string>>::serializedSize<false>(*prot_, this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_LIST, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct1>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_STRING, 18);
  xfer += prot_->serializedSizeString(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_MAP, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, bool>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_LIST, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_I64, 21);
  xfer += prot_->serializedSizeI64(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_STRUCT, 22);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_BYTE, 23);
  xfer += prot_->serializedSizeByte(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_SET, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_FLOAT, 25);
  xfer += prot_->serializedSizeFloat(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_I32, 26);
  xfer += prot_->serializedSizeI32(this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_DOUBLE, 27);
  xfer += prot_->serializedSizeDouble(this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_SET, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct0>>::serializedSize<false>(*prot_, this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_STRUCT, 29);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_BYTE, 30);
  xfer += prot_->serializedSizeByte(this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_SET, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<bool>>>::serializedSize<false>(*prot_, this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_LIST, 32);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int16_t>>>::serializedSize<false>(*prot_, this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_I32, 33);
  xfer += prot_->serializedSizeI32(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_STRUCT, 34);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_I16, 35);
  xfer += prot_->serializedSizeI16(this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_BOOL, 36);
  xfer += prot_->serializedSizeBool(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_SET, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_STRUCT, 38);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_BYTE, 39);
  xfer += prot_->serializedSizeByte(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_LIST, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_I32, 41);
  xfer += prot_->serializedSizeI32(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_SET, 42);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_STRUCT, 43);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_STRUCT, 44);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_SET, 45);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_FLOAT, 46);
  xfer += prot_->serializedSizeFloat(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_I64, 47);
  xfer += prot_->serializedSizeI64(this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_LIST, 48);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_MAP, 49);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<int16_t, std::set<int32_t>>>::serializedSize<false>(*prot_, this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_BOOL, 50);
  xfer += prot_->serializedSizeBool(this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_I64, 51);
  xfer += prot_->serializedSizeI64(this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_I32, 52);
  xfer += prot_->serializedSizeI32(this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_LIST, 53);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_STRUCT, 54);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_BOOL, 55);
  xfer += prot_->serializedSizeBool(this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_STRUCT, 56);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_I32, 57);
  xfer += prot_->serializedSizeI32(this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_BOOL, 58);
  xfer += prot_->serializedSizeBool(this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_STRING, 59);
  xfer += prot_->serializedSizeString(this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_I16, 60);
  xfer += prot_->serializedSizeI16(this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_STRUCT, 61);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_SET, 62);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_SET, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int16_t, int64_t>>>::serializedSize<false>(*prot_, this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_I32, 64);
  xfer += prot_->serializedSizeI32(this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_STRUCT, 65);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_LIST, 66);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_BYTE, 67);
  xfer += prot_->serializedSizeByte(this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_BOOL, 68);
  xfer += prot_->serializedSizeBool(this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_FLOAT, 69);
  xfer += prot_->serializedSizeFloat(this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_FLOAT, 70);
  xfer += prot_->serializedSizeFloat(this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_BOOL, 71);
  xfer += prot_->serializedSizeBool(this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_MAP, 72);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>, std::map<std::map<std::string, int8_t>, std::string>>::serializedSize<false>(*prot_, this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_I32, 73);
  xfer += prot_->serializedSizeI32(this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_DOUBLE, 74);
  xfer += prot_->serializedSizeDouble(this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_I64, 75);
  xfer += prot_->serializedSizeI64(this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_I64, 76);
  xfer += prot_->serializedSizeI64(this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_LIST, 77);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_LIST, 78);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_STRING, 79);
  xfer += prot_->serializedSizeString(this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_BOOL, 80);
  xfer += prot_->serializedSizeBool(this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_I64, 81);
  xfer += prot_->serializedSizeI64(this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_MAP, 82);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int64_t>>::serializedSize<false>(*prot_, this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_MAP, 83);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<int64_t, std::vector<double>>>::serializedSize<false>(*prot_, this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_BYTE, 84);
  xfer += prot_->serializedSizeByte(this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_LIST, 85);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_DOUBLE, 86);
  xfer += prot_->serializedSizeDouble(this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_FLOAT, 87);
  xfer += prot_->serializedSizeFloat(this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_FLOAT, 88);
  xfer += prot_->serializedSizeFloat(this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_STRING, 89);
  xfer += prot_->serializedSizeString(this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_I32, 90);
  xfer += prot_->serializedSizeI32(this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_STRUCT, 91);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_SET, 92);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct2>>::serializedSize<false>(*prot_, this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_FLOAT, 93);
  xfer += prot_->serializedSizeFloat(this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_I16, 94);
  xfer += prot_->serializedSizeI16(this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_LIST, 95);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_MAP, 96);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::map<int64_t, std::map<double, int64_t>>>::serializedSize<false>(*prot_, this->field96);
  xfer += prot_->serializedFieldSize("field97", apache::thrift::protocol::T_LIST, 97);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field97);
  xfer += prot_->serializedFieldSize("field98", apache::thrift::protocol::T_MAP, 98);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::serializedSize<false>(*prot_, this->field98);
  xfer += prot_->serializedFieldSize("field99", apache::thrift::protocol::T_I32, 99);
  xfer += prot_->serializedSizeI32(this->field99);
  xfer += prot_->serializedFieldSize("field100", apache::thrift::protocol::T_STRUCT, 100);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field100);
  xfer += prot_->serializedFieldSize("field101", apache::thrift::protocol::T_LIST, 101);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field101);
  xfer += prot_->serializedFieldSize("field102", apache::thrift::protocol::T_I16, 102);
  xfer += prot_->serializedSizeI16(this->field102);
  xfer += prot_->serializedFieldSize("field103", apache::thrift::protocol::T_I16, 103);
  xfer += prot_->serializedSizeI16(this->field103);
  xfer += prot_->serializedFieldSize("field104", apache::thrift::protocol::T_LIST, 104);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field104);
  xfer += prot_->serializedFieldSize("field105", apache::thrift::protocol::T_STRING, 105);
  xfer += prot_->serializedSizeBinary(this->field105);
  xfer += prot_->serializedFieldSize("field106", apache::thrift::protocol::T_I16, 106);
  xfer += prot_->serializedSizeI16(this->field106);
  xfer += prot_->serializedFieldSize("field107", apache::thrift::protocol::T_FLOAT, 107);
  xfer += prot_->serializedSizeFloat(this->field107);
  xfer += prot_->serializedFieldSize("field108", apache::thrift::protocol::T_DOUBLE, 108);
  xfer += prot_->serializedSizeDouble(this->field108);
  xfer += prot_->serializedFieldSize("field109", apache::thrift::protocol::T_FLOAT, 109);
  xfer += prot_->serializedSizeFloat(this->field109);
  xfer += prot_->serializedFieldSize("field110", apache::thrift::protocol::T_DOUBLE, 110);
  xfer += prot_->serializedSizeDouble(this->field110);
  xfer += prot_->serializedFieldSize("field111", apache::thrift::protocol::T_MAP, 111);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int8_t,  ::cpp2::Struct0>>::serializedSize<false>(*prot_, this->field111);
  xfer += prot_->serializedFieldSize("field112", apache::thrift::protocol::T_FLOAT, 112);
  xfer += prot_->serializedSizeFloat(this->field112);
  xfer += prot_->serializedFieldSize("field113", apache::thrift::protocol::T_DOUBLE, 113);
  xfer += prot_->serializedSizeDouble(this->field113);
  xfer += prot_->serializedFieldSize("field114", apache::thrift::protocol::T_FLOAT, 114);
  xfer += prot_->serializedSizeFloat(this->field114);
  xfer += prot_->serializedFieldSize("field115", apache::thrift::protocol::T_BOOL, 115);
  xfer += prot_->serializedSizeBool(this->field115);
  xfer += prot_->serializedFieldSize("field116", apache::thrift::protocol::T_MAP, 116);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int16_t>>::serializedSize<false>(*prot_, this->field116);
  xfer += prot_->serializedFieldSize("field117", apache::thrift::protocol::T_STRING, 117);
  xfer += prot_->serializedSizeString(this->field117);
  xfer += prot_->serializedFieldSize("field118", apache::thrift::protocol::T_STRUCT, 118);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field118);
  xfer += prot_->serializedFieldSize("field119", apache::thrift::protocol::T_MAP, 119);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::serializedSize<false>(*prot_, this->field119);
  xfer += prot_->serializedFieldSize("field120", apache::thrift::protocol::T_I16, 120);
  xfer += prot_->serializedSizeI16(this->field120);
  xfer += prot_->serializedFieldSize("field121", apache::thrift::protocol::T_FLOAT, 121);
  xfer += prot_->serializedSizeFloat(this->field121);
  xfer += prot_->serializedFieldSize("field122", apache::thrift::protocol::T_BOOL, 122);
  xfer += prot_->serializedSizeBool(this->field122);
  xfer += prot_->serializedFieldSize("field123", apache::thrift::protocol::T_BYTE, 123);
  xfer += prot_->serializedSizeByte(this->field123);
  xfer += prot_->serializedFieldSize("field124", apache::thrift::protocol::T_FLOAT, 124);
  xfer += prot_->serializedSizeFloat(this->field124);
  xfer += prot_->serializedFieldSize("field125", apache::thrift::protocol::T_SET, 125);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field125);
  xfer += prot_->serializedFieldSize("field126", apache::thrift::protocol::T_I32, 126);
  xfer += prot_->serializedSizeI32(this->field126);
  xfer += prot_->serializedFieldSize("field127", apache::thrift::protocol::T_I16, 127);
  xfer += prot_->serializedSizeI16(this->field127);
  xfer += prot_->serializedFieldSize("field128", apache::thrift::protocol::T_BOOL, 128);
  xfer += prot_->serializedSizeBool(this->field128);
  xfer += prot_->serializedFieldSize("field129", apache::thrift::protocol::T_STRUCT, 129);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field129);
  xfer += prot_->serializedFieldSize("field130", apache::thrift::protocol::T_STRUCT, 130);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field130);
  xfer += prot_->serializedFieldSize("field131", apache::thrift::protocol::T_STRING, 131);
  xfer += prot_->serializedSizeBinary(this->field131);
  xfer += prot_->serializedFieldSize("field132", apache::thrift::protocol::T_I16, 132);
  xfer += prot_->serializedSizeI16(this->field132);
  xfer += prot_->serializedFieldSize("field133", apache::thrift::protocol::T_LIST, 133);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field133);
  xfer += prot_->serializedFieldSize("field134", apache::thrift::protocol::T_I16, 134);
  xfer += prot_->serializedSizeI16(this->field134);
  xfer += prot_->serializedFieldSize("field135", apache::thrift::protocol::T_LIST, 135);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field135);
  xfer += prot_->serializedFieldSize("field136", apache::thrift::protocol::T_SET, 136);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field136);
  xfer += prot_->serializedFieldSize("field137", apache::thrift::protocol::T_SET, 137);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field137);
  xfer += prot_->serializedFieldSize("field138", apache::thrift::protocol::T_MAP, 138);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>, std::map<float, std::string>>::serializedSize<false>(*prot_, this->field138);
  xfer += prot_->serializedFieldSize("field139", apache::thrift::protocol::T_MAP, 139);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<bool,  ::cpp2::Struct1>>::serializedSize<false>(*prot_, this->field139);
  xfer += prot_->serializedFieldSize("field140", apache::thrift::protocol::T_SET, 140);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field140);
  xfer += prot_->serializedFieldSize("field141", apache::thrift::protocol::T_SET, 141);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field141);
  xfer += prot_->serializedFieldSize("field142", apache::thrift::protocol::T_SET, 142);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field142);
  xfer += prot_->serializedFieldSize("field143", apache::thrift::protocol::T_BOOL, 143);
  xfer += prot_->serializedSizeBool(this->field143);
  xfer += prot_->serializedFieldSize("field144", apache::thrift::protocol::T_STRUCT, 144);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field144);
  xfer += prot_->serializedFieldSize("field145", apache::thrift::protocol::T_FLOAT, 145);
  xfer += prot_->serializedSizeFloat(this->field145);
  xfer += prot_->serializedFieldSize("field146", apache::thrift::protocol::T_I32, 146);
  xfer += prot_->serializedSizeI32(this->field146);
  xfer += prot_->serializedFieldSize("field147", apache::thrift::protocol::T_STRING, 147);
  xfer += prot_->serializedSizeString(this->field147);
  xfer += prot_->serializedFieldSize("field148", apache::thrift::protocol::T_SET, 148);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int8_t>>>::serializedSize<false>(*prot_, this->field148);
  xfer += prot_->serializedFieldSize("field149", apache::thrift::protocol::T_LIST, 149);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field149);
  xfer += prot_->serializedFieldSize("field150", apache::thrift::protocol::T_MAP, 150);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::floating_point>, std::map<std::string, double>>::serializedSize<false>(*prot_, this->field150);
  xfer += prot_->serializedFieldSize("field151", apache::thrift::protocol::T_MAP, 151);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::set<int32_t>, int16_t>>::serializedSize<false>(*prot_, this->field151);
  xfer += prot_->serializedFieldSize("field152", apache::thrift::protocol::T_LIST, 152);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field152);
  xfer += prot_->serializedFieldSize("field153", apache::thrift::protocol::T_FLOAT, 153);
  xfer += prot_->serializedSizeFloat(this->field153);
  xfer += prot_->serializedFieldSize("field154", apache::thrift::protocol::T_MAP, 154);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int64_t>>::serializedSize<false>(*prot_, this->field154);
  xfer += prot_->serializedFieldSize("field155", apache::thrift::protocol::T_LIST, 155);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct1>>::serializedSize<false>(*prot_, this->field155);
  xfer += prot_->serializedFieldSize("field156", apache::thrift::protocol::T_FLOAT, 156);
  xfer += prot_->serializedSizeFloat(this->field156);
  xfer += prot_->serializedFieldSize("field157", apache::thrift::protocol::T_MAP, 157);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<int16_t, std::set<bool>>>::serializedSize<false>(*prot_, this->field157);
  xfer += prot_->serializedFieldSize("field158", apache::thrift::protocol::T_STRUCT, 158);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field158);
  xfer += prot_->serializedFieldSize("field159", apache::thrift::protocol::T_I32, 159);
  xfer += prot_->serializedSizeI32(this->field159);
  xfer += prot_->serializedFieldSize("field160", apache::thrift::protocol::T_I16, 160);
  xfer += prot_->serializedSizeI16(this->field160);
  xfer += prot_->serializedFieldSize("field161", apache::thrift::protocol::T_STRUCT, 161);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field161);
  xfer += prot_->serializedFieldSize("field162", apache::thrift::protocol::T_STRING, 162);
  xfer += prot_->serializedSizeString(this->field162);
  xfer += prot_->serializedFieldSize("field163", apache::thrift::protocol::T_LIST, 163);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct1>>::serializedSize<false>(*prot_, this->field163);
  xfer += prot_->serializedFieldSize("field164", apache::thrift::protocol::T_I64, 164);
  xfer += prot_->serializedSizeI64(this->field164);
  xfer += prot_->serializedFieldSize("field165", apache::thrift::protocol::T_FLOAT, 165);
  xfer += prot_->serializedSizeFloat(this->field165);
  xfer += prot_->serializedFieldSize("field166", apache::thrift::protocol::T_STRUCT, 166);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field166);
  xfer += prot_->serializedFieldSize("field167", apache::thrift::protocol::T_BYTE, 167);
  xfer += prot_->serializedSizeByte(this->field167);
  xfer += prot_->serializedFieldSize("field168", apache::thrift::protocol::T_BOOL, 168);
  xfer += prot_->serializedSizeBool(this->field168);
  xfer += prot_->serializedFieldSize("field169", apache::thrift::protocol::T_MAP, 169);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, double>>::serializedSize<false>(*prot_, this->field169);
  xfer += prot_->serializedFieldSize("field170", apache::thrift::protocol::T_I32, 170);
  xfer += prot_->serializedSizeI32(this->field170);
  xfer += prot_->serializedFieldSize("field171", apache::thrift::protocol::T_MAP, 171);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::floating_point>, std::map<std::vector<double>, double>>::serializedSize<false>(*prot_, this->field171);
  xfer += prot_->serializedFieldSize("field172", apache::thrift::protocol::T_STRING, 172);
  xfer += prot_->serializedSizeString(this->field172);
  xfer += prot_->serializedFieldSize("field173", apache::thrift::protocol::T_LIST, 173);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<float>>>::serializedSize<false>(*prot_, this->field173);
  xfer += prot_->serializedFieldSize("field174", apache::thrift::protocol::T_STRING, 174);
  xfer += prot_->serializedSizeString(this->field174);
  xfer += prot_->serializedFieldSize("field175", apache::thrift::protocol::T_I32, 175);
  xfer += prot_->serializedSizeI32(this->field175);
  xfer += prot_->serializedFieldSize("field176", apache::thrift::protocol::T_I32, 176);
  xfer += prot_->serializedSizeI32(this->field176);
  xfer += prot_->serializedFieldSize("field177", apache::thrift::protocol::T_STRING, 177);
  xfer += prot_->serializedSizeString(this->field177);
  xfer += prot_->serializedFieldSize("field178", apache::thrift::protocol::T_MAP, 178);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int32_t, std::string>>::serializedSize<false>(*prot_, this->field178);
  xfer += prot_->serializedFieldSize("field179", apache::thrift::protocol::T_SET, 179);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::set<std::set<std::string>>>::serializedSize<false>(*prot_, this->field179);
  xfer += prot_->serializedFieldSize("field180", apache::thrift::protocol::T_BYTE, 180);
  xfer += prot_->serializedSizeByte(this->field180);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct3::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct3");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<bool, float>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->serializedSizeDouble(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<bool, double>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<int8_t>, int64_t>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_STRING, 6);
  xfer += prot_->serializedSizeZCBinary(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_I64, 8);
  xfer += prot_->serializedSizeI64(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_SET, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::set<std::vector<std::string>>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int64_t>>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_SET, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::floating_point>>, std::set<std::map<std::string, double>>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_STRING, 13);
  xfer += prot_->serializedSizeString(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_STRUCT, 14);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_LIST, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>>>, std::vector<std::set<std::map<int8_t, std::string>>>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_MAP, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::string>, std::map< ::cpp2::Struct0, std::string>>::serializedSize<false>(*prot_, this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_LIST, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct1>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_STRING, 18);
  xfer += prot_->serializedSizeString(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_MAP, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, bool>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_LIST, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_I64, 21);
  xfer += prot_->serializedSizeI64(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_STRUCT, 22);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_BYTE, 23);
  xfer += prot_->serializedSizeByte(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_SET, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_FLOAT, 25);
  xfer += prot_->serializedSizeFloat(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_I32, 26);
  xfer += prot_->serializedSizeI32(this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_DOUBLE, 27);
  xfer += prot_->serializedSizeDouble(this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_SET, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct0>>::serializedSize<false>(*prot_, this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_STRUCT, 29);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_BYTE, 30);
  xfer += prot_->serializedSizeByte(this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_SET, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<bool>>>::serializedSize<false>(*prot_, this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_LIST, 32);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int16_t>>>::serializedSize<false>(*prot_, this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_I32, 33);
  xfer += prot_->serializedSizeI32(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_STRUCT, 34);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_I16, 35);
  xfer += prot_->serializedSizeI16(this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_BOOL, 36);
  xfer += prot_->serializedSizeBool(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_SET, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_STRUCT, 38);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_BYTE, 39);
  xfer += prot_->serializedSizeByte(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_LIST, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_I32, 41);
  xfer += prot_->serializedSizeI32(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_SET, 42);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_STRUCT, 43);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_STRUCT, 44);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_SET, 45);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_FLOAT, 46);
  xfer += prot_->serializedSizeFloat(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_I64, 47);
  xfer += prot_->serializedSizeI64(this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_LIST, 48);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_MAP, 49);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<int16_t, std::set<int32_t>>>::serializedSize<false>(*prot_, this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_BOOL, 50);
  xfer += prot_->serializedSizeBool(this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_I64, 51);
  xfer += prot_->serializedSizeI64(this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_I32, 52);
  xfer += prot_->serializedSizeI32(this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_LIST, 53);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_STRUCT, 54);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_BOOL, 55);
  xfer += prot_->serializedSizeBool(this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_STRUCT, 56);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_I32, 57);
  xfer += prot_->serializedSizeI32(this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_BOOL, 58);
  xfer += prot_->serializedSizeBool(this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_STRING, 59);
  xfer += prot_->serializedSizeString(this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_I16, 60);
  xfer += prot_->serializedSizeI16(this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_STRUCT, 61);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_SET, 62);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_SET, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int16_t, int64_t>>>::serializedSize<false>(*prot_, this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_I32, 64);
  xfer += prot_->serializedSizeI32(this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_STRUCT, 65);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_LIST, 66);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_BYTE, 67);
  xfer += prot_->serializedSizeByte(this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_BOOL, 68);
  xfer += prot_->serializedSizeBool(this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_FLOAT, 69);
  xfer += prot_->serializedSizeFloat(this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_FLOAT, 70);
  xfer += prot_->serializedSizeFloat(this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_BOOL, 71);
  xfer += prot_->serializedSizeBool(this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_MAP, 72);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>, std::map<std::map<std::string, int8_t>, std::string>>::serializedSize<false>(*prot_, this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_I32, 73);
  xfer += prot_->serializedSizeI32(this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_DOUBLE, 74);
  xfer += prot_->serializedSizeDouble(this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_I64, 75);
  xfer += prot_->serializedSizeI64(this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_I64, 76);
  xfer += prot_->serializedSizeI64(this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_LIST, 77);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_LIST, 78);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_STRING, 79);
  xfer += prot_->serializedSizeString(this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_BOOL, 80);
  xfer += prot_->serializedSizeBool(this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_I64, 81);
  xfer += prot_->serializedSizeI64(this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_MAP, 82);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int64_t>>::serializedSize<false>(*prot_, this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_MAP, 83);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<int64_t, std::vector<double>>>::serializedSize<false>(*prot_, this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_BYTE, 84);
  xfer += prot_->serializedSizeByte(this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_LIST, 85);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_DOUBLE, 86);
  xfer += prot_->serializedSizeDouble(this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_FLOAT, 87);
  xfer += prot_->serializedSizeFloat(this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_FLOAT, 88);
  xfer += prot_->serializedSizeFloat(this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_STRING, 89);
  xfer += prot_->serializedSizeString(this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_I32, 90);
  xfer += prot_->serializedSizeI32(this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_STRUCT, 91);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_SET, 92);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct2>>::serializedSize<false>(*prot_, this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_FLOAT, 93);
  xfer += prot_->serializedSizeFloat(this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_I16, 94);
  xfer += prot_->serializedSizeI16(this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_LIST, 95);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_MAP, 96);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::map<int64_t, std::map<double, int64_t>>>::serializedSize<false>(*prot_, this->field96);
  xfer += prot_->serializedFieldSize("field97", apache::thrift::protocol::T_LIST, 97);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field97);
  xfer += prot_->serializedFieldSize("field98", apache::thrift::protocol::T_MAP, 98);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::serializedSize<false>(*prot_, this->field98);
  xfer += prot_->serializedFieldSize("field99", apache::thrift::protocol::T_I32, 99);
  xfer += prot_->serializedSizeI32(this->field99);
  xfer += prot_->serializedFieldSize("field100", apache::thrift::protocol::T_STRUCT, 100);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field100);
  xfer += prot_->serializedFieldSize("field101", apache::thrift::protocol::T_LIST, 101);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field101);
  xfer += prot_->serializedFieldSize("field102", apache::thrift::protocol::T_I16, 102);
  xfer += prot_->serializedSizeI16(this->field102);
  xfer += prot_->serializedFieldSize("field103", apache::thrift::protocol::T_I16, 103);
  xfer += prot_->serializedSizeI16(this->field103);
  xfer += prot_->serializedFieldSize("field104", apache::thrift::protocol::T_LIST, 104);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field104);
  xfer += prot_->serializedFieldSize("field105", apache::thrift::protocol::T_STRING, 105);
  xfer += prot_->serializedSizeZCBinary(this->field105);
  xfer += prot_->serializedFieldSize("field106", apache::thrift::protocol::T_I16, 106);
  xfer += prot_->serializedSizeI16(this->field106);
  xfer += prot_->serializedFieldSize("field107", apache::thrift::protocol::T_FLOAT, 107);
  xfer += prot_->serializedSizeFloat(this->field107);
  xfer += prot_->serializedFieldSize("field108", apache::thrift::protocol::T_DOUBLE, 108);
  xfer += prot_->serializedSizeDouble(this->field108);
  xfer += prot_->serializedFieldSize("field109", apache::thrift::protocol::T_FLOAT, 109);
  xfer += prot_->serializedSizeFloat(this->field109);
  xfer += prot_->serializedFieldSize("field110", apache::thrift::protocol::T_DOUBLE, 110);
  xfer += prot_->serializedSizeDouble(this->field110);
  xfer += prot_->serializedFieldSize("field111", apache::thrift::protocol::T_MAP, 111);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int8_t,  ::cpp2::Struct0>>::serializedSize<false>(*prot_, this->field111);
  xfer += prot_->serializedFieldSize("field112", apache::thrift::protocol::T_FLOAT, 112);
  xfer += prot_->serializedSizeFloat(this->field112);
  xfer += prot_->serializedFieldSize("field113", apache::thrift::protocol::T_DOUBLE, 113);
  xfer += prot_->serializedSizeDouble(this->field113);
  xfer += prot_->serializedFieldSize("field114", apache::thrift::protocol::T_FLOAT, 114);
  xfer += prot_->serializedSizeFloat(this->field114);
  xfer += prot_->serializedFieldSize("field115", apache::thrift::protocol::T_BOOL, 115);
  xfer += prot_->serializedSizeBool(this->field115);
  xfer += prot_->serializedFieldSize("field116", apache::thrift::protocol::T_MAP, 116);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int16_t>>::serializedSize<false>(*prot_, this->field116);
  xfer += prot_->serializedFieldSize("field117", apache::thrift::protocol::T_STRING, 117);
  xfer += prot_->serializedSizeString(this->field117);
  xfer += prot_->serializedFieldSize("field118", apache::thrift::protocol::T_STRUCT, 118);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field118);
  xfer += prot_->serializedFieldSize("field119", apache::thrift::protocol::T_MAP, 119);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::serializedSize<false>(*prot_, this->field119);
  xfer += prot_->serializedFieldSize("field120", apache::thrift::protocol::T_I16, 120);
  xfer += prot_->serializedSizeI16(this->field120);
  xfer += prot_->serializedFieldSize("field121", apache::thrift::protocol::T_FLOAT, 121);
  xfer += prot_->serializedSizeFloat(this->field121);
  xfer += prot_->serializedFieldSize("field122", apache::thrift::protocol::T_BOOL, 122);
  xfer += prot_->serializedSizeBool(this->field122);
  xfer += prot_->serializedFieldSize("field123", apache::thrift::protocol::T_BYTE, 123);
  xfer += prot_->serializedSizeByte(this->field123);
  xfer += prot_->serializedFieldSize("field124", apache::thrift::protocol::T_FLOAT, 124);
  xfer += prot_->serializedSizeFloat(this->field124);
  xfer += prot_->serializedFieldSize("field125", apache::thrift::protocol::T_SET, 125);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field125);
  xfer += prot_->serializedFieldSize("field126", apache::thrift::protocol::T_I32, 126);
  xfer += prot_->serializedSizeI32(this->field126);
  xfer += prot_->serializedFieldSize("field127", apache::thrift::protocol::T_I16, 127);
  xfer += prot_->serializedSizeI16(this->field127);
  xfer += prot_->serializedFieldSize("field128", apache::thrift::protocol::T_BOOL, 128);
  xfer += prot_->serializedSizeBool(this->field128);
  xfer += prot_->serializedFieldSize("field129", apache::thrift::protocol::T_STRUCT, 129);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field129);
  xfer += prot_->serializedFieldSize("field130", apache::thrift::protocol::T_STRUCT, 130);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field130);
  xfer += prot_->serializedFieldSize("field131", apache::thrift::protocol::T_STRING, 131);
  xfer += prot_->serializedSizeZCBinary(this->field131);
  xfer += prot_->serializedFieldSize("field132", apache::thrift::protocol::T_I16, 132);
  xfer += prot_->serializedSizeI16(this->field132);
  xfer += prot_->serializedFieldSize("field133", apache::thrift::protocol::T_LIST, 133);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field133);
  xfer += prot_->serializedFieldSize("field134", apache::thrift::protocol::T_I16, 134);
  xfer += prot_->serializedSizeI16(this->field134);
  xfer += prot_->serializedFieldSize("field135", apache::thrift::protocol::T_LIST, 135);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field135);
  xfer += prot_->serializedFieldSize("field136", apache::thrift::protocol::T_SET, 136);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field136);
  xfer += prot_->serializedFieldSize("field137", apache::thrift::protocol::T_SET, 137);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field137);
  xfer += prot_->serializedFieldSize("field138", apache::thrift::protocol::T_MAP, 138);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>, std::map<float, std::string>>::serializedSize<false>(*prot_, this->field138);
  xfer += prot_->serializedFieldSize("field139", apache::thrift::protocol::T_MAP, 139);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<bool,  ::cpp2::Struct1>>::serializedSize<false>(*prot_, this->field139);
  xfer += prot_->serializedFieldSize("field140", apache::thrift::protocol::T_SET, 140);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field140);
  xfer += prot_->serializedFieldSize("field141", apache::thrift::protocol::T_SET, 141);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field141);
  xfer += prot_->serializedFieldSize("field142", apache::thrift::protocol::T_SET, 142);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field142);
  xfer += prot_->serializedFieldSize("field143", apache::thrift::protocol::T_BOOL, 143);
  xfer += prot_->serializedSizeBool(this->field143);
  xfer += prot_->serializedFieldSize("field144", apache::thrift::protocol::T_STRUCT, 144);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field144);
  xfer += prot_->serializedFieldSize("field145", apache::thrift::protocol::T_FLOAT, 145);
  xfer += prot_->serializedSizeFloat(this->field145);
  xfer += prot_->serializedFieldSize("field146", apache::thrift::protocol::T_I32, 146);
  xfer += prot_->serializedSizeI32(this->field146);
  xfer += prot_->serializedFieldSize("field147", apache::thrift::protocol::T_STRING, 147);
  xfer += prot_->serializedSizeString(this->field147);
  xfer += prot_->serializedFieldSize("field148", apache::thrift::protocol::T_SET, 148);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int8_t>>>::serializedSize<false>(*prot_, this->field148);
  xfer += prot_->serializedFieldSize("field149", apache::thrift::protocol::T_LIST, 149);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field149);
  xfer += prot_->serializedFieldSize("field150", apache::thrift::protocol::T_MAP, 150);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::floating_point>, std::map<std::string, double>>::serializedSize<false>(*prot_, this->field150);
  xfer += prot_->serializedFieldSize("field151", apache::thrift::protocol::T_MAP, 151);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::set<int32_t>, int16_t>>::serializedSize<false>(*prot_, this->field151);
  xfer += prot_->serializedFieldSize("field152", apache::thrift::protocol::T_LIST, 152);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field152);
  xfer += prot_->serializedFieldSize("field153", apache::thrift::protocol::T_FLOAT, 153);
  xfer += prot_->serializedSizeFloat(this->field153);
  xfer += prot_->serializedFieldSize("field154", apache::thrift::protocol::T_MAP, 154);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int64_t>>::serializedSize<false>(*prot_, this->field154);
  xfer += prot_->serializedFieldSize("field155", apache::thrift::protocol::T_LIST, 155);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct1>>::serializedSize<false>(*prot_, this->field155);
  xfer += prot_->serializedFieldSize("field156", apache::thrift::protocol::T_FLOAT, 156);
  xfer += prot_->serializedSizeFloat(this->field156);
  xfer += prot_->serializedFieldSize("field157", apache::thrift::protocol::T_MAP, 157);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<int16_t, std::set<bool>>>::serializedSize<false>(*prot_, this->field157);
  xfer += prot_->serializedFieldSize("field158", apache::thrift::protocol::T_STRUCT, 158);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field158);
  xfer += prot_->serializedFieldSize("field159", apache::thrift::protocol::T_I32, 159);
  xfer += prot_->serializedSizeI32(this->field159);
  xfer += prot_->serializedFieldSize("field160", apache::thrift::protocol::T_I16, 160);
  xfer += prot_->serializedSizeI16(this->field160);
  xfer += prot_->serializedFieldSize("field161", apache::thrift::protocol::T_STRUCT, 161);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field161);
  xfer += prot_->serializedFieldSize("field162", apache::thrift::protocol::T_STRING, 162);
  xfer += prot_->serializedSizeString(this->field162);
  xfer += prot_->serializedFieldSize("field163", apache::thrift::protocol::T_LIST, 163);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct1>>::serializedSize<false>(*prot_, this->field163);
  xfer += prot_->serializedFieldSize("field164", apache::thrift::protocol::T_I64, 164);
  xfer += prot_->serializedSizeI64(this->field164);
  xfer += prot_->serializedFieldSize("field165", apache::thrift::protocol::T_FLOAT, 165);
  xfer += prot_->serializedSizeFloat(this->field165);
  xfer += prot_->serializedFieldSize("field166", apache::thrift::protocol::T_STRUCT, 166);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field166);
  xfer += prot_->serializedFieldSize("field167", apache::thrift::protocol::T_BYTE, 167);
  xfer += prot_->serializedSizeByte(this->field167);
  xfer += prot_->serializedFieldSize("field168", apache::thrift::protocol::T_BOOL, 168);
  xfer += prot_->serializedSizeBool(this->field168);
  xfer += prot_->serializedFieldSize("field169", apache::thrift::protocol::T_MAP, 169);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, double>>::serializedSize<false>(*prot_, this->field169);
  xfer += prot_->serializedFieldSize("field170", apache::thrift::protocol::T_I32, 170);
  xfer += prot_->serializedSizeI32(this->field170);
  xfer += prot_->serializedFieldSize("field171", apache::thrift::protocol::T_MAP, 171);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::floating_point>, std::map<std::vector<double>, double>>::serializedSize<false>(*prot_, this->field171);
  xfer += prot_->serializedFieldSize("field172", apache::thrift::protocol::T_STRING, 172);
  xfer += prot_->serializedSizeString(this->field172);
  xfer += prot_->serializedFieldSize("field173", apache::thrift::protocol::T_LIST, 173);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<float>>>::serializedSize<false>(*prot_, this->field173);
  xfer += prot_->serializedFieldSize("field174", apache::thrift::protocol::T_STRING, 174);
  xfer += prot_->serializedSizeString(this->field174);
  xfer += prot_->serializedFieldSize("field175", apache::thrift::protocol::T_I32, 175);
  xfer += prot_->serializedSizeI32(this->field175);
  xfer += prot_->serializedFieldSize("field176", apache::thrift::protocol::T_I32, 176);
  xfer += prot_->serializedSizeI32(this->field176);
  xfer += prot_->serializedFieldSize("field177", apache::thrift::protocol::T_STRING, 177);
  xfer += prot_->serializedSizeString(this->field177);
  xfer += prot_->serializedFieldSize("field178", apache::thrift::protocol::T_MAP, 178);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int32_t, std::string>>::serializedSize<false>(*prot_, this->field178);
  xfer += prot_->serializedFieldSize("field179", apache::thrift::protocol::T_SET, 179);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::set<std::set<std::string>>>::serializedSize<false>(*prot_, this->field179);
  xfer += prot_->serializedFieldSize("field180", apache::thrift::protocol::T_BYTE, 180);
  xfer += prot_->serializedSizeByte(this->field180);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct3::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct3");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<bool, float>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->writeDouble(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<bool, double>>::write(*prot_, this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<int8_t>, int64_t>>::write(*prot_, this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_STRING, 6);
  xfer += prot_->writeBinary(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_I64, 8);
  xfer += prot_->writeI64(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_SET, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::set<std::vector<std::string>>>::write(*prot_, this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int64_t>>>::write(*prot_, this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_SET, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::floating_point>>, std::set<std::map<std::string, double>>>::write(*prot_, this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_STRING, 13);
  xfer += prot_->writeString(this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_STRUCT, 14);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_LIST, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>>>, std::vector<std::set<std::map<int8_t, std::string>>>>::write(*prot_, this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_MAP, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::string>, std::map< ::cpp2::Struct0, std::string>>::write(*prot_, this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_LIST, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct1>>::write(*prot_, this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_STRING, 18);
  xfer += prot_->writeString(this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_MAP, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, bool>>::write(*prot_, this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_LIST, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_I64, 21);
  xfer += prot_->writeI64(this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_STRUCT, 22);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_BYTE, 23);
  xfer += prot_->writeByte(this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_SET, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_FLOAT, 25);
  xfer += prot_->writeFloat(this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_I32, 26);
  xfer += prot_->writeI32(this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_DOUBLE, 27);
  xfer += prot_->writeDouble(this->field27);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_SET, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct0>>::write(*prot_, this->field28);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field29", apache::thrift::protocol::T_STRUCT, 29);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field29);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field30", apache::thrift::protocol::T_BYTE, 30);
  xfer += prot_->writeByte(this->field30);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field31", apache::thrift::protocol::T_SET, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<bool>>>::write(*prot_, this->field31);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field32", apache::thrift::protocol::T_LIST, 32);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int16_t>>>::write(*prot_, this->field32);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field33", apache::thrift::protocol::T_I32, 33);
  xfer += prot_->writeI32(this->field33);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field34", apache::thrift::protocol::T_STRUCT, 34);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field34);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field35", apache::thrift::protocol::T_I16, 35);
  xfer += prot_->writeI16(this->field35);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field36", apache::thrift::protocol::T_BOOL, 36);
  xfer += prot_->writeBool(this->field36);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field37", apache::thrift::protocol::T_SET, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field37);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field38", apache::thrift::protocol::T_STRUCT, 38);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field38);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field39", apache::thrift::protocol::T_BYTE, 39);
  xfer += prot_->writeByte(this->field39);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field40", apache::thrift::protocol::T_LIST, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field40);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field41", apache::thrift::protocol::T_I32, 41);
  xfer += prot_->writeI32(this->field41);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field42", apache::thrift::protocol::T_SET, 42);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field42);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field43", apache::thrift::protocol::T_STRUCT, 43);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field43);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field44", apache::thrift::protocol::T_STRUCT, 44);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field44);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field45", apache::thrift::protocol::T_SET, 45);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field45);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field46", apache::thrift::protocol::T_FLOAT, 46);
  xfer += prot_->writeFloat(this->field46);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field47", apache::thrift::protocol::T_I64, 47);
  xfer += prot_->writeI64(this->field47);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field48", apache::thrift::protocol::T_LIST, 48);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field48);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field49", apache::thrift::protocol::T_MAP, 49);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<int16_t, std::set<int32_t>>>::write(*prot_, this->field49);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field50", apache::thrift::protocol::T_BOOL, 50);
  xfer += prot_->writeBool(this->field50);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field51", apache::thrift::protocol::T_I64, 51);
  xfer += prot_->writeI64(this->field51);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field52", apache::thrift::protocol::T_I32, 52);
  xfer += prot_->writeI32(this->field52);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field53", apache::thrift::protocol::T_LIST, 53);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field53);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field54", apache::thrift::protocol::T_STRUCT, 54);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field54);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field55", apache::thrift::protocol::T_BOOL, 55);
  xfer += prot_->writeBool(this->field55);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field56", apache::thrift::protocol::T_STRUCT, 56);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field56);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field57", apache::thrift::protocol::T_I32, 57);
  xfer += prot_->writeI32(this->field57);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field58", apache::thrift::protocol::T_BOOL, 58);
  xfer += prot_->writeBool(this->field58);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field59", apache::thrift::protocol::T_STRING, 59);
  xfer += prot_->writeString(this->field59);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field60", apache::thrift::protocol::T_I16, 60);
  xfer += prot_->writeI16(this->field60);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field61", apache::thrift::protocol::T_STRUCT, 61);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field61);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field62", apache::thrift::protocol::T_SET, 62);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field62);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field63", apache::thrift::protocol::T_SET, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int16_t, int64_t>>>::write(*prot_, this->field63);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field64", apache::thrift::protocol::T_I32, 64);
  xfer += prot_->writeI32(this->field64);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field65", apache::thrift::protocol::T_STRUCT, 65);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field65);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field66", apache::thrift::protocol::T_LIST, 66);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field66);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field67", apache::thrift::protocol::T_BYTE, 67);
  xfer += prot_->writeByte(this->field67);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field68", apache::thrift::protocol::T_BOOL, 68);
  xfer += prot_->writeBool(this->field68);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field69", apache::thrift::protocol::T_FLOAT, 69);
  xfer += prot_->writeFloat(this->field69);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field70", apache::thrift::protocol::T_FLOAT, 70);
  xfer += prot_->writeFloat(this->field70);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field71", apache::thrift::protocol::T_BOOL, 71);
  xfer += prot_->writeBool(this->field71);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field72", apache::thrift::protocol::T_MAP, 72);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>, std::map<std::map<std::string, int8_t>, std::string>>::write(*prot_, this->field72);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field73", apache::thrift::protocol::T_I32, 73);
  xfer += prot_->writeI32(this->field73);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field74", apache::thrift::protocol::T_DOUBLE, 74);
  xfer += prot_->writeDouble(this->field74);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field75", apache::thrift::protocol::T_I64, 75);
  xfer += prot_->writeI64(this->field75);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field76", apache::thrift::protocol::T_I64, 76);
  xfer += prot_->writeI64(this->field76);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field77", apache::thrift::protocol::T_LIST, 77);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field77);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field78", apache::thrift::protocol::T_LIST, 78);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field78);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field79", apache::thrift::protocol::T_STRING, 79);
  xfer += prot_->writeString(this->field79);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field80", apache::thrift::protocol::T_BOOL, 80);
  xfer += prot_->writeBool(this->field80);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field81", apache::thrift::protocol::T_I64, 81);
  xfer += prot_->writeI64(this->field81);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field82", apache::thrift::protocol::T_MAP, 82);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int64_t>>::write(*prot_, this->field82);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field83", apache::thrift::protocol::T_MAP, 83);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<int64_t, std::vector<double>>>::write(*prot_, this->field83);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field84", apache::thrift::protocol::T_BYTE, 84);
  xfer += prot_->writeByte(this->field84);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field85", apache::thrift::protocol::T_LIST, 85);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field85);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field86", apache::thrift::protocol::T_DOUBLE, 86);
  xfer += prot_->writeDouble(this->field86);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field87", apache::thrift::protocol::T_FLOAT, 87);
  xfer += prot_->writeFloat(this->field87);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field88", apache::thrift::protocol::T_FLOAT, 88);
  xfer += prot_->writeFloat(this->field88);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field89", apache::thrift::protocol::T_STRING, 89);
  xfer += prot_->writeString(this->field89);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field90", apache::thrift::protocol::T_I32, 90);
  xfer += prot_->writeI32(this->field90);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field91", apache::thrift::protocol::T_STRUCT, 91);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field91);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field92", apache::thrift::protocol::T_SET, 92);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct2>>::write(*prot_, this->field92);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field93", apache::thrift::protocol::T_FLOAT, 93);
  xfer += prot_->writeFloat(this->field93);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field94", apache::thrift::protocol::T_I16, 94);
  xfer += prot_->writeI16(this->field94);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field95", apache::thrift::protocol::T_LIST, 95);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field95);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field96", apache::thrift::protocol::T_MAP, 96);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::map<int64_t, std::map<double, int64_t>>>::write(*prot_, this->field96);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field97", apache::thrift::protocol::T_LIST, 97);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field97);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field98", apache::thrift::protocol::T_MAP, 98);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::write(*prot_, this->field98);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field99", apache::thrift::protocol::T_I32, 99);
  xfer += prot_->writeI32(this->field99);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field100", apache::thrift::protocol::T_STRUCT, 100);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field100);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field101", apache::thrift::protocol::T_LIST, 101);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field101);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field102", apache::thrift::protocol::T_I16, 102);
  xfer += prot_->writeI16(this->field102);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field103", apache::thrift::protocol::T_I16, 103);
  xfer += prot_->writeI16(this->field103);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field104", apache::thrift::protocol::T_LIST, 104);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field104);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field105", apache::thrift::protocol::T_STRING, 105);
  xfer += prot_->writeBinary(this->field105);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field106", apache::thrift::protocol::T_I16, 106);
  xfer += prot_->writeI16(this->field106);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field107", apache::thrift::protocol::T_FLOAT, 107);
  xfer += prot_->writeFloat(this->field107);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field108", apache::thrift::protocol::T_DOUBLE, 108);
  xfer += prot_->writeDouble(this->field108);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field109", apache::thrift::protocol::T_FLOAT, 109);
  xfer += prot_->writeFloat(this->field109);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field110", apache::thrift::protocol::T_DOUBLE, 110);
  xfer += prot_->writeDouble(this->field110);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field111", apache::thrift::protocol::T_MAP, 111);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int8_t,  ::cpp2::Struct0>>::write(*prot_, this->field111);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field112", apache::thrift::protocol::T_FLOAT, 112);
  xfer += prot_->writeFloat(this->field112);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field113", apache::thrift::protocol::T_DOUBLE, 113);
  xfer += prot_->writeDouble(this->field113);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field114", apache::thrift::protocol::T_FLOAT, 114);
  xfer += prot_->writeFloat(this->field114);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field115", apache::thrift::protocol::T_BOOL, 115);
  xfer += prot_->writeBool(this->field115);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field116", apache::thrift::protocol::T_MAP, 116);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int16_t>>::write(*prot_, this->field116);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field117", apache::thrift::protocol::T_STRING, 117);
  xfer += prot_->writeString(this->field117);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field118", apache::thrift::protocol::T_STRUCT, 118);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field118);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field119", apache::thrift::protocol::T_MAP, 119);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::write(*prot_, this->field119);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field120", apache::thrift::protocol::T_I16, 120);
  xfer += prot_->writeI16(this->field120);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field121", apache::thrift::protocol::T_FLOAT, 121);
  xfer += prot_->writeFloat(this->field121);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field122", apache::thrift::protocol::T_BOOL, 122);
  xfer += prot_->writeBool(this->field122);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field123", apache::thrift::protocol::T_BYTE, 123);
  xfer += prot_->writeByte(this->field123);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field124", apache::thrift::protocol::T_FLOAT, 124);
  xfer += prot_->writeFloat(this->field124);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field125", apache::thrift::protocol::T_SET, 125);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field125);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field126", apache::thrift::protocol::T_I32, 126);
  xfer += prot_->writeI32(this->field126);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field127", apache::thrift::protocol::T_I16, 127);
  xfer += prot_->writeI16(this->field127);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field128", apache::thrift::protocol::T_BOOL, 128);
  xfer += prot_->writeBool(this->field128);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field129", apache::thrift::protocol::T_STRUCT, 129);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field129);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field130", apache::thrift::protocol::T_STRUCT, 130);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field130);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field131", apache::thrift::protocol::T_STRING, 131);
  xfer += prot_->writeBinary(this->field131);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field132", apache::thrift::protocol::T_I16, 132);
  xfer += prot_->writeI16(this->field132);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field133", apache::thrift::protocol::T_LIST, 133);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field133);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field134", apache::thrift::protocol::T_I16, 134);
  xfer += prot_->writeI16(this->field134);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field135", apache::thrift::protocol::T_LIST, 135);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field135);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field136", apache::thrift::protocol::T_SET, 136);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field136);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field137", apache::thrift::protocol::T_SET, 137);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field137);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field138", apache::thrift::protocol::T_MAP, 138);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>, std::map<float, std::string>>::write(*prot_, this->field138);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field139", apache::thrift::protocol::T_MAP, 139);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<bool,  ::cpp2::Struct1>>::write(*prot_, this->field139);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field140", apache::thrift::protocol::T_SET, 140);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field140);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field141", apache::thrift::protocol::T_SET, 141);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field141);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field142", apache::thrift::protocol::T_SET, 142);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field142);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field143", apache::thrift::protocol::T_BOOL, 143);
  xfer += prot_->writeBool(this->field143);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field144", apache::thrift::protocol::T_STRUCT, 144);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field144);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field145", apache::thrift::protocol::T_FLOAT, 145);
  xfer += prot_->writeFloat(this->field145);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field146", apache::thrift::protocol::T_I32, 146);
  xfer += prot_->writeI32(this->field146);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field147", apache::thrift::protocol::T_STRING, 147);
  xfer += prot_->writeString(this->field147);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field148", apache::thrift::protocol::T_SET, 148);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int8_t>>>::write(*prot_, this->field148);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field149", apache::thrift::protocol::T_LIST, 149);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field149);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field150", apache::thrift::protocol::T_MAP, 150);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::floating_point>, std::map<std::string, double>>::write(*prot_, this->field150);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field151", apache::thrift::protocol::T_MAP, 151);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::set<int32_t>, int16_t>>::write(*prot_, this->field151);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field152", apache::thrift::protocol::T_LIST, 152);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field152);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field153", apache::thrift::protocol::T_FLOAT, 153);
  xfer += prot_->writeFloat(this->field153);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field154", apache::thrift::protocol::T_MAP, 154);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int64_t>>::write(*prot_, this->field154);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field155", apache::thrift::protocol::T_LIST, 155);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct1>>::write(*prot_, this->field155);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field156", apache::thrift::protocol::T_FLOAT, 156);
  xfer += prot_->writeFloat(this->field156);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field157", apache::thrift::protocol::T_MAP, 157);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<int16_t, std::set<bool>>>::write(*prot_, this->field157);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field158", apache::thrift::protocol::T_STRUCT, 158);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field158);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field159", apache::thrift::protocol::T_I32, 159);
  xfer += prot_->writeI32(this->field159);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field160", apache::thrift::protocol::T_I16, 160);
  xfer += prot_->writeI16(this->field160);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field161", apache::thrift::protocol::T_STRUCT, 161);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field161);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field162", apache::thrift::protocol::T_STRING, 162);
  xfer += prot_->writeString(this->field162);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field163", apache::thrift::protocol::T_LIST, 163);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct1>>::write(*prot_, this->field163);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field164", apache::thrift::protocol::T_I64, 164);
  xfer += prot_->writeI64(this->field164);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field165", apache::thrift::protocol::T_FLOAT, 165);
  xfer += prot_->writeFloat(this->field165);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field166", apache::thrift::protocol::T_STRUCT, 166);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field166);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field167", apache::thrift::protocol::T_BYTE, 167);
  xfer += prot_->writeByte(this->field167);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field168", apache::thrift::protocol::T_BOOL, 168);
  xfer += prot_->writeBool(this->field168);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field169", apache::thrift::protocol::T_MAP, 169);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, double>>::write(*prot_, this->field169);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field170", apache::thrift::protocol::T_I32, 170);
  xfer += prot_->writeI32(this->field170);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field171", apache::thrift::protocol::T_MAP, 171);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::floating_point>, std::map<std::vector<double>, double>>::write(*prot_, this->field171);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field172", apache::thrift::protocol::T_STRING, 172);
  xfer += prot_->writeString(this->field172);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field173", apache::thrift::protocol::T_LIST, 173);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<float>>>::write(*prot_, this->field173);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field174", apache::thrift::protocol::T_STRING, 174);
  xfer += prot_->writeString(this->field174);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field175", apache::thrift::protocol::T_I32, 175);
  xfer += prot_->writeI32(this->field175);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field176", apache::thrift::protocol::T_I32, 176);
  xfer += prot_->writeI32(this->field176);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field177", apache::thrift::protocol::T_STRING, 177);
  xfer += prot_->writeString(this->field177);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field178", apache::thrift::protocol::T_MAP, 178);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int32_t, std::string>>::write(*prot_, this->field178);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field179", apache::thrift::protocol::T_SET, 179);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::set<std::set<std::string>>>::write(*prot_, this->field179);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field180", apache::thrift::protocol::T_BYTE, 180);
  xfer += prot_->writeByte(this->field180);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace cpp2 {

template <class Protocol_>
uint32_t Struct4::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field1 = std::map<double, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int8_t>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field3 = std::map<double,  ::cpp2::Struct1>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::structure>, std::map<double,  ::cpp2::Struct1>>::read(*iprot, this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field4 = std::map<int8_t,  ::cpp2::Struct2>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int8_t,  ::cpp2::Struct2>>::read(*iprot, this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field7 = std::map<bool, std::vector<double>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<bool, std::vector<double>>>::read(*iprot, this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field10 = std::map<float, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int8_t>>::read(*iprot, this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field12 = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field19 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field20 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field21 = std::map<int8_t, double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int8_t, double>>::read(*iprot, this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field22 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field24 = std::map<int8_t, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int8_t>>::read(*iprot, this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field27);
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field28 = std::map<int16_t, std::vector<int16_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<int16_t, std::vector<int16_t>>>::read(*iprot, this->field28);
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field29);
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 30:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field30 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field30);
          this->__isset.field30 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 31:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field31 = std::map<double, double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<double, double>>::read(*iprot, this->field31);
          this->__isset.field31 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 32:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field32);
          this->__isset.field32 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 33:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field33);
          this->__isset.field33 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 34:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field34);
          this->__isset.field34 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 35:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field35 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field35);
          this->__isset.field35 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 36:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field36);
          this->__isset.field36 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 37:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field37 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field37);
          this->__isset.field37 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 38:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field38);
          this->__isset.field38 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 39:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field39);
          this->__isset.field39 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 40:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field40 = std::map<std::set<float>, std::set<double>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<std::set<float>, std::set<double>>>::read(*iprot, this->field40);
          this->__isset.field40 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 41:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field41 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field41);
          this->__isset.field41 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 42:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field42);
          this->__isset.field42 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 43:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field43);
          this->__isset.field43 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 44:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field44 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field44);
          this->__isset.field44 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 45:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field45);
          this->__isset.field45 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 46:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field46 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field46);
          this->__isset.field46 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 47:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field47 = std::map<int16_t,  ::cpp2::Struct2>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int16_t,  ::cpp2::Struct2>>::read(*iprot, this->field47);
          this->__isset.field47 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 48:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field48 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field48);
          this->__isset.field48 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 49:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field49 = std::map<std::map<int32_t, int32_t>, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::map<int32_t, int32_t>, int64_t>>::read(*iprot, this->field49);
          this->__isset.field49 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 50:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field50);
          this->__isset.field50 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 51:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field51);
          this->__isset.field51 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 52:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field52 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field52);
          this->__isset.field52 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 53:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field53);
          this->__isset.field53 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 54:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field54 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field54);
          this->__isset.field54 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 55:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field55);
          this->__isset.field55 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 56:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field56);
          this->__isset.field56 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 57:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field57 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field57);
          this->__isset.field57 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 58:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field58);
          this->__isset.field58 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 59:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field59);
          this->__isset.field59 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 60:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field60);
          this->__isset.field60 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 61:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field61);
          this->__isset.field61 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 62:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field62);
          this->__isset.field62 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 63:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field63);
          this->__isset.field63 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 64:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field64 = std::set< ::cpp2::Struct0>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct0>>::read(*iprot, this->field64);
          this->__isset.field64 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 65:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field65);
          this->__isset.field65 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 66:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field66 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field66);
          this->__isset.field66 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 67:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field67);
          this->__isset.field67 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 68:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field68 = std::map<std::map<int32_t, float>, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::floating_point>, std::map<std::map<int32_t, float>, float>>::read(*iprot, this->field68);
          this->__isset.field68 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 69:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field69 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field69);
          this->__isset.field69 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 70:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field70);
          this->__isset.field70 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 71:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field71);
          this->__isset.field71 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 72:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field72 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field72);
          this->__isset.field72 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 73:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field73 = std::map<double,  ::cpp2::Struct1>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::structure>, std::map<double,  ::cpp2::Struct1>>::read(*iprot, this->field73);
          this->__isset.field73 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 74:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field74);
          this->__isset.field74 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 75:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field75 = std::set<std::map<double, std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>>, std::set<std::map<double, std::string>>>::read(*iprot, this->field75);
          this->__isset.field75 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 76:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field76 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field76);
          this->__isset.field76 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 77:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field77 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field77);
          this->__isset.field77 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 78:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field78 = std::map<std::string, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int8_t>>::read(*iprot, this->field78);
          this->__isset.field78 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 79:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field79 = std::map<std::set<float>, std::set<std::map<float, std::string>>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>>>, std::map<std::set<float>, std::set<std::map<float, std::string>>>>::read(*iprot, this->field79);
          this->__isset.field79 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 80:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field80 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field80);
          this->__isset.field80 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 81:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field81 = std::map<bool, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<bool, float>>::read(*iprot, this->field81);
          this->__isset.field81 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 82:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field82);
          this->__isset.field82 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 83:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field83);
          this->__isset.field83 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 84:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field84);
          this->__isset.field84 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 85:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field85);
          this->__isset.field85 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 86:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field86 = std::map<std::string, double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::floating_point>, std::map<std::string, double>>::read(*iprot, this->field86);
          this->__isset.field86 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 87:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field87);
          this->__isset.field87 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 88:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field88 = std::vector<std::set<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>, std::vector<std::set<std::string>>>::read(*iprot, this->field88);
          this->__isset.field88 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 89:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field89);
          this->__isset.field89 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 90:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field90 = std::vector<std::set<int16_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int16_t>>>::read(*iprot, this->field90);
          this->__isset.field90 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 91:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field91);
          this->__isset.field91 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 92:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field92);
          this->__isset.field92 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 93:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field93);
          this->__isset.field93 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 94:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field94 = std::map<int8_t, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int16_t>>::read(*iprot, this->field94);
          this->__isset.field94 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 95:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field95);
          this->__isset.field95 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 96:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field96);
          this->__isset.field96 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 97:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field97);
          this->__isset.field97 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 98:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field98);
          this->__isset.field98 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 99:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field99);
          this->__isset.field99 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 100:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field100 = std::map<int16_t, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int8_t>>::read(*iprot, this->field100);
          this->__isset.field100 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 101:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field101);
          this->__isset.field101 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct4::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct4");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int8_t>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_MAP, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::structure>, std::map<double,  ::cpp2::Struct1>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int8_t,  ::cpp2::Struct2>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRING, 5);
  xfer += prot_->serializedSizeBinary(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->serializedSizeI32(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<bool, std::vector<double>>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_BOOL, 8);
  xfer += prot_->serializedSizeBool(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRING, 9);
  xfer += prot_->serializedSizeBinary(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int8_t>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_STRUCT, 11);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_STRUCT, 13);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_I64, 14);
  xfer += prot_->serializedSizeI64(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_BOOL, 15);
  xfer += prot_->serializedSizeBool(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_I64, 16);
  xfer += prot_->serializedSizeI64(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_DOUBLE, 17);
  xfer += prot_->serializedSizeDouble(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_STRUCT, 18);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_SET, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_LIST, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_MAP, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int8_t, double>>::serializedSize<false>(*prot_, this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_LIST, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_STRUCT, 23);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_MAP, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int8_t>>::serializedSize<false>(*prot_, this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_BYTE, 25);
  xfer += prot_->serializedSizeByte(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_BYTE, 26);
  xfer += prot_->serializedSizeByte(this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_BYTE, 27);
  xfer += prot_->serializedSizeByte(this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_MAP, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<int16_t, std::vector<int16_t>>>::serializedSize<false>(*prot_, this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_STRUCT, 29);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_SET, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_MAP, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<double, double>>::serializedSize<false>(*prot_, this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_STRUCT, 32);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_I16, 33);
  xfer += prot_->serializedSizeI16(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_STRING, 34);
  xfer += prot_->serializedSizeBinary(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_SET, 35);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_FLOAT, 36);
  xfer += prot_->serializedSizeFloat(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_LIST, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_STRUCT, 38);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_DOUBLE, 39);
  xfer += prot_->serializedSizeDouble(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_MAP, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<std::set<float>, std::set<double>>>::serializedSize<false>(*prot_, this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_LIST, 41);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_I16, 42);
  xfer += prot_->serializedSizeI16(this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_I32, 43);
  xfer += prot_->serializedSizeI32(this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_SET, 44);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_STRING, 45);
  xfer += prot_->serializedSizeString(this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_LIST, 46);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_MAP, 47);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int16_t,  ::cpp2::Struct2>>::serializedSize<false>(*prot_, this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_SET, 48);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_MAP, 49);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::map<int32_t, int32_t>, int64_t>>::serializedSize<false>(*prot_, this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_STRUCT, 50);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_I16, 51);
  xfer += prot_->serializedSizeI16(this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_SET, 52);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_BOOL, 53);
  xfer += prot_->serializedSizeBool(this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_LIST, 54);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_STRING, 55);
  xfer += prot_->serializedSizeString(this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_STRING, 56);
  xfer += prot_->serializedSizeBinary(this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_LIST, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_STRING, 58);
  xfer += prot_->serializedSizeBinary(this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_BYTE, 59);
  xfer += prot_->serializedSizeByte(this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_BYTE, 60);
  xfer += prot_->serializedSizeByte(this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_I32, 61);
  xfer += prot_->serializedSizeI32(this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_STRUCT, 62);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_STRUCT, 63);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_SET, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct0>>::serializedSize<false>(*prot_, this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_I32, 65);
  xfer += prot_->serializedSizeI32(this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_SET, 66);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_STRING, 67);
  xfer += prot_->serializedSizeBinary(this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_MAP, 68);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::floating_point>, std::map<std::map<int32_t, float>, float>>::serializedSize<false>(*prot_, this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_LIST, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_BOOL, 70);
  xfer += prot_->serializedSizeBool(this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_BOOL, 71);
  xfer += prot_->serializedSizeBool(this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_LIST, 72);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_MAP, 73);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::structure>, std::map<double,  ::cpp2::Struct1>>::serializedSize<false>(*prot_, this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_FLOAT, 74);
  xfer += prot_->serializedSizeFloat(this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_SET, 75);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>>, std::set<std::map<double, std::string>>>::serializedSize<false>(*prot_, this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_SET, 76);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_SET, 77);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_MAP, 78);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int8_t>>::serializedSize<false>(*prot_, this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_MAP, 79);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>>>, std::map<std::set<float>, std::set<std::map<float, std::string>>>>::serializedSize<false>(*prot_, this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_SET, 80);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_MAP, 81);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<bool, float>>::serializedSize<false>(*prot_, this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_I16, 82);
  xfer += prot_->serializedSizeI16(this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_STRING, 83);
  xfer += prot_->serializedSizeBinary(this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_BYTE, 84);
  xfer += prot_->serializedSizeByte(this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_I16, 85);
  xfer += prot_->serializedSizeI16(this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_MAP, 86);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::floating_point>, std::map<std::string, double>>::serializedSize<false>(*prot_, this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_BOOL, 87);
  xfer += prot_->serializedSizeBool(this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_LIST, 88);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>, std::vector<std::set<std::string>>>::serializedSize<false>(*prot_, this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_BYTE, 89);
  xfer += prot_->serializedSizeByte(this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_LIST, 90);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int16_t>>>::serializedSize<false>(*prot_, this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_BOOL, 91);
  xfer += prot_->serializedSizeBool(this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_I64, 92);
  xfer += prot_->serializedSizeI64(this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_I64, 93);
  xfer += prot_->serializedSizeI64(this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_MAP, 94);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int16_t>>::serializedSize<false>(*prot_, this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_STRING, 95);
  xfer += prot_->serializedSizeBinary(this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_BYTE, 96);
  xfer += prot_->serializedSizeByte(this->field96);
  xfer += prot_->serializedFieldSize("field97", apache::thrift::protocol::T_I16, 97);
  xfer += prot_->serializedSizeI16(this->field97);
  xfer += prot_->serializedFieldSize("field98", apache::thrift::protocol::T_STRUCT, 98);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field98);
  xfer += prot_->serializedFieldSize("field99", apache::thrift::protocol::T_STRUCT, 99);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field99);
  xfer += prot_->serializedFieldSize("field100", apache::thrift::protocol::T_MAP, 100);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int8_t>>::serializedSize<false>(*prot_, this->field100);
  xfer += prot_->serializedFieldSize("field101", apache::thrift::protocol::T_I32, 101);
  xfer += prot_->serializedSizeI32(this->field101);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct4::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct4");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int8_t>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_MAP, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::structure>, std::map<double,  ::cpp2::Struct1>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int8_t,  ::cpp2::Struct2>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRING, 5);
  xfer += prot_->serializedSizeZCBinary(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->serializedSizeI32(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<bool, std::vector<double>>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_BOOL, 8);
  xfer += prot_->serializedSizeBool(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRING, 9);
  xfer += prot_->serializedSizeZCBinary(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int8_t>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_STRUCT, 11);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_STRUCT, 13);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_I64, 14);
  xfer += prot_->serializedSizeI64(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_BOOL, 15);
  xfer += prot_->serializedSizeBool(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_I64, 16);
  xfer += prot_->serializedSizeI64(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_DOUBLE, 17);
  xfer += prot_->serializedSizeDouble(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_STRUCT, 18);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_SET, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_LIST, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_MAP, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int8_t, double>>::serializedSize<false>(*prot_, this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_LIST, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_STRUCT, 23);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_MAP, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int8_t>>::serializedSize<false>(*prot_, this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_BYTE, 25);
  xfer += prot_->serializedSizeByte(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_BYTE, 26);
  xfer += prot_->serializedSizeByte(this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_BYTE, 27);
  xfer += prot_->serializedSizeByte(this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_MAP, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<int16_t, std::vector<int16_t>>>::serializedSize<false>(*prot_, this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_STRUCT, 29);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_SET, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_MAP, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<double, double>>::serializedSize<false>(*prot_, this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_STRUCT, 32);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_I16, 33);
  xfer += prot_->serializedSizeI16(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_STRING, 34);
  xfer += prot_->serializedSizeZCBinary(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_SET, 35);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_FLOAT, 36);
  xfer += prot_->serializedSizeFloat(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_LIST, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_STRUCT, 38);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_DOUBLE, 39);
  xfer += prot_->serializedSizeDouble(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_MAP, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<std::set<float>, std::set<double>>>::serializedSize<false>(*prot_, this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_LIST, 41);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_I16, 42);
  xfer += prot_->serializedSizeI16(this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_I32, 43);
  xfer += prot_->serializedSizeI32(this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_SET, 44);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_STRING, 45);
  xfer += prot_->serializedSizeString(this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_LIST, 46);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_MAP, 47);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int16_t,  ::cpp2::Struct2>>::serializedSize<false>(*prot_, this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_SET, 48);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_MAP, 49);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::map<int32_t, int32_t>, int64_t>>::serializedSize<false>(*prot_, this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_STRUCT, 50);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_I16, 51);
  xfer += prot_->serializedSizeI16(this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_SET, 52);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_BOOL, 53);
  xfer += prot_->serializedSizeBool(this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_LIST, 54);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_STRING, 55);
  xfer += prot_->serializedSizeString(this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_STRING, 56);
  xfer += prot_->serializedSizeZCBinary(this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_LIST, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_STRING, 58);
  xfer += prot_->serializedSizeZCBinary(this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_BYTE, 59);
  xfer += prot_->serializedSizeByte(this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_BYTE, 60);
  xfer += prot_->serializedSizeByte(this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_I32, 61);
  xfer += prot_->serializedSizeI32(this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_STRUCT, 62);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_STRUCT, 63);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_SET, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct0>>::serializedSize<false>(*prot_, this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_I32, 65);
  xfer += prot_->serializedSizeI32(this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_SET, 66);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_STRING, 67);
  xfer += prot_->serializedSizeZCBinary(this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_MAP, 68);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::floating_point>, std::map<std::map<int32_t, float>, float>>::serializedSize<false>(*prot_, this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_LIST, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_BOOL, 70);
  xfer += prot_->serializedSizeBool(this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_BOOL, 71);
  xfer += prot_->serializedSizeBool(this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_LIST, 72);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_MAP, 73);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::structure>, std::map<double,  ::cpp2::Struct1>>::serializedSize<false>(*prot_, this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_FLOAT, 74);
  xfer += prot_->serializedSizeFloat(this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_SET, 75);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>>, std::set<std::map<double, std::string>>>::serializedSize<false>(*prot_, this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_SET, 76);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_SET, 77);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_MAP, 78);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int8_t>>::serializedSize<false>(*prot_, this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_MAP, 79);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>>>, std::map<std::set<float>, std::set<std::map<float, std::string>>>>::serializedSize<false>(*prot_, this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_SET, 80);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_MAP, 81);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<bool, float>>::serializedSize<false>(*prot_, this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_I16, 82);
  xfer += prot_->serializedSizeI16(this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_STRING, 83);
  xfer += prot_->serializedSizeZCBinary(this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_BYTE, 84);
  xfer += prot_->serializedSizeByte(this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_I16, 85);
  xfer += prot_->serializedSizeI16(this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_MAP, 86);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::floating_point>, std::map<std::string, double>>::serializedSize<false>(*prot_, this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_BOOL, 87);
  xfer += prot_->serializedSizeBool(this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_LIST, 88);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>, std::vector<std::set<std::string>>>::serializedSize<false>(*prot_, this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_BYTE, 89);
  xfer += prot_->serializedSizeByte(this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_LIST, 90);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int16_t>>>::serializedSize<false>(*prot_, this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_BOOL, 91);
  xfer += prot_->serializedSizeBool(this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_I64, 92);
  xfer += prot_->serializedSizeI64(this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_I64, 93);
  xfer += prot_->serializedSizeI64(this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_MAP, 94);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int16_t>>::serializedSize<false>(*prot_, this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_STRING, 95);
  xfer += prot_->serializedSizeZCBinary(this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_BYTE, 96);
  xfer += prot_->serializedSizeByte(this->field96);
  xfer += prot_->serializedFieldSize("field97", apache::thrift::protocol::T_I16, 97);
  xfer += prot_->serializedSizeI16(this->field97);
  xfer += prot_->serializedFieldSize("field98", apache::thrift::protocol::T_STRUCT, 98);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field98);
  xfer += prot_->serializedFieldSize("field99", apache::thrift::protocol::T_STRUCT, 99);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field99);
  xfer += prot_->serializedFieldSize("field100", apache::thrift::protocol::T_MAP, 100);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int8_t>>::serializedSize<false>(*prot_, this->field100);
  xfer += prot_->serializedFieldSize("field101", apache::thrift::protocol::T_I32, 101);
  xfer += prot_->serializedSizeI32(this->field101);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct4::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct4");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int8_t>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_MAP, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::structure>, std::map<double,  ::cpp2::Struct1>>::write(*prot_, this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int8_t,  ::cpp2::Struct2>>::write(*prot_, this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_STRING, 5);
  xfer += prot_->writeBinary(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->writeI32(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<bool, std::vector<double>>>::write(*prot_, this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_BOOL, 8);
  xfer += prot_->writeBool(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_STRING, 9);
  xfer += prot_->writeBinary(this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int8_t>>::write(*prot_, this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_STRUCT, 11);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_STRUCT, 13);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_I64, 14);
  xfer += prot_->writeI64(this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_BOOL, 15);
  xfer += prot_->writeBool(this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_I64, 16);
  xfer += prot_->writeI64(this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_DOUBLE, 17);
  xfer += prot_->writeDouble(this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_STRUCT, 18);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_SET, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_LIST, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_MAP, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int8_t, double>>::write(*prot_, this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_LIST, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_STRUCT, 23);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_MAP, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int8_t>>::write(*prot_, this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_BYTE, 25);
  xfer += prot_->writeByte(this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_BYTE, 26);
  xfer += prot_->writeByte(this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_BYTE, 27);
  xfer += prot_->writeByte(this->field27);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_MAP, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<int16_t, std::vector<int16_t>>>::write(*prot_, this->field28);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field29", apache::thrift::protocol::T_STRUCT, 29);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field29);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field30", apache::thrift::protocol::T_SET, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field30);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field31", apache::thrift::protocol::T_MAP, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<double, double>>::write(*prot_, this->field31);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field32", apache::thrift::protocol::T_STRUCT, 32);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field32);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field33", apache::thrift::protocol::T_I16, 33);
  xfer += prot_->writeI16(this->field33);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field34", apache::thrift::protocol::T_STRING, 34);
  xfer += prot_->writeBinary(this->field34);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field35", apache::thrift::protocol::T_SET, 35);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field35);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field36", apache::thrift::protocol::T_FLOAT, 36);
  xfer += prot_->writeFloat(this->field36);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field37", apache::thrift::protocol::T_LIST, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field37);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field38", apache::thrift::protocol::T_STRUCT, 38);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field38);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field39", apache::thrift::protocol::T_DOUBLE, 39);
  xfer += prot_->writeDouble(this->field39);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field40", apache::thrift::protocol::T_MAP, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<std::set<float>, std::set<double>>>::write(*prot_, this->field40);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field41", apache::thrift::protocol::T_LIST, 41);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field41);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field42", apache::thrift::protocol::T_I16, 42);
  xfer += prot_->writeI16(this->field42);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field43", apache::thrift::protocol::T_I32, 43);
  xfer += prot_->writeI32(this->field43);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field44", apache::thrift::protocol::T_SET, 44);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field44);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field45", apache::thrift::protocol::T_STRING, 45);
  xfer += prot_->writeString(this->field45);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field46", apache::thrift::protocol::T_LIST, 46);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field46);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field47", apache::thrift::protocol::T_MAP, 47);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int16_t,  ::cpp2::Struct2>>::write(*prot_, this->field47);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field48", apache::thrift::protocol::T_SET, 48);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field48);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field49", apache::thrift::protocol::T_MAP, 49);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::map<int32_t, int32_t>, int64_t>>::write(*prot_, this->field49);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field50", apache::thrift::protocol::T_STRUCT, 50);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field50);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field51", apache::thrift::protocol::T_I16, 51);
  xfer += prot_->writeI16(this->field51);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field52", apache::thrift::protocol::T_SET, 52);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field52);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field53", apache::thrift::protocol::T_BOOL, 53);
  xfer += prot_->writeBool(this->field53);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field54", apache::thrift::protocol::T_LIST, 54);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field54);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field55", apache::thrift::protocol::T_STRING, 55);
  xfer += prot_->writeString(this->field55);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field56", apache::thrift::protocol::T_STRING, 56);
  xfer += prot_->writeBinary(this->field56);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field57", apache::thrift::protocol::T_LIST, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field57);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field58", apache::thrift::protocol::T_STRING, 58);
  xfer += prot_->writeBinary(this->field58);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field59", apache::thrift::protocol::T_BYTE, 59);
  xfer += prot_->writeByte(this->field59);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field60", apache::thrift::protocol::T_BYTE, 60);
  xfer += prot_->writeByte(this->field60);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field61", apache::thrift::protocol::T_I32, 61);
  xfer += prot_->writeI32(this->field61);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field62", apache::thrift::protocol::T_STRUCT, 62);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field62);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field63", apache::thrift::protocol::T_STRUCT, 63);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field63);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field64", apache::thrift::protocol::T_SET, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct0>>::write(*prot_, this->field64);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field65", apache::thrift::protocol::T_I32, 65);
  xfer += prot_->writeI32(this->field65);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field66", apache::thrift::protocol::T_SET, 66);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field66);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field67", apache::thrift::protocol::T_STRING, 67);
  xfer += prot_->writeBinary(this->field67);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field68", apache::thrift::protocol::T_MAP, 68);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::floating_point>, std::map<std::map<int32_t, float>, float>>::write(*prot_, this->field68);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field69", apache::thrift::protocol::T_LIST, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field69);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field70", apache::thrift::protocol::T_BOOL, 70);
  xfer += prot_->writeBool(this->field70);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field71", apache::thrift::protocol::T_BOOL, 71);
  xfer += prot_->writeBool(this->field71);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field72", apache::thrift::protocol::T_LIST, 72);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field72);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field73", apache::thrift::protocol::T_MAP, 73);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::structure>, std::map<double,  ::cpp2::Struct1>>::write(*prot_, this->field73);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field74", apache::thrift::protocol::T_FLOAT, 74);
  xfer += prot_->writeFloat(this->field74);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field75", apache::thrift::protocol::T_SET, 75);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>>, std::set<std::map<double, std::string>>>::write(*prot_, this->field75);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field76", apache::thrift::protocol::T_SET, 76);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field76);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field77", apache::thrift::protocol::T_SET, 77);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field77);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field78", apache::thrift::protocol::T_MAP, 78);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int8_t>>::write(*prot_, this->field78);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field79", apache::thrift::protocol::T_MAP, 79);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>>>, std::map<std::set<float>, std::set<std::map<float, std::string>>>>::write(*prot_, this->field79);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field80", apache::thrift::protocol::T_SET, 80);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field80);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field81", apache::thrift::protocol::T_MAP, 81);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<bool, float>>::write(*prot_, this->field81);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field82", apache::thrift::protocol::T_I16, 82);
  xfer += prot_->writeI16(this->field82);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field83", apache::thrift::protocol::T_STRING, 83);
  xfer += prot_->writeBinary(this->field83);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field84", apache::thrift::protocol::T_BYTE, 84);
  xfer += prot_->writeByte(this->field84);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field85", apache::thrift::protocol::T_I16, 85);
  xfer += prot_->writeI16(this->field85);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field86", apache::thrift::protocol::T_MAP, 86);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::floating_point>, std::map<std::string, double>>::write(*prot_, this->field86);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field87", apache::thrift::protocol::T_BOOL, 87);
  xfer += prot_->writeBool(this->field87);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field88", apache::thrift::protocol::T_LIST, 88);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>, std::vector<std::set<std::string>>>::write(*prot_, this->field88);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field89", apache::thrift::protocol::T_BYTE, 89);
  xfer += prot_->writeByte(this->field89);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field90", apache::thrift::protocol::T_LIST, 90);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int16_t>>>::write(*prot_, this->field90);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field91", apache::thrift::protocol::T_BOOL, 91);
  xfer += prot_->writeBool(this->field91);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field92", apache::thrift::protocol::T_I64, 92);
  xfer += prot_->writeI64(this->field92);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field93", apache::thrift::protocol::T_I64, 93);
  xfer += prot_->writeI64(this->field93);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field94", apache::thrift::protocol::T_MAP, 94);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int16_t>>::write(*prot_, this->field94);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field95", apache::thrift::protocol::T_STRING, 95);
  xfer += prot_->writeBinary(this->field95);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field96", apache::thrift::protocol::T_BYTE, 96);
  xfer += prot_->writeByte(this->field96);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field97", apache::thrift::protocol::T_I16, 97);
  xfer += prot_->writeI16(this->field97);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field98", apache::thrift::protocol::T_STRUCT, 98);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field98);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field99", apache::thrift::protocol::T_STRUCT, 99);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field99);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field100", apache::thrift::protocol::T_MAP, 100);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int8_t>>::write(*prot_, this->field100);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field101", apache::thrift::protocol::T_I32, 101);
  xfer += prot_->writeI32(this->field101);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace cpp2 {

template <class Protocol_>
uint32_t Struct5::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field1 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field2 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field7 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field9 = std::vector<std::map<double, std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>>, std::vector<std::map<double, std::string>>>::read(*iprot, this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field11 = std::map<bool, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int64_t>>::read(*iprot, this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field12 = std::map<std::string, std::set<double>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<std::string, std::set<double>>>::read(*iprot, this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field15 = std::map<std::vector<bool>, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<bool>, int32_t>>::read(*iprot, this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field20 = std::map<int32_t, std::map<std::vector<int8_t>, float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::floating_point>>, std::map<int32_t, std::map<std::vector<int8_t>, float>>>::read(*iprot, this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field21 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field26 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field27 = std::vector<std::vector<float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<float>>>::read(*iprot, this->field27);
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field28 = std::map<int64_t, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int8_t>>::read(*iprot, this->field28);
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field29 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field29);
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 30:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field30 = std::set<std::vector<int16_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int16_t>>>::read(*iprot, this->field30);
          this->__isset.field30 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 31:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field31 = std::map<std::set<std::string>, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::string>, ::apache::thrift::type_class::floating_point>, std::map<std::set<std::string>, float>>::read(*iprot, this->field31);
          this->__isset.field31 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 32:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field32);
          this->__isset.field32 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 33:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field33);
          this->__isset.field33 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 34:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field34);
          this->__isset.field34 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 35:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field35 = std::map<std::set<int64_t>, double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::floating_point>, std::map<std::set<int64_t>, double>>::read(*iprot, this->field35);
          this->__isset.field35 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 36:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field36);
          this->__isset.field36 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 37:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field37);
          this->__isset.field37 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 38:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field38);
          this->__isset.field38 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 39:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field39);
          this->__isset.field39 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 40:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field40);
          this->__isset.field40 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 41:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field41);
          this->__isset.field41 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 42:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field42 = std::vector<std::vector<int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int32_t>>>::read(*iprot, this->field42);
          this->__isset.field42 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 43:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field43 = std::set<std::map<double, int8_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::set<std::map<double, int8_t>>>::read(*iprot, this->field43);
          this->__isset.field43 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 44:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field44 = std::set<std::map<int16_t, bool>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int16_t, bool>>>::read(*iprot, this->field44);
          this->__isset.field44 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 45:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field45);
          this->__isset.field45 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 46:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field46);
          this->__isset.field46 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 47:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field47);
          this->__isset.field47 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 48:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field48);
          this->__isset.field48 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 49:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field49);
          this->__isset.field49 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 50:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field50 = std::vector<std::map<int8_t, int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::vector<std::map<int8_t, int32_t>>>::read(*iprot, this->field50);
          this->__isset.field50 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 51:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field51 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field51);
          this->__isset.field51 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 52:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field52);
          this->__isset.field52 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 53:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field53 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field53);
          this->__isset.field53 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 54:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field54 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field54);
          this->__isset.field54 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 55:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field55);
          this->__isset.field55 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 56:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field56);
          this->__isset.field56 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 57:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field57);
          this->__isset.field57 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 58:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field58);
          this->__isset.field58 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 59:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field59 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field59);
          this->__isset.field59 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 60:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field60 = std::map<int8_t,  ::cpp2::Struct2>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int8_t,  ::cpp2::Struct2>>::read(*iprot, this->field60);
          this->__isset.field60 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 61:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field61);
          this->__isset.field61 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 62:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field62 = std::set<std::map<double, std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>>, std::set<std::map<double, std::string>>>::read(*iprot, this->field62);
          this->__isset.field62 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 63:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field63);
          this->__isset.field63 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 64:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field64 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field64);
          this->__isset.field64 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 65:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field65 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field65);
          this->__isset.field65 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 66:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field66 = std::set<std::vector<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::set<std::vector<std::string>>>::read(*iprot, this->field66);
          this->__isset.field66 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 67:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field67 = std::map<float, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>, std::map<float, std::string>>::read(*iprot, this->field67);
          this->__isset.field67 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 68:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field68 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field68);
          this->__isset.field68 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 69:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field69 = std::set<std::set<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>, std::set<std::set<std::string>>>::read(*iprot, this->field69);
          this->__isset.field69 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 70:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field70 = std::set<std::set<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::set<std::set<std::string>>>::read(*iprot, this->field70);
          this->__isset.field70 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 71:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field71);
          this->__isset.field71 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 72:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field72);
          this->__isset.field72 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 73:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field73);
          this->__isset.field73 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 74:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field74);
          this->__isset.field74 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 75:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field75 = std::map<std::string, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::read(*iprot, this->field75);
          this->__isset.field75 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 76:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field76);
          this->__isset.field76 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 77:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field77 = std::map<int8_t,  ::cpp2::Struct3>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int8_t,  ::cpp2::Struct3>>::read(*iprot, this->field77);
          this->__isset.field77 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 78:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field78 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field78);
          this->__isset.field78 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 79:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field79);
          this->__isset.field79 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 80:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field80);
          this->__isset.field80 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 81:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field81 = std::vector< ::cpp2::Struct0>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct0>>::read(*iprot, this->field81);
          this->__isset.field81 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 82:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field82 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field82);
          this->__isset.field82 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 83:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field83);
          this->__isset.field83 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 84:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field84 = std::map<int64_t, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int16_t>>::read(*iprot, this->field84);
          this->__isset.field84 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 85:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field85 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field85);
          this->__isset.field85 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 86:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field86);
          this->__isset.field86 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 87:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field87);
          this->__isset.field87 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 88:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field88 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field88);
          this->__isset.field88 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 89:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field89);
          this->__isset.field89 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 90:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field90);
          this->__isset.field90 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 91:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field91);
          this->__isset.field91 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 92:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field92);
          this->__isset.field92 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 93:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field93 = std::vector<std::vector<std::set<std::string>>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>>, std::vector<std::vector<std::set<std::string>>>>::read(*iprot, this->field93);
          this->__isset.field93 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 94:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field94);
          this->__isset.field94 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 95:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field95);
          this->__isset.field95 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 96:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field96);
          this->__isset.field96 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct5::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct5");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I16, 3);
  xfer += prot_->serializedSizeI16(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I64, 4);
  xfer += prot_->serializedSizeI64(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_FLOAT, 5);
  xfer += prot_->serializedSizeFloat(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_BOOL, 6);
  xfer += prot_->serializedSizeBool(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_LIST, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_I32, 8);
  xfer += prot_->serializedSizeI32(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>>, std::vector<std::map<double, std::string>>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_I64, 10);
  xfer += prot_->serializedSizeI64(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_MAP, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int64_t>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_MAP, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<std::string, std::set<double>>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_STRING, 13);
  xfer += prot_->serializedSizeString(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_STRUCT, 14);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_MAP, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<bool>, int32_t>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_I32, 16);
  xfer += prot_->serializedSizeI32(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_STRING, 17);
  xfer += prot_->serializedSizeBinary(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_I64, 18);
  xfer += prot_->serializedSizeI64(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_I16, 19);
  xfer += prot_->serializedSizeI16(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_MAP, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::floating_point>>, std::map<int32_t, std::map<std::vector<int8_t>, float>>>::serializedSize<false>(*prot_, this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_LIST, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_I16, 22);
  xfer += prot_->serializedSizeI16(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_FLOAT, 23);
  xfer += prot_->serializedSizeFloat(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_I16, 24);
  xfer += prot_->serializedSizeI16(this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_STRUCT, 25);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_SET, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_LIST, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<float>>>::serializedSize<false>(*prot_, this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_MAP, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int8_t>>::serializedSize<false>(*prot_, this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_LIST, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_SET, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int16_t>>>::serializedSize<false>(*prot_, this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_MAP, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::string>, ::apache::thrift::type_class::floating_point>, std::map<std::set<std::string>, float>>::serializedSize<false>(*prot_, this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_BOOL, 32);
  xfer += prot_->serializedSizeBool(this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_STRING, 33);
  xfer += prot_->serializedSizeBinary(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_FLOAT, 34);
  xfer += prot_->serializedSizeFloat(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_MAP, 35);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::floating_point>, std::map<std::set<int64_t>, double>>::serializedSize<false>(*prot_, this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_DOUBLE, 36);
  xfer += prot_->serializedSizeDouble(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_STRUCT, 37);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_BOOL, 38);
  xfer += prot_->serializedSizeBool(this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_I32, 39);
  xfer += prot_->serializedSizeI32(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_I64, 40);
  xfer += prot_->serializedSizeI64(this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_BYTE, 41);
  xfer += prot_->serializedSizeByte(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_LIST, 42);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int32_t>>>::serializedSize<false>(*prot_, this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_SET, 43);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::set<std::map<double, int8_t>>>::serializedSize<false>(*prot_, this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_SET, 44);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int16_t, bool>>>::serializedSize<false>(*prot_, this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_I32, 45);
  xfer += prot_->serializedSizeI32(this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_I64, 46);
  xfer += prot_->serializedSizeI64(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_STRUCT, 47);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_DOUBLE, 48);
  xfer += prot_->serializedSizeDouble(this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_STRUCT, 49);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_LIST, 50);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::vector<std::map<int8_t, int32_t>>>::serializedSize<false>(*prot_, this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_LIST, 51);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_STRUCT, 52);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_SET, 53);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_LIST, 54);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_STRUCT, 55);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_DOUBLE, 56);
  xfer += prot_->serializedSizeDouble(this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_I64, 57);
  xfer += prot_->serializedSizeI64(this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_STRUCT, 58);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_LIST, 59);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_MAP, 60);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int8_t,  ::cpp2::Struct2>>::serializedSize<false>(*prot_, this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_I32, 61);
  xfer += prot_->serializedSizeI32(this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_SET, 62);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>>, std::set<std::map<double, std::string>>>::serializedSize<false>(*prot_, this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_STRING, 63);
  xfer += prot_->serializedSizeBinary(this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_SET, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_SET, 65);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_SET, 66);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::set<std::vector<std::string>>>::serializedSize<false>(*prot_, this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_MAP, 67);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>, std::map<float, std::string>>::serializedSize<false>(*prot_, this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_SET, 68);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_SET, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>, std::set<std::set<std::string>>>::serializedSize<false>(*prot_, this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_SET, 70);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::set<std::set<std::string>>>::serializedSize<false>(*prot_, this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_I32, 71);
  xfer += prot_->serializedSizeI32(this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_I64, 72);
  xfer += prot_->serializedSizeI64(this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_STRUCT, 73);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_DOUBLE, 74);
  xfer += prot_->serializedSizeDouble(this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_MAP, 75);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::serializedSize<false>(*prot_, this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_STRING, 76);
  xfer += prot_->serializedSizeString(this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_MAP, 77);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int8_t,  ::cpp2::Struct3>>::serializedSize<false>(*prot_, this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_SET, 78);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_STRUCT, 79);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_I16, 80);
  xfer += prot_->serializedSizeI16(this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_LIST, 81);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct0>>::serializedSize<false>(*prot_, this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_SET, 82);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_STRUCT, 83);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_MAP, 84);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int16_t>>::serializedSize<false>(*prot_, this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_SET, 85);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_STRUCT, 86);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_STRING, 87);
  xfer += prot_->serializedSizeBinary(this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_LIST, 88);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_STRING, 89);
  xfer += prot_->serializedSizeBinary(this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_STRUCT, 90);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_STRUCT, 91);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_BOOL, 92);
  xfer += prot_->serializedSizeBool(this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_LIST, 93);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>>, std::vector<std::vector<std::set<std::string>>>>::serializedSize<false>(*prot_, this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_STRING, 94);
  xfer += prot_->serializedSizeString(this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_FLOAT, 95);
  xfer += prot_->serializedSizeFloat(this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_I16, 96);
  xfer += prot_->serializedSizeI16(this->field96);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct5::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct5");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I16, 3);
  xfer += prot_->serializedSizeI16(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I64, 4);
  xfer += prot_->serializedSizeI64(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_FLOAT, 5);
  xfer += prot_->serializedSizeFloat(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_BOOL, 6);
  xfer += prot_->serializedSizeBool(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_LIST, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_I32, 8);
  xfer += prot_->serializedSizeI32(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>>, std::vector<std::map<double, std::string>>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_I64, 10);
  xfer += prot_->serializedSizeI64(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_MAP, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int64_t>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_MAP, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<std::string, std::set<double>>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_STRING, 13);
  xfer += prot_->serializedSizeString(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_STRUCT, 14);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_MAP, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<bool>, int32_t>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_I32, 16);
  xfer += prot_->serializedSizeI32(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_STRING, 17);
  xfer += prot_->serializedSizeZCBinary(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_I64, 18);
  xfer += prot_->serializedSizeI64(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_I16, 19);
  xfer += prot_->serializedSizeI16(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_MAP, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::floating_point>>, std::map<int32_t, std::map<std::vector<int8_t>, float>>>::serializedSize<false>(*prot_, this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_LIST, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_I16, 22);
  xfer += prot_->serializedSizeI16(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_FLOAT, 23);
  xfer += prot_->serializedSizeFloat(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_I16, 24);
  xfer += prot_->serializedSizeI16(this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_STRUCT, 25);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_SET, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_LIST, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<float>>>::serializedSize<false>(*prot_, this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_MAP, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int8_t>>::serializedSize<false>(*prot_, this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_LIST, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_SET, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int16_t>>>::serializedSize<false>(*prot_, this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_MAP, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::string>, ::apache::thrift::type_class::floating_point>, std::map<std::set<std::string>, float>>::serializedSize<false>(*prot_, this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_BOOL, 32);
  xfer += prot_->serializedSizeBool(this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_STRING, 33);
  xfer += prot_->serializedSizeZCBinary(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_FLOAT, 34);
  xfer += prot_->serializedSizeFloat(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_MAP, 35);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::floating_point>, std::map<std::set<int64_t>, double>>::serializedSize<false>(*prot_, this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_DOUBLE, 36);
  xfer += prot_->serializedSizeDouble(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_STRUCT, 37);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_BOOL, 38);
  xfer += prot_->serializedSizeBool(this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_I32, 39);
  xfer += prot_->serializedSizeI32(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_I64, 40);
  xfer += prot_->serializedSizeI64(this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_BYTE, 41);
  xfer += prot_->serializedSizeByte(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_LIST, 42);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int32_t>>>::serializedSize<false>(*prot_, this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_SET, 43);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::set<std::map<double, int8_t>>>::serializedSize<false>(*prot_, this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_SET, 44);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int16_t, bool>>>::serializedSize<false>(*prot_, this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_I32, 45);
  xfer += prot_->serializedSizeI32(this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_I64, 46);
  xfer += prot_->serializedSizeI64(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_STRUCT, 47);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_DOUBLE, 48);
  xfer += prot_->serializedSizeDouble(this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_STRUCT, 49);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_LIST, 50);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::vector<std::map<int8_t, int32_t>>>::serializedSize<false>(*prot_, this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_LIST, 51);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_STRUCT, 52);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_SET, 53);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_LIST, 54);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_STRUCT, 55);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_DOUBLE, 56);
  xfer += prot_->serializedSizeDouble(this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_I64, 57);
  xfer += prot_->serializedSizeI64(this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_STRUCT, 58);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_LIST, 59);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_MAP, 60);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int8_t,  ::cpp2::Struct2>>::serializedSize<false>(*prot_, this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_I32, 61);
  xfer += prot_->serializedSizeI32(this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_SET, 62);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>>, std::set<std::map<double, std::string>>>::serializedSize<false>(*prot_, this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_STRING, 63);
  xfer += prot_->serializedSizeZCBinary(this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_SET, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_SET, 65);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_SET, 66);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::set<std::vector<std::string>>>::serializedSize<false>(*prot_, this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_MAP, 67);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>, std::map<float, std::string>>::serializedSize<false>(*prot_, this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_SET, 68);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_SET, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>, std::set<std::set<std::string>>>::serializedSize<false>(*prot_, this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_SET, 70);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::set<std::set<std::string>>>::serializedSize<false>(*prot_, this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_I32, 71);
  xfer += prot_->serializedSizeI32(this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_I64, 72);
  xfer += prot_->serializedSizeI64(this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_STRUCT, 73);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_DOUBLE, 74);
  xfer += prot_->serializedSizeDouble(this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_MAP, 75);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::serializedSize<false>(*prot_, this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_STRING, 76);
  xfer += prot_->serializedSizeString(this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_MAP, 77);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int8_t,  ::cpp2::Struct3>>::serializedSize<false>(*prot_, this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_SET, 78);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_STRUCT, 79);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_I16, 80);
  xfer += prot_->serializedSizeI16(this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_LIST, 81);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct0>>::serializedSize<false>(*prot_, this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_SET, 82);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_STRUCT, 83);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_MAP, 84);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int16_t>>::serializedSize<false>(*prot_, this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_SET, 85);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_STRUCT, 86);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_STRING, 87);
  xfer += prot_->serializedSizeZCBinary(this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_LIST, 88);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_STRING, 89);
  xfer += prot_->serializedSizeZCBinary(this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_STRUCT, 90);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_STRUCT, 91);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_BOOL, 92);
  xfer += prot_->serializedSizeBool(this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_LIST, 93);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>>, std::vector<std::vector<std::set<std::string>>>>::serializedSize<false>(*prot_, this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_STRING, 94);
  xfer += prot_->serializedSizeString(this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_FLOAT, 95);
  xfer += prot_->serializedSizeFloat(this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_I16, 96);
  xfer += prot_->serializedSizeI16(this->field96);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct5::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct5");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_I16, 3);
  xfer += prot_->writeI16(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_I64, 4);
  xfer += prot_->writeI64(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_FLOAT, 5);
  xfer += prot_->writeFloat(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_BOOL, 6);
  xfer += prot_->writeBool(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_LIST, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_I32, 8);
  xfer += prot_->writeI32(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>>, std::vector<std::map<double, std::string>>>::write(*prot_, this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_I64, 10);
  xfer += prot_->writeI64(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_MAP, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int64_t>>::write(*prot_, this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_MAP, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<std::string, std::set<double>>>::write(*prot_, this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_STRING, 13);
  xfer += prot_->writeString(this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_STRUCT, 14);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_MAP, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<bool>, int32_t>>::write(*prot_, this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_I32, 16);
  xfer += prot_->writeI32(this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_STRING, 17);
  xfer += prot_->writeBinary(this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_I64, 18);
  xfer += prot_->writeI64(this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_I16, 19);
  xfer += prot_->writeI16(this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_MAP, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::floating_point>>, std::map<int32_t, std::map<std::vector<int8_t>, float>>>::write(*prot_, this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_LIST, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_I16, 22);
  xfer += prot_->writeI16(this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_FLOAT, 23);
  xfer += prot_->writeFloat(this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_I16, 24);
  xfer += prot_->writeI16(this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_STRUCT, 25);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_SET, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_LIST, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<float>>>::write(*prot_, this->field27);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_MAP, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int8_t>>::write(*prot_, this->field28);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field29", apache::thrift::protocol::T_LIST, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field29);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field30", apache::thrift::protocol::T_SET, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int16_t>>>::write(*prot_, this->field30);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field31", apache::thrift::protocol::T_MAP, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::string>, ::apache::thrift::type_class::floating_point>, std::map<std::set<std::string>, float>>::write(*prot_, this->field31);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field32", apache::thrift::protocol::T_BOOL, 32);
  xfer += prot_->writeBool(this->field32);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field33", apache::thrift::protocol::T_STRING, 33);
  xfer += prot_->writeBinary(this->field33);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field34", apache::thrift::protocol::T_FLOAT, 34);
  xfer += prot_->writeFloat(this->field34);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field35", apache::thrift::protocol::T_MAP, 35);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::floating_point>, std::map<std::set<int64_t>, double>>::write(*prot_, this->field35);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field36", apache::thrift::protocol::T_DOUBLE, 36);
  xfer += prot_->writeDouble(this->field36);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field37", apache::thrift::protocol::T_STRUCT, 37);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field37);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field38", apache::thrift::protocol::T_BOOL, 38);
  xfer += prot_->writeBool(this->field38);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field39", apache::thrift::protocol::T_I32, 39);
  xfer += prot_->writeI32(this->field39);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field40", apache::thrift::protocol::T_I64, 40);
  xfer += prot_->writeI64(this->field40);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field41", apache::thrift::protocol::T_BYTE, 41);
  xfer += prot_->writeByte(this->field41);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field42", apache::thrift::protocol::T_LIST, 42);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int32_t>>>::write(*prot_, this->field42);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field43", apache::thrift::protocol::T_SET, 43);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::set<std::map<double, int8_t>>>::write(*prot_, this->field43);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field44", apache::thrift::protocol::T_SET, 44);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int16_t, bool>>>::write(*prot_, this->field44);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field45", apache::thrift::protocol::T_I32, 45);
  xfer += prot_->writeI32(this->field45);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field46", apache::thrift::protocol::T_I64, 46);
  xfer += prot_->writeI64(this->field46);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field47", apache::thrift::protocol::T_STRUCT, 47);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field47);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field48", apache::thrift::protocol::T_DOUBLE, 48);
  xfer += prot_->writeDouble(this->field48);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field49", apache::thrift::protocol::T_STRUCT, 49);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field49);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field50", apache::thrift::protocol::T_LIST, 50);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::vector<std::map<int8_t, int32_t>>>::write(*prot_, this->field50);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field51", apache::thrift::protocol::T_LIST, 51);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field51);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field52", apache::thrift::protocol::T_STRUCT, 52);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field52);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field53", apache::thrift::protocol::T_SET, 53);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field53);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field54", apache::thrift::protocol::T_LIST, 54);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field54);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field55", apache::thrift::protocol::T_STRUCT, 55);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field55);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field56", apache::thrift::protocol::T_DOUBLE, 56);
  xfer += prot_->writeDouble(this->field56);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field57", apache::thrift::protocol::T_I64, 57);
  xfer += prot_->writeI64(this->field57);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field58", apache::thrift::protocol::T_STRUCT, 58);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field58);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field59", apache::thrift::protocol::T_LIST, 59);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field59);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field60", apache::thrift::protocol::T_MAP, 60);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int8_t,  ::cpp2::Struct2>>::write(*prot_, this->field60);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field61", apache::thrift::protocol::T_I32, 61);
  xfer += prot_->writeI32(this->field61);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field62", apache::thrift::protocol::T_SET, 62);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>>, std::set<std::map<double, std::string>>>::write(*prot_, this->field62);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field63", apache::thrift::protocol::T_STRING, 63);
  xfer += prot_->writeBinary(this->field63);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field64", apache::thrift::protocol::T_SET, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field64);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field65", apache::thrift::protocol::T_SET, 65);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field65);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field66", apache::thrift::protocol::T_SET, 66);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::set<std::vector<std::string>>>::write(*prot_, this->field66);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field67", apache::thrift::protocol::T_MAP, 67);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>, std::map<float, std::string>>::write(*prot_, this->field67);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field68", apache::thrift::protocol::T_SET, 68);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field68);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field69", apache::thrift::protocol::T_SET, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>, std::set<std::set<std::string>>>::write(*prot_, this->field69);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field70", apache::thrift::protocol::T_SET, 70);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::set<std::set<std::string>>>::write(*prot_, this->field70);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field71", apache::thrift::protocol::T_I32, 71);
  xfer += prot_->writeI32(this->field71);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field72", apache::thrift::protocol::T_I64, 72);
  xfer += prot_->writeI64(this->field72);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field73", apache::thrift::protocol::T_STRUCT, 73);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field73);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field74", apache::thrift::protocol::T_DOUBLE, 74);
  xfer += prot_->writeDouble(this->field74);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field75", apache::thrift::protocol::T_MAP, 75);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::write(*prot_, this->field75);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field76", apache::thrift::protocol::T_STRING, 76);
  xfer += prot_->writeString(this->field76);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field77", apache::thrift::protocol::T_MAP, 77);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int8_t,  ::cpp2::Struct3>>::write(*prot_, this->field77);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field78", apache::thrift::protocol::T_SET, 78);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field78);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field79", apache::thrift::protocol::T_STRUCT, 79);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field79);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field80", apache::thrift::protocol::T_I16, 80);
  xfer += prot_->writeI16(this->field80);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field81", apache::thrift::protocol::T_LIST, 81);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct0>>::write(*prot_, this->field81);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field82", apache::thrift::protocol::T_SET, 82);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field82);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field83", apache::thrift::protocol::T_STRUCT, 83);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field83);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field84", apache::thrift::protocol::T_MAP, 84);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int16_t>>::write(*prot_, this->field84);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field85", apache::thrift::protocol::T_SET, 85);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field85);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field86", apache::thrift::protocol::T_STRUCT, 86);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field86);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field87", apache::thrift::protocol::T_STRING, 87);
  xfer += prot_->writeBinary(this->field87);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field88", apache::thrift::protocol::T_LIST, 88);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field88);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field89", apache::thrift::protocol::T_STRING, 89);
  xfer += prot_->writeBinary(this->field89);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field90", apache::thrift::protocol::T_STRUCT, 90);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field90);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field91", apache::thrift::protocol::T_STRUCT, 91);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field91);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field92", apache::thrift::protocol::T_BOOL, 92);
  xfer += prot_->writeBool(this->field92);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field93", apache::thrift::protocol::T_LIST, 93);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>>, std::vector<std::vector<std::set<std::string>>>>::write(*prot_, this->field93);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field94", apache::thrift::protocol::T_STRING, 94);
  xfer += prot_->writeString(this->field94);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field95", apache::thrift::protocol::T_FLOAT, 95);
  xfer += prot_->writeFloat(this->field95);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field96", apache::thrift::protocol::T_I16, 96);
  xfer += prot_->writeI16(this->field96);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace cpp2 {

template <class Protocol_>
uint32_t Struct6::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field1 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field2 = std::set<std::vector< ::cpp2::Struct1>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>, std::set<std::vector< ::cpp2::Struct1>>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field6 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::read(iprot, &this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field11 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field12 = std::map<bool, double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<bool, double>>::read(*iprot, this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field13 = std::map<std::string, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::read(*iprot, this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field15 = std::vector< ::cpp2::Struct3>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct3>>::read(*iprot, this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field16 = std::vector< ::cpp2::Struct3>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct3>>::read(*iprot, this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field20 = std::vector< ::cpp2::Struct0>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct0>>::read(*iprot, this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field22 = std::map<std::vector<bool>, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<bool>, bool>>::read(*iprot, this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field23 = std::map<int16_t, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int32_t>>::read(*iprot, this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field25 = std::set<std::set<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::set<std::set<std::string>>>::read(*iprot, this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field27 = std::map<std::string,  ::cpp2::Struct3>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, std::map<std::string,  ::cpp2::Struct3>>::read(*iprot, this->field27);
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field28 = std::map<std::vector<std::map<float, int16_t>>, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, ::apache::thrift::type_class::string>, std::map<std::vector<std::map<float, int16_t>>, std::string>>::read(*iprot, this->field28);
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field29 = std::map<int32_t, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int64_t>>::read(*iprot, this->field29);
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 30:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field30 = std::set< ::cpp2::Struct3>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct3>>::read(*iprot, this->field30);
          this->__isset.field30 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 31:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field31);
          this->__isset.field31 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 32:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field32 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field32);
          this->__isset.field32 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 33:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field33);
          this->__isset.field33 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 34:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field34);
          this->__isset.field34 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 35:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field35);
          this->__isset.field35 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 36:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field36 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field36);
          this->__isset.field36 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 37:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field37 = std::vector<std::vector<std::map<float, int16_t>>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>>, std::vector<std::vector<std::map<float, int16_t>>>>::read(*iprot, this->field37);
          this->__isset.field37 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 38:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field38 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field38);
          this->__isset.field38 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 39:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field39);
          this->__isset.field39 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 40:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field40 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field40);
          this->__isset.field40 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 41:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field41);
          this->__isset.field41 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 42:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field42);
          this->__isset.field42 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 43:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field43 = std::map<double, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int32_t>>::read(*iprot, this->field43);
          this->__isset.field43 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 44:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field44);
          this->__isset.field44 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 45:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field45 = std::map< ::cpp2::Struct5, std::map< ::cpp2::Struct1, float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::floating_point>>, std::map< ::cpp2::Struct5, std::map< ::cpp2::Struct1, float>>>::read(*iprot, this->field45);
          this->__isset.field45 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 46:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field46);
          this->__isset.field46 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 47:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field47);
          this->__isset.field47 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 48:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field48);
          this->__isset.field48 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 49:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field49);
          this->__isset.field49 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 50:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field50 = std::set< ::cpp2::Struct0>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct0>>::read(*iprot, this->field50);
          this->__isset.field50 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 51:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field51);
          this->__isset.field51 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 52:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field52 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field52);
          this->__isset.field52 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 53:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field53 = std::vector< ::cpp2::Struct1>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct1>>::read(*iprot, this->field53);
          this->__isset.field53 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 54:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field54);
          this->__isset.field54 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 55:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field55 = std::map<std::vector<int64_t>, std::vector<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::map<std::vector<int64_t>, std::vector<std::string>>>::read(*iprot, this->field55);
          this->__isset.field55 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 56:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field56);
          this->__isset.field56 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 57:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field57 = std::map<double, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int64_t>>::read(*iprot, this->field57);
          this->__isset.field57 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 58:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field58);
          this->__isset.field58 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 59:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field59 = std::map<int8_t, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int32_t>>::read(*iprot, this->field59);
          this->__isset.field59 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 60:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field60 = std::map<double, std::map<std::string, int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>>, std::map<double, std::map<std::string, int32_t>>>::read(*iprot, this->field60);
          this->__isset.field60 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 61:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field61);
          this->__isset.field61 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 62:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field62);
          this->__isset.field62 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 63:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field63);
          this->__isset.field63 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 64:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field64);
          this->__isset.field64 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 65:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field65 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field65);
          this->__isset.field65 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 66:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field66 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field66);
          this->__isset.field66 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 67:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field67);
          this->__isset.field67 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 68:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field68);
          this->__isset.field68 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 69:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field69 = std::map<int16_t,  ::cpp2::Struct2>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int16_t,  ::cpp2::Struct2>>::read(*iprot, this->field69);
          this->__isset.field69 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 70:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field70);
          this->__isset.field70 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 71:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field71);
          this->__isset.field71 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 72:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field72);
          this->__isset.field72 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 73:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field73);
          this->__isset.field73 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 74:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::read(iprot, &this->field74);
          this->__isset.field74 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 75:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field75);
          this->__isset.field75 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 76:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field76);
          this->__isset.field76 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 77:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field77);
          this->__isset.field77 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 78:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field78);
          this->__isset.field78 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 79:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field79);
          this->__isset.field79 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 80:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field80);
          this->__isset.field80 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 81:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field81);
          this->__isset.field81 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 82:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field82 = std::map<int64_t, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int16_t>>::read(*iprot, this->field82);
          this->__isset.field82 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 83:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field83);
          this->__isset.field83 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 84:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field84 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field84);
          this->__isset.field84 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 85:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field85);
          this->__isset.field85 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 86:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field86);
          this->__isset.field86 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 87:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field87 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field87);
          this->__isset.field87 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 88:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field88 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field88);
          this->__isset.field88 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 89:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field89);
          this->__isset.field89 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 90:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field90);
          this->__isset.field90 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 91:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field91);
          this->__isset.field91 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 92:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field92);
          this->__isset.field92 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 93:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field93);
          this->__isset.field93 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 94:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field94);
          this->__isset.field94 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 95:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field95 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field95);
          this->__isset.field95 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 96:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field96);
          this->__isset.field96 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 97:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field97);
          this->__isset.field97 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 98:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field98);
          this->__isset.field98 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 99:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field99 = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->field99);
          this->__isset.field99 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 100:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field100);
          this->__isset.field100 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 101:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field101 = std::map<bool, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<bool, std::string>>::read(*iprot, this->field101);
          this->__isset.field101 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 102:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field102 = std::map<int8_t, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int8_t, float>>::read(*iprot, this->field102);
          this->__isset.field102 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 103:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field103);
          this->__isset.field103 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct6::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct6");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>, std::set<std::vector< ::cpp2::Struct1>>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_BOOL, 3);
  xfer += prot_->serializedSizeBool(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->serializedSizeByte(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I64, 5);
  xfer += prot_->serializedSizeI64(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_STRING, 7);
  xfer += prot_->serializedSizeString(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_I32, 8);
  xfer += prot_->serializedSizeI32(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_BYTE, 9);
  xfer += prot_->serializedSizeByte(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_STRUCT, 10);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSize(prot_, &this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_SET, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_MAP, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<bool, double>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_MAP, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_BYTE, 14);
  xfer += prot_->serializedSizeByte(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_LIST, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct3>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_LIST, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct3>>::serializedSize<false>(*prot_, this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_FLOAT, 17);
  xfer += prot_->serializedSizeFloat(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_BYTE, 18);
  xfer += prot_->serializedSizeByte(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_DOUBLE, 19);
  xfer += prot_->serializedSizeDouble(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_LIST, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct0>>::serializedSize<false>(*prot_, this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_BOOL, 21);
  xfer += prot_->serializedSizeBool(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_MAP, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<bool>, bool>>::serializedSize<false>(*prot_, this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_MAP, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int32_t>>::serializedSize<false>(*prot_, this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_I64, 24);
  xfer += prot_->serializedSizeI64(this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_SET, 25);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::set<std::set<std::string>>>::serializedSize<false>(*prot_, this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_STRING, 26);
  xfer += prot_->serializedSizeBinary(this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_MAP, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, std::map<std::string,  ::cpp2::Struct3>>::serializedSize<false>(*prot_, this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_MAP, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, ::apache::thrift::type_class::string>, std::map<std::vector<std::map<float, int16_t>>, std::string>>::serializedSize<false>(*prot_, this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_MAP, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int64_t>>::serializedSize<false>(*prot_, this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_SET, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct3>>::serializedSize<false>(*prot_, this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_BYTE, 31);
  xfer += prot_->serializedSizeByte(this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_LIST, 32);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_BYTE, 33);
  xfer += prot_->serializedSizeByte(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_STRING, 34);
  xfer += prot_->serializedSizeString(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_I32, 35);
  xfer += prot_->serializedSizeI32(this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_SET, 36);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_LIST, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>>, std::vector<std::vector<std::map<float, int16_t>>>>::serializedSize<false>(*prot_, this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_LIST, 38);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_STRING, 39);
  xfer += prot_->serializedSizeBinary(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_SET, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_DOUBLE, 41);
  xfer += prot_->serializedSizeDouble(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_DOUBLE, 42);
  xfer += prot_->serializedSizeDouble(this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_MAP, 43);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int32_t>>::serializedSize<false>(*prot_, this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_DOUBLE, 44);
  xfer += prot_->serializedSizeDouble(this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_MAP, 45);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::floating_point>>, std::map< ::cpp2::Struct5, std::map< ::cpp2::Struct1, float>>>::serializedSize<false>(*prot_, this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_BOOL, 46);
  xfer += prot_->serializedSizeBool(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_STRING, 47);
  xfer += prot_->serializedSizeBinary(this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_I32, 48);
  xfer += prot_->serializedSizeI32(this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_STRUCT, 49);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_SET, 50);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct0>>::serializedSize<false>(*prot_, this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_BYTE, 51);
  xfer += prot_->serializedSizeByte(this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_SET, 52);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_LIST, 53);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct1>>::serializedSize<false>(*prot_, this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_DOUBLE, 54);
  xfer += prot_->serializedSizeDouble(this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_MAP, 55);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::map<std::vector<int64_t>, std::vector<std::string>>>::serializedSize<false>(*prot_, this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_STRING, 56);
  xfer += prot_->serializedSizeBinary(this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_MAP, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int64_t>>::serializedSize<false>(*prot_, this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_STRUCT, 58);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_MAP, 59);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int32_t>>::serializedSize<false>(*prot_, this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_MAP, 60);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>>, std::map<double, std::map<std::string, int32_t>>>::serializedSize<false>(*prot_, this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_I64, 61);
  xfer += prot_->serializedSizeI64(this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_BYTE, 62);
  xfer += prot_->serializedSizeByte(this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_STRUCT, 63);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_BOOL, 64);
  xfer += prot_->serializedSizeBool(this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_SET, 65);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_SET, 66);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_STRUCT, 67);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_I64, 68);
  xfer += prot_->serializedSizeI64(this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_MAP, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int16_t,  ::cpp2::Struct2>>::serializedSize<false>(*prot_, this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_BOOL, 70);
  xfer += prot_->serializedSizeBool(this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_I64, 71);
  xfer += prot_->serializedSizeI64(this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_I64, 72);
  xfer += prot_->serializedSizeI64(this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_STRUCT, 73);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_STRUCT, 74);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSize(prot_, &this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_BYTE, 75);
  xfer += prot_->serializedSizeByte(this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_BOOL, 76);
  xfer += prot_->serializedSizeBool(this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_STRUCT, 77);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_DOUBLE, 78);
  xfer += prot_->serializedSizeDouble(this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_I32, 79);
  xfer += prot_->serializedSizeI32(this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_STRUCT, 80);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_BOOL, 81);
  xfer += prot_->serializedSizeBool(this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_MAP, 82);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int16_t>>::serializedSize<false>(*prot_, this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_FLOAT, 83);
  xfer += prot_->serializedSizeFloat(this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_SET, 84);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_DOUBLE, 85);
  xfer += prot_->serializedSizeDouble(this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_STRING, 86);
  xfer += prot_->serializedSizeString(this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_SET, 87);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_LIST, 88);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_STRING, 89);
  xfer += prot_->serializedSizeBinary(this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_STRUCT, 90);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_STRUCT, 91);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_I32, 92);
  xfer += prot_->serializedSizeI32(this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_DOUBLE, 93);
  xfer += prot_->serializedSizeDouble(this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_BYTE, 94);
  xfer += prot_->serializedSizeByte(this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_SET, 95);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_STRUCT, 96);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field96);
  xfer += prot_->serializedFieldSize("field97", apache::thrift::protocol::T_FLOAT, 97);
  xfer += prot_->serializedSizeFloat(this->field97);
  xfer += prot_->serializedFieldSize("field98", apache::thrift::protocol::T_STRUCT, 98);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field98);
  xfer += prot_->serializedFieldSize("field99", apache::thrift::protocol::T_LIST, 99);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field99);
  xfer += prot_->serializedFieldSize("field100", apache::thrift::protocol::T_I16, 100);
  xfer += prot_->serializedSizeI16(this->field100);
  xfer += prot_->serializedFieldSize("field101", apache::thrift::protocol::T_MAP, 101);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<bool, std::string>>::serializedSize<false>(*prot_, this->field101);
  xfer += prot_->serializedFieldSize("field102", apache::thrift::protocol::T_MAP, 102);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int8_t, float>>::serializedSize<false>(*prot_, this->field102);
  xfer += prot_->serializedFieldSize("field103", apache::thrift::protocol::T_STRUCT, 103);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field103);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct6::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct6");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>, std::set<std::vector< ::cpp2::Struct1>>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_BOOL, 3);
  xfer += prot_->serializedSizeBool(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->serializedSizeByte(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I64, 5);
  xfer += prot_->serializedSizeI64(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_STRING, 7);
  xfer += prot_->serializedSizeString(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_I32, 8);
  xfer += prot_->serializedSizeI32(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_BYTE, 9);
  xfer += prot_->serializedSizeByte(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_STRUCT, 10);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSizeZC(prot_, &this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_SET, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_MAP, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<bool, double>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_MAP, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_BYTE, 14);
  xfer += prot_->serializedSizeByte(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_LIST, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct3>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_LIST, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct3>>::serializedSize<false>(*prot_, this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_FLOAT, 17);
  xfer += prot_->serializedSizeFloat(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_BYTE, 18);
  xfer += prot_->serializedSizeByte(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_DOUBLE, 19);
  xfer += prot_->serializedSizeDouble(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_LIST, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct0>>::serializedSize<false>(*prot_, this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_BOOL, 21);
  xfer += prot_->serializedSizeBool(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_MAP, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<bool>, bool>>::serializedSize<false>(*prot_, this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_MAP, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int32_t>>::serializedSize<false>(*prot_, this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_I64, 24);
  xfer += prot_->serializedSizeI64(this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_SET, 25);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::set<std::set<std::string>>>::serializedSize<false>(*prot_, this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_STRING, 26);
  xfer += prot_->serializedSizeZCBinary(this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_MAP, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, std::map<std::string,  ::cpp2::Struct3>>::serializedSize<false>(*prot_, this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_MAP, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, ::apache::thrift::type_class::string>, std::map<std::vector<std::map<float, int16_t>>, std::string>>::serializedSize<false>(*prot_, this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_MAP, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int64_t>>::serializedSize<false>(*prot_, this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_SET, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct3>>::serializedSize<false>(*prot_, this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_BYTE, 31);
  xfer += prot_->serializedSizeByte(this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_LIST, 32);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_BYTE, 33);
  xfer += prot_->serializedSizeByte(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_STRING, 34);
  xfer += prot_->serializedSizeString(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_I32, 35);
  xfer += prot_->serializedSizeI32(this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_SET, 36);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_LIST, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>>, std::vector<std::vector<std::map<float, int16_t>>>>::serializedSize<false>(*prot_, this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_LIST, 38);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_STRING, 39);
  xfer += prot_->serializedSizeZCBinary(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_SET, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_DOUBLE, 41);
  xfer += prot_->serializedSizeDouble(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_DOUBLE, 42);
  xfer += prot_->serializedSizeDouble(this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_MAP, 43);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int32_t>>::serializedSize<false>(*prot_, this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_DOUBLE, 44);
  xfer += prot_->serializedSizeDouble(this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_MAP, 45);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::floating_point>>, std::map< ::cpp2::Struct5, std::map< ::cpp2::Struct1, float>>>::serializedSize<false>(*prot_, this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_BOOL, 46);
  xfer += prot_->serializedSizeBool(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_STRING, 47);
  xfer += prot_->serializedSizeZCBinary(this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_I32, 48);
  xfer += prot_->serializedSizeI32(this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_STRUCT, 49);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_SET, 50);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct0>>::serializedSize<false>(*prot_, this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_BYTE, 51);
  xfer += prot_->serializedSizeByte(this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_SET, 52);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_LIST, 53);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct1>>::serializedSize<false>(*prot_, this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_DOUBLE, 54);
  xfer += prot_->serializedSizeDouble(this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_MAP, 55);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::map<std::vector<int64_t>, std::vector<std::string>>>::serializedSize<false>(*prot_, this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_STRING, 56);
  xfer += prot_->serializedSizeZCBinary(this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_MAP, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int64_t>>::serializedSize<false>(*prot_, this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_STRUCT, 58);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_MAP, 59);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int32_t>>::serializedSize<false>(*prot_, this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_MAP, 60);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>>, std::map<double, std::map<std::string, int32_t>>>::serializedSize<false>(*prot_, this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_I64, 61);
  xfer += prot_->serializedSizeI64(this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_BYTE, 62);
  xfer += prot_->serializedSizeByte(this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_STRUCT, 63);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_BOOL, 64);
  xfer += prot_->serializedSizeBool(this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_SET, 65);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_SET, 66);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_STRUCT, 67);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_I64, 68);
  xfer += prot_->serializedSizeI64(this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_MAP, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int16_t,  ::cpp2::Struct2>>::serializedSize<false>(*prot_, this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_BOOL, 70);
  xfer += prot_->serializedSizeBool(this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_I64, 71);
  xfer += prot_->serializedSizeI64(this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_I64, 72);
  xfer += prot_->serializedSizeI64(this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_STRUCT, 73);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_STRUCT, 74);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSizeZC(prot_, &this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_BYTE, 75);
  xfer += prot_->serializedSizeByte(this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_BOOL, 76);
  xfer += prot_->serializedSizeBool(this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_STRUCT, 77);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_DOUBLE, 78);
  xfer += prot_->serializedSizeDouble(this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_I32, 79);
  xfer += prot_->serializedSizeI32(this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_STRUCT, 80);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_BOOL, 81);
  xfer += prot_->serializedSizeBool(this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_MAP, 82);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int16_t>>::serializedSize<false>(*prot_, this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_FLOAT, 83);
  xfer += prot_->serializedSizeFloat(this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_SET, 84);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_DOUBLE, 85);
  xfer += prot_->serializedSizeDouble(this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_STRING, 86);
  xfer += prot_->serializedSizeString(this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_SET, 87);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_LIST, 88);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_STRING, 89);
  xfer += prot_->serializedSizeZCBinary(this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_STRUCT, 90);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_STRUCT, 91);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_I32, 92);
  xfer += prot_->serializedSizeI32(this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_DOUBLE, 93);
  xfer += prot_->serializedSizeDouble(this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_BYTE, 94);
  xfer += prot_->serializedSizeByte(this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_SET, 95);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_STRUCT, 96);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field96);
  xfer += prot_->serializedFieldSize("field97", apache::thrift::protocol::T_FLOAT, 97);
  xfer += prot_->serializedSizeFloat(this->field97);
  xfer += prot_->serializedFieldSize("field98", apache::thrift::protocol::T_STRUCT, 98);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field98);
  xfer += prot_->serializedFieldSize("field99", apache::thrift::protocol::T_LIST, 99);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field99);
  xfer += prot_->serializedFieldSize("field100", apache::thrift::protocol::T_I16, 100);
  xfer += prot_->serializedSizeI16(this->field100);
  xfer += prot_->serializedFieldSize("field101", apache::thrift::protocol::T_MAP, 101);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<bool, std::string>>::serializedSize<false>(*prot_, this->field101);
  xfer += prot_->serializedFieldSize("field102", apache::thrift::protocol::T_MAP, 102);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int8_t, float>>::serializedSize<false>(*prot_, this->field102);
  xfer += prot_->serializedFieldSize("field103", apache::thrift::protocol::T_STRUCT, 103);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field103);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct6::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct6");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>, std::set<std::vector< ::cpp2::Struct1>>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_BOOL, 3);
  xfer += prot_->writeBool(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->writeByte(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_I64, 5);
  xfer += prot_->writeI64(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_STRING, 7);
  xfer += prot_->writeString(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_I32, 8);
  xfer += prot_->writeI32(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_BYTE, 9);
  xfer += prot_->writeByte(this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_STRUCT, 10);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::write(prot_, &this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_SET, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_MAP, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<bool, double>>::write(*prot_, this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_MAP, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::write(*prot_, this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_BYTE, 14);
  xfer += prot_->writeByte(this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_LIST, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct3>>::write(*prot_, this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_LIST, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct3>>::write(*prot_, this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_FLOAT, 17);
  xfer += prot_->writeFloat(this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_BYTE, 18);
  xfer += prot_->writeByte(this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_DOUBLE, 19);
  xfer += prot_->writeDouble(this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_LIST, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct0>>::write(*prot_, this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_BOOL, 21);
  xfer += prot_->writeBool(this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_MAP, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<bool>, bool>>::write(*prot_, this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_MAP, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int32_t>>::write(*prot_, this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_I64, 24);
  xfer += prot_->writeI64(this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_SET, 25);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::set<std::set<std::string>>>::write(*prot_, this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_STRING, 26);
  xfer += prot_->writeBinary(this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_MAP, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, std::map<std::string,  ::cpp2::Struct3>>::write(*prot_, this->field27);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_MAP, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, ::apache::thrift::type_class::string>, std::map<std::vector<std::map<float, int16_t>>, std::string>>::write(*prot_, this->field28);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field29", apache::thrift::protocol::T_MAP, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int64_t>>::write(*prot_, this->field29);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field30", apache::thrift::protocol::T_SET, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct3>>::write(*prot_, this->field30);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field31", apache::thrift::protocol::T_BYTE, 31);
  xfer += prot_->writeByte(this->field31);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field32", apache::thrift::protocol::T_LIST, 32);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field32);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field33", apache::thrift::protocol::T_BYTE, 33);
  xfer += prot_->writeByte(this->field33);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field34", apache::thrift::protocol::T_STRING, 34);
  xfer += prot_->writeString(this->field34);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field35", apache::thrift::protocol::T_I32, 35);
  xfer += prot_->writeI32(this->field35);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field36", apache::thrift::protocol::T_SET, 36);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field36);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field37", apache::thrift::protocol::T_LIST, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>>, std::vector<std::vector<std::map<float, int16_t>>>>::write(*prot_, this->field37);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field38", apache::thrift::protocol::T_LIST, 38);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field38);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field39", apache::thrift::protocol::T_STRING, 39);
  xfer += prot_->writeBinary(this->field39);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field40", apache::thrift::protocol::T_SET, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field40);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field41", apache::thrift::protocol::T_DOUBLE, 41);
  xfer += prot_->writeDouble(this->field41);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field42", apache::thrift::protocol::T_DOUBLE, 42);
  xfer += prot_->writeDouble(this->field42);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field43", apache::thrift::protocol::T_MAP, 43);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int32_t>>::write(*prot_, this->field43);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field44", apache::thrift::protocol::T_DOUBLE, 44);
  xfer += prot_->writeDouble(this->field44);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field45", apache::thrift::protocol::T_MAP, 45);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::floating_point>>, std::map< ::cpp2::Struct5, std::map< ::cpp2::Struct1, float>>>::write(*prot_, this->field45);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field46", apache::thrift::protocol::T_BOOL, 46);
  xfer += prot_->writeBool(this->field46);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field47", apache::thrift::protocol::T_STRING, 47);
  xfer += prot_->writeBinary(this->field47);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field48", apache::thrift::protocol::T_I32, 48);
  xfer += prot_->writeI32(this->field48);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field49", apache::thrift::protocol::T_STRUCT, 49);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field49);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field50", apache::thrift::protocol::T_SET, 50);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct0>>::write(*prot_, this->field50);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field51", apache::thrift::protocol::T_BYTE, 51);
  xfer += prot_->writeByte(this->field51);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field52", apache::thrift::protocol::T_SET, 52);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field52);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field53", apache::thrift::protocol::T_LIST, 53);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct1>>::write(*prot_, this->field53);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field54", apache::thrift::protocol::T_DOUBLE, 54);
  xfer += prot_->writeDouble(this->field54);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field55", apache::thrift::protocol::T_MAP, 55);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::map<std::vector<int64_t>, std::vector<std::string>>>::write(*prot_, this->field55);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field56", apache::thrift::protocol::T_STRING, 56);
  xfer += prot_->writeBinary(this->field56);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field57", apache::thrift::protocol::T_MAP, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int64_t>>::write(*prot_, this->field57);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field58", apache::thrift::protocol::T_STRUCT, 58);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field58);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field59", apache::thrift::protocol::T_MAP, 59);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int32_t>>::write(*prot_, this->field59);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field60", apache::thrift::protocol::T_MAP, 60);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>>, std::map<double, std::map<std::string, int32_t>>>::write(*prot_, this->field60);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field61", apache::thrift::protocol::T_I64, 61);
  xfer += prot_->writeI64(this->field61);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field62", apache::thrift::protocol::T_BYTE, 62);
  xfer += prot_->writeByte(this->field62);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field63", apache::thrift::protocol::T_STRUCT, 63);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field63);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field64", apache::thrift::protocol::T_BOOL, 64);
  xfer += prot_->writeBool(this->field64);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field65", apache::thrift::protocol::T_SET, 65);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field65);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field66", apache::thrift::protocol::T_SET, 66);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field66);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field67", apache::thrift::protocol::T_STRUCT, 67);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field67);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field68", apache::thrift::protocol::T_I64, 68);
  xfer += prot_->writeI64(this->field68);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field69", apache::thrift::protocol::T_MAP, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int16_t,  ::cpp2::Struct2>>::write(*prot_, this->field69);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field70", apache::thrift::protocol::T_BOOL, 70);
  xfer += prot_->writeBool(this->field70);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field71", apache::thrift::protocol::T_I64, 71);
  xfer += prot_->writeI64(this->field71);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field72", apache::thrift::protocol::T_I64, 72);
  xfer += prot_->writeI64(this->field72);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field73", apache::thrift::protocol::T_STRUCT, 73);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field73);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field74", apache::thrift::protocol::T_STRUCT, 74);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::write(prot_, &this->field74);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field75", apache::thrift::protocol::T_BYTE, 75);
  xfer += prot_->writeByte(this->field75);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field76", apache::thrift::protocol::T_BOOL, 76);
  xfer += prot_->writeBool(this->field76);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field77", apache::thrift::protocol::T_STRUCT, 77);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field77);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field78", apache::thrift::protocol::T_DOUBLE, 78);
  xfer += prot_->writeDouble(this->field78);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field79", apache::thrift::protocol::T_I32, 79);
  xfer += prot_->writeI32(this->field79);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field80", apache::thrift::protocol::T_STRUCT, 80);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field80);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field81", apache::thrift::protocol::T_BOOL, 81);
  xfer += prot_->writeBool(this->field81);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field82", apache::thrift::protocol::T_MAP, 82);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int16_t>>::write(*prot_, this->field82);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field83", apache::thrift::protocol::T_FLOAT, 83);
  xfer += prot_->writeFloat(this->field83);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field84", apache::thrift::protocol::T_SET, 84);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field84);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field85", apache::thrift::protocol::T_DOUBLE, 85);
  xfer += prot_->writeDouble(this->field85);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field86", apache::thrift::protocol::T_STRING, 86);
  xfer += prot_->writeString(this->field86);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field87", apache::thrift::protocol::T_SET, 87);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field87);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field88", apache::thrift::protocol::T_LIST, 88);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field88);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field89", apache::thrift::protocol::T_STRING, 89);
  xfer += prot_->writeBinary(this->field89);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field90", apache::thrift::protocol::T_STRUCT, 90);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field90);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field91", apache::thrift::protocol::T_STRUCT, 91);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field91);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field92", apache::thrift::protocol::T_I32, 92);
  xfer += prot_->writeI32(this->field92);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field93", apache::thrift::protocol::T_DOUBLE, 93);
  xfer += prot_->writeDouble(this->field93);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field94", apache::thrift::protocol::T_BYTE, 94);
  xfer += prot_->writeByte(this->field94);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field95", apache::thrift::protocol::T_SET, 95);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field95);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field96", apache::thrift::protocol::T_STRUCT, 96);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field96);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field97", apache::thrift::protocol::T_FLOAT, 97);
  xfer += prot_->writeFloat(this->field97);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field98", apache::thrift::protocol::T_STRUCT, 98);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field98);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field99", apache::thrift::protocol::T_LIST, 99);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->field99);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field100", apache::thrift::protocol::T_I16, 100);
  xfer += prot_->writeI16(this->field100);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field101", apache::thrift::protocol::T_MAP, 101);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<bool, std::string>>::write(*prot_, this->field101);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field102", apache::thrift::protocol::T_MAP, 102);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int8_t, float>>::write(*prot_, this->field102);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field103", apache::thrift::protocol::T_STRUCT, 103);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field103);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace cpp2 {

template <class Protocol_>
uint32_t Struct7::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field3 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field10 = std::map<float, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>, std::map<float, std::string>>::read(*iprot, this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field15 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field16 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field18 = std::map<int16_t, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int32_t>>::read(*iprot, this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field26 = std::set<std::set<int8_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int8_t>>>::read(*iprot, this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field27);
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field28);
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field29 = std::map<int32_t, std::map<std::set<double>, std::map<int16_t, int32_t>>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>>, std::map<int32_t, std::map<std::set<double>, std::map<int16_t, int32_t>>>>::read(*iprot, this->field29);
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 30:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field30);
          this->__isset.field30 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 31:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field31);
          this->__isset.field31 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 32:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field32 = std::map<std::string, std::set<int8_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<std::string, std::set<int8_t>>>::read(*iprot, this->field32);
          this->__isset.field32 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 33:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field33);
          this->__isset.field33 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 34:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field34);
          this->__isset.field34 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 35:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field35 = std::map<std::vector<int64_t>, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>, std::map<std::vector<int64_t>, std::string>>::read(*iprot, this->field35);
          this->__isset.field35 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 36:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field36);
          this->__isset.field36 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 37:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field37 = std::map<std::map<int64_t, int8_t>, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::map<int64_t, int8_t>, int32_t>>::read(*iprot, this->field37);
          this->__isset.field37 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 38:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field38);
          this->__isset.field38 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 39:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field39 = std::map<std::set<std::vector<int32_t>>, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, ::apache::thrift::type_class::integral>, std::map<std::set<std::vector<int32_t>>, int32_t>>::read(*iprot, this->field39);
          this->__isset.field39 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 40:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field40);
          this->__isset.field40 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 41:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field41);
          this->__isset.field41 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 42:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field42);
          this->__isset.field42 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 43:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field43);
          this->__isset.field43 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 44:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field44);
          this->__isset.field44 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 45:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field45);
          this->__isset.field45 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 46:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field46 = std::map<int32_t, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int32_t>>::read(*iprot, this->field46);
          this->__isset.field46 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 47:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field47);
          this->__isset.field47 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 48:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field48 = std::map<int8_t, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int64_t>>::read(*iprot, this->field48);
          this->__isset.field48 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 49:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field49 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field49);
          this->__isset.field49 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 50:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field50);
          this->__isset.field50 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 51:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field51);
          this->__isset.field51 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 52:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field52);
          this->__isset.field52 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 53:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field53);
          this->__isset.field53 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 54:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field54);
          this->__isset.field54 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 55:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field55 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field55);
          this->__isset.field55 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 56:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field56 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field56);
          this->__isset.field56 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 57:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field57 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field57);
          this->__isset.field57 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 58:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field58);
          this->__isset.field58 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 59:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field59);
          this->__isset.field59 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 60:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field60);
          this->__isset.field60 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 61:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field61);
          this->__isset.field61 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 62:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field62);
          this->__isset.field62 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 63:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field63);
          this->__isset.field63 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 64:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field64);
          this->__isset.field64 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 65:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field65 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field65);
          this->__isset.field65 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 66:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field66);
          this->__isset.field66 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 67:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field67);
          this->__isset.field67 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 68:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field68);
          this->__isset.field68 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 69:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field69 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field69);
          this->__isset.field69 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 70:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field70 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field70);
          this->__isset.field70 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 71:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field71);
          this->__isset.field71 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 72:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field72);
          this->__isset.field72 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 73:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field73 = std::set<std::set<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::set<std::set<std::string>>>::read(*iprot, this->field73);
          this->__isset.field73 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 74:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field74);
          this->__isset.field74 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 75:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field75);
          this->__isset.field75 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 76:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field76);
          this->__isset.field76 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 77:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field77);
          this->__isset.field77 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 78:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field78 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field78);
          this->__isset.field78 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 79:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field79);
          this->__isset.field79 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 80:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field80);
          this->__isset.field80 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 81:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field81);
          this->__isset.field81 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 82:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field82);
          this->__isset.field82 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 83:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field83);
          this->__isset.field83 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 84:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field84);
          this->__isset.field84 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 85:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field85);
          this->__isset.field85 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 86:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field86 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field86);
          this->__isset.field86 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 87:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field87 = std::map< ::cpp2::Struct0, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct0, int64_t>>::read(*iprot, this->field87);
          this->__isset.field87 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 88:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field88);
          this->__isset.field88 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 89:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field89);
          this->__isset.field89 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 90:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field90);
          this->__isset.field90 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 91:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field91 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field91);
          this->__isset.field91 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 92:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field92 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field92);
          this->__isset.field92 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 93:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field93);
          this->__isset.field93 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 94:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field94);
          this->__isset.field94 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 95:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field95);
          this->__isset.field95 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 96:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field96);
          this->__isset.field96 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 97:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field97 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field97);
          this->__isset.field97 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 98:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field98);
          this->__isset.field98 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 99:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field99);
          this->__isset.field99 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 100:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field100 = std::map<int64_t, std::map<std::string, double>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::floating_point>>, std::map<int64_t, std::map<std::string, double>>>::read(*iprot, this->field100);
          this->__isset.field100 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 101:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field101);
          this->__isset.field101 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 102:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field102);
          this->__isset.field102 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 103:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field103);
          this->__isset.field103 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 104:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field104 = std::map<std::string, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::read(*iprot, this->field104);
          this->__isset.field104 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 105:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field105 = std::map<bool, double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<bool, double>>::read(*iprot, this->field105);
          this->__isset.field105 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 106:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field106);
          this->__isset.field106 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 107:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field107);
          this->__isset.field107 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 108:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field108);
          this->__isset.field108 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 109:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field109);
          this->__isset.field109 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct7::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct7");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += prot_->serializedSizeDouble(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_LIST, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->serializedSizeI32(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_BOOL, 6);
  xfer += prot_->serializedSizeBool(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->serializedSizeByte(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->serializedSizeBinary(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_I64, 9);
  xfer += prot_->serializedSizeI64(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>, std::map<float, std::string>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_STRING, 11);
  xfer += prot_->serializedSizeBinary(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_DOUBLE, 12);
  xfer += prot_->serializedSizeDouble(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_FLOAT, 13);
  xfer += prot_->serializedSizeFloat(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_STRING, 14);
  xfer += prot_->serializedSizeBinary(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_LIST, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_SET, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_I16, 17);
  xfer += prot_->serializedSizeI16(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_MAP, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int32_t>>::serializedSize<false>(*prot_, this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_STRING, 19);
  xfer += prot_->serializedSizeBinary(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_BYTE, 20);
  xfer += prot_->serializedSizeByte(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_BYTE, 21);
  xfer += prot_->serializedSizeByte(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_I32, 22);
  xfer += prot_->serializedSizeI32(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_STRING, 23);
  xfer += prot_->serializedSizeString(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_STRUCT, 24);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_FLOAT, 25);
  xfer += prot_->serializedSizeFloat(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_SET, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int8_t>>>::serializedSize<false>(*prot_, this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_BOOL, 27);
  xfer += prot_->serializedSizeBool(this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_STRING, 28);
  xfer += prot_->serializedSizeString(this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_MAP, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>>, std::map<int32_t, std::map<std::set<double>, std::map<int16_t, int32_t>>>>::serializedSize<false>(*prot_, this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_STRUCT, 30);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_DOUBLE, 31);
  xfer += prot_->serializedSizeDouble(this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_MAP, 32);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<std::string, std::set<int8_t>>>::serializedSize<false>(*prot_, this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_BYTE, 33);
  xfer += prot_->serializedSizeByte(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_STRING, 34);
  xfer += prot_->serializedSizeString(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_MAP, 35);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>, std::map<std::vector<int64_t>, std::string>>::serializedSize<false>(*prot_, this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_I32, 36);
  xfer += prot_->serializedSizeI32(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_MAP, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::map<int64_t, int8_t>, int32_t>>::serializedSize<false>(*prot_, this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_STRING, 38);
  xfer += prot_->serializedSizeString(this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_MAP, 39);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, ::apache::thrift::type_class::integral>, std::map<std::set<std::vector<int32_t>>, int32_t>>::serializedSize<false>(*prot_, this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_DOUBLE, 40);
  xfer += prot_->serializedSizeDouble(this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_BOOL, 41);
  xfer += prot_->serializedSizeBool(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_BOOL, 42);
  xfer += prot_->serializedSizeBool(this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_FLOAT, 43);
  xfer += prot_->serializedSizeFloat(this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_STRUCT, 44);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_I64, 45);
  xfer += prot_->serializedSizeI64(this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_MAP, 46);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int32_t>>::serializedSize<false>(*prot_, this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_STRUCT, 47);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_MAP, 48);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int64_t>>::serializedSize<false>(*prot_, this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_SET, 49);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_STRING, 50);
  xfer += prot_->serializedSizeString(this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_BOOL, 51);
  xfer += prot_->serializedSizeBool(this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_I64, 52);
  xfer += prot_->serializedSizeI64(this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_FLOAT, 53);
  xfer += prot_->serializedSizeFloat(this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_STRUCT, 54);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_SET, 55);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_LIST, 56);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_SET, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_STRING, 58);
  xfer += prot_->serializedSizeString(this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_FLOAT, 59);
  xfer += prot_->serializedSizeFloat(this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_STRUCT, 60);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_FLOAT, 61);
  xfer += prot_->serializedSizeFloat(this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_I64, 62);
  xfer += prot_->serializedSizeI64(this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_I16, 63);
  xfer += prot_->serializedSizeI16(this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_I32, 64);
  xfer += prot_->serializedSizeI32(this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_LIST, 65);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_DOUBLE, 66);
  xfer += prot_->serializedSizeDouble(this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_I64, 67);
  xfer += prot_->serializedSizeI64(this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_BYTE, 68);
  xfer += prot_->serializedSizeByte(this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_LIST, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_SET, 70);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_STRUCT, 71);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_STRING, 72);
  xfer += prot_->serializedSizeBinary(this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_SET, 73);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::set<std::set<std::string>>>::serializedSize<false>(*prot_, this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_STRUCT, 74);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_STRING, 75);
  xfer += prot_->serializedSizeBinary(this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_STRUCT, 76);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_BYTE, 77);
  xfer += prot_->serializedSizeByte(this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_SET, 78);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_BOOL, 79);
  xfer += prot_->serializedSizeBool(this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_BYTE, 80);
  xfer += prot_->serializedSizeByte(this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_I16, 81);
  xfer += prot_->serializedSizeI16(this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_DOUBLE, 82);
  xfer += prot_->serializedSizeDouble(this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_I16, 83);
  xfer += prot_->serializedSizeI16(this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_STRING, 84);
  xfer += prot_->serializedSizeBinary(this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_STRUCT, 85);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_LIST, 86);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_MAP, 87);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct0, int64_t>>::serializedSize<false>(*prot_, this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_BYTE, 88);
  xfer += prot_->serializedSizeByte(this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_STRING, 89);
  xfer += prot_->serializedSizeString(this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_STRING, 90);
  xfer += prot_->serializedSizeString(this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_LIST, 91);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_LIST, 92);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_STRING, 93);
  xfer += prot_->serializedSizeString(this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_FLOAT, 94);
  xfer += prot_->serializedSizeFloat(this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_BOOL, 95);
  xfer += prot_->serializedSizeBool(this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_STRING, 96);
  xfer += prot_->serializedSizeString(this->field96);
  xfer += prot_->serializedFieldSize("field97", apache::thrift::protocol::T_LIST, 97);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field97);
  xfer += prot_->serializedFieldSize("field98", apache::thrift::protocol::T_DOUBLE, 98);
  xfer += prot_->serializedSizeDouble(this->field98);
  xfer += prot_->serializedFieldSize("field99", apache::thrift::protocol::T_STRING, 99);
  xfer += prot_->serializedSizeString(this->field99);
  xfer += prot_->serializedFieldSize("field100", apache::thrift::protocol::T_MAP, 100);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::floating_point>>, std::map<int64_t, std::map<std::string, double>>>::serializedSize<false>(*prot_, this->field100);
  xfer += prot_->serializedFieldSize("field101", apache::thrift::protocol::T_FLOAT, 101);
  xfer += prot_->serializedSizeFloat(this->field101);
  xfer += prot_->serializedFieldSize("field102", apache::thrift::protocol::T_STRUCT, 102);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field102);
  xfer += prot_->serializedFieldSize("field103", apache::thrift::protocol::T_I64, 103);
  xfer += prot_->serializedSizeI64(this->field103);
  xfer += prot_->serializedFieldSize("field104", apache::thrift::protocol::T_MAP, 104);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::serializedSize<false>(*prot_, this->field104);
  xfer += prot_->serializedFieldSize("field105", apache::thrift::protocol::T_MAP, 105);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<bool, double>>::serializedSize<false>(*prot_, this->field105);
  xfer += prot_->serializedFieldSize("field106", apache::thrift::protocol::T_BYTE, 106);
  xfer += prot_->serializedSizeByte(this->field106);
  xfer += prot_->serializedFieldSize("field107", apache::thrift::protocol::T_I32, 107);
  xfer += prot_->serializedSizeI32(this->field107);
  xfer += prot_->serializedFieldSize("field108", apache::thrift::protocol::T_BOOL, 108);
  xfer += prot_->serializedSizeBool(this->field108);
  xfer += prot_->serializedFieldSize("field109", apache::thrift::protocol::T_STRUCT, 109);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field109);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct7::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct7");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += prot_->serializedSizeDouble(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_LIST, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->serializedSizeI32(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_BOOL, 6);
  xfer += prot_->serializedSizeBool(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->serializedSizeByte(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->serializedSizeZCBinary(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_I64, 9);
  xfer += prot_->serializedSizeI64(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>, std::map<float, std::string>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_STRING, 11);
  xfer += prot_->serializedSizeZCBinary(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_DOUBLE, 12);
  xfer += prot_->serializedSizeDouble(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_FLOAT, 13);
  xfer += prot_->serializedSizeFloat(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_STRING, 14);
  xfer += prot_->serializedSizeZCBinary(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_LIST, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_SET, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_I16, 17);
  xfer += prot_->serializedSizeI16(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_MAP, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int32_t>>::serializedSize<false>(*prot_, this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_STRING, 19);
  xfer += prot_->serializedSizeZCBinary(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_BYTE, 20);
  xfer += prot_->serializedSizeByte(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_BYTE, 21);
  xfer += prot_->serializedSizeByte(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_I32, 22);
  xfer += prot_->serializedSizeI32(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_STRING, 23);
  xfer += prot_->serializedSizeString(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_STRUCT, 24);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_FLOAT, 25);
  xfer += prot_->serializedSizeFloat(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_SET, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int8_t>>>::serializedSize<false>(*prot_, this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_BOOL, 27);
  xfer += prot_->serializedSizeBool(this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_STRING, 28);
  xfer += prot_->serializedSizeString(this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_MAP, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>>, std::map<int32_t, std::map<std::set<double>, std::map<int16_t, int32_t>>>>::serializedSize<false>(*prot_, this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_STRUCT, 30);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_DOUBLE, 31);
  xfer += prot_->serializedSizeDouble(this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_MAP, 32);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<std::string, std::set<int8_t>>>::serializedSize<false>(*prot_, this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_BYTE, 33);
  xfer += prot_->serializedSizeByte(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_STRING, 34);
  xfer += prot_->serializedSizeString(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_MAP, 35);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>, std::map<std::vector<int64_t>, std::string>>::serializedSize<false>(*prot_, this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_I32, 36);
  xfer += prot_->serializedSizeI32(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_MAP, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::map<int64_t, int8_t>, int32_t>>::serializedSize<false>(*prot_, this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_STRING, 38);
  xfer += prot_->serializedSizeString(this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_MAP, 39);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, ::apache::thrift::type_class::integral>, std::map<std::set<std::vector<int32_t>>, int32_t>>::serializedSize<false>(*prot_, this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_DOUBLE, 40);
  xfer += prot_->serializedSizeDouble(this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_BOOL, 41);
  xfer += prot_->serializedSizeBool(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_BOOL, 42);
  xfer += prot_->serializedSizeBool(this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_FLOAT, 43);
  xfer += prot_->serializedSizeFloat(this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_STRUCT, 44);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_I64, 45);
  xfer += prot_->serializedSizeI64(this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_MAP, 46);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int32_t>>::serializedSize<false>(*prot_, this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_STRUCT, 47);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_MAP, 48);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int64_t>>::serializedSize<false>(*prot_, this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_SET, 49);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_STRING, 50);
  xfer += prot_->serializedSizeString(this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_BOOL, 51);
  xfer += prot_->serializedSizeBool(this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_I64, 52);
  xfer += prot_->serializedSizeI64(this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_FLOAT, 53);
  xfer += prot_->serializedSizeFloat(this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_STRUCT, 54);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_SET, 55);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_LIST, 56);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_SET, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_STRING, 58);
  xfer += prot_->serializedSizeString(this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_FLOAT, 59);
  xfer += prot_->serializedSizeFloat(this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_STRUCT, 60);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_FLOAT, 61);
  xfer += prot_->serializedSizeFloat(this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_I64, 62);
  xfer += prot_->serializedSizeI64(this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_I16, 63);
  xfer += prot_->serializedSizeI16(this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_I32, 64);
  xfer += prot_->serializedSizeI32(this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_LIST, 65);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_DOUBLE, 66);
  xfer += prot_->serializedSizeDouble(this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_I64, 67);
  xfer += prot_->serializedSizeI64(this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_BYTE, 68);
  xfer += prot_->serializedSizeByte(this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_LIST, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_SET, 70);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_STRUCT, 71);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_STRING, 72);
  xfer += prot_->serializedSizeZCBinary(this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_SET, 73);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::set<std::set<std::string>>>::serializedSize<false>(*prot_, this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_STRUCT, 74);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_STRING, 75);
  xfer += prot_->serializedSizeZCBinary(this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_STRUCT, 76);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_BYTE, 77);
  xfer += prot_->serializedSizeByte(this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_SET, 78);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_BOOL, 79);
  xfer += prot_->serializedSizeBool(this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_BYTE, 80);
  xfer += prot_->serializedSizeByte(this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_I16, 81);
  xfer += prot_->serializedSizeI16(this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_DOUBLE, 82);
  xfer += prot_->serializedSizeDouble(this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_I16, 83);
  xfer += prot_->serializedSizeI16(this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_STRING, 84);
  xfer += prot_->serializedSizeZCBinary(this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_STRUCT, 85);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_LIST, 86);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_MAP, 87);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct0, int64_t>>::serializedSize<false>(*prot_, this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_BYTE, 88);
  xfer += prot_->serializedSizeByte(this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_STRING, 89);
  xfer += prot_->serializedSizeString(this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_STRING, 90);
  xfer += prot_->serializedSizeString(this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_LIST, 91);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_LIST, 92);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_STRING, 93);
  xfer += prot_->serializedSizeString(this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_FLOAT, 94);
  xfer += prot_->serializedSizeFloat(this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_BOOL, 95);
  xfer += prot_->serializedSizeBool(this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_STRING, 96);
  xfer += prot_->serializedSizeString(this->field96);
  xfer += prot_->serializedFieldSize("field97", apache::thrift::protocol::T_LIST, 97);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field97);
  xfer += prot_->serializedFieldSize("field98", apache::thrift::protocol::T_DOUBLE, 98);
  xfer += prot_->serializedSizeDouble(this->field98);
  xfer += prot_->serializedFieldSize("field99", apache::thrift::protocol::T_STRING, 99);
  xfer += prot_->serializedSizeString(this->field99);
  xfer += prot_->serializedFieldSize("field100", apache::thrift::protocol::T_MAP, 100);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::floating_point>>, std::map<int64_t, std::map<std::string, double>>>::serializedSize<false>(*prot_, this->field100);
  xfer += prot_->serializedFieldSize("field101", apache::thrift::protocol::T_FLOAT, 101);
  xfer += prot_->serializedSizeFloat(this->field101);
  xfer += prot_->serializedFieldSize("field102", apache::thrift::protocol::T_STRUCT, 102);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field102);
  xfer += prot_->serializedFieldSize("field103", apache::thrift::protocol::T_I64, 103);
  xfer += prot_->serializedSizeI64(this->field103);
  xfer += prot_->serializedFieldSize("field104", apache::thrift::protocol::T_MAP, 104);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::serializedSize<false>(*prot_, this->field104);
  xfer += prot_->serializedFieldSize("field105", apache::thrift::protocol::T_MAP, 105);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<bool, double>>::serializedSize<false>(*prot_, this->field105);
  xfer += prot_->serializedFieldSize("field106", apache::thrift::protocol::T_BYTE, 106);
  xfer += prot_->serializedSizeByte(this->field106);
  xfer += prot_->serializedFieldSize("field107", apache::thrift::protocol::T_I32, 107);
  xfer += prot_->serializedSizeI32(this->field107);
  xfer += prot_->serializedFieldSize("field108", apache::thrift::protocol::T_BOOL, 108);
  xfer += prot_->serializedSizeBool(this->field108);
  xfer += prot_->serializedFieldSize("field109", apache::thrift::protocol::T_STRUCT, 109);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field109);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct7::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct7");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += prot_->writeDouble(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_LIST, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->writeI32(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->writeI32(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_BOOL, 6);
  xfer += prot_->writeBool(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->writeByte(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->writeBinary(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_I64, 9);
  xfer += prot_->writeI64(this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>, std::map<float, std::string>>::write(*prot_, this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_STRING, 11);
  xfer += prot_->writeBinary(this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_DOUBLE, 12);
  xfer += prot_->writeDouble(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_FLOAT, 13);
  xfer += prot_->writeFloat(this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_STRING, 14);
  xfer += prot_->writeBinary(this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_LIST, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_SET, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_I16, 17);
  xfer += prot_->writeI16(this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_MAP, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int32_t>>::write(*prot_, this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_STRING, 19);
  xfer += prot_->writeBinary(this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_BYTE, 20);
  xfer += prot_->writeByte(this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_BYTE, 21);
  xfer += prot_->writeByte(this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_I32, 22);
  xfer += prot_->writeI32(this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_STRING, 23);
  xfer += prot_->writeString(this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_STRUCT, 24);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_FLOAT, 25);
  xfer += prot_->writeFloat(this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_SET, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int8_t>>>::write(*prot_, this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_BOOL, 27);
  xfer += prot_->writeBool(this->field27);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_STRING, 28);
  xfer += prot_->writeString(this->field28);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field29", apache::thrift::protocol::T_MAP, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>>, std::map<int32_t, std::map<std::set<double>, std::map<int16_t, int32_t>>>>::write(*prot_, this->field29);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field30", apache::thrift::protocol::T_STRUCT, 30);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field30);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field31", apache::thrift::protocol::T_DOUBLE, 31);
  xfer += prot_->writeDouble(this->field31);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field32", apache::thrift::protocol::T_MAP, 32);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<std::string, std::set<int8_t>>>::write(*prot_, this->field32);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field33", apache::thrift::protocol::T_BYTE, 33);
  xfer += prot_->writeByte(this->field33);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field34", apache::thrift::protocol::T_STRING, 34);
  xfer += prot_->writeString(this->field34);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field35", apache::thrift::protocol::T_MAP, 35);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>, std::map<std::vector<int64_t>, std::string>>::write(*prot_, this->field35);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field36", apache::thrift::protocol::T_I32, 36);
  xfer += prot_->writeI32(this->field36);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field37", apache::thrift::protocol::T_MAP, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::map<int64_t, int8_t>, int32_t>>::write(*prot_, this->field37);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field38", apache::thrift::protocol::T_STRING, 38);
  xfer += prot_->writeString(this->field38);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field39", apache::thrift::protocol::T_MAP, 39);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, ::apache::thrift::type_class::integral>, std::map<std::set<std::vector<int32_t>>, int32_t>>::write(*prot_, this->field39);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field40", apache::thrift::protocol::T_DOUBLE, 40);
  xfer += prot_->writeDouble(this->field40);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field41", apache::thrift::protocol::T_BOOL, 41);
  xfer += prot_->writeBool(this->field41);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field42", apache::thrift::protocol::T_BOOL, 42);
  xfer += prot_->writeBool(this->field42);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field43", apache::thrift::protocol::T_FLOAT, 43);
  xfer += prot_->writeFloat(this->field43);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field44", apache::thrift::protocol::T_STRUCT, 44);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field44);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field45", apache::thrift::protocol::T_I64, 45);
  xfer += prot_->writeI64(this->field45);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field46", apache::thrift::protocol::T_MAP, 46);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int32_t>>::write(*prot_, this->field46);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field47", apache::thrift::protocol::T_STRUCT, 47);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field47);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field48", apache::thrift::protocol::T_MAP, 48);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int64_t>>::write(*prot_, this->field48);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field49", apache::thrift::protocol::T_SET, 49);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field49);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field50", apache::thrift::protocol::T_STRING, 50);
  xfer += prot_->writeString(this->field50);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field51", apache::thrift::protocol::T_BOOL, 51);
  xfer += prot_->writeBool(this->field51);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field52", apache::thrift::protocol::T_I64, 52);
  xfer += prot_->writeI64(this->field52);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field53", apache::thrift::protocol::T_FLOAT, 53);
  xfer += prot_->writeFloat(this->field53);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field54", apache::thrift::protocol::T_STRUCT, 54);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field54);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field55", apache::thrift::protocol::T_SET, 55);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field55);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field56", apache::thrift::protocol::T_LIST, 56);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field56);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field57", apache::thrift::protocol::T_SET, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field57);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field58", apache::thrift::protocol::T_STRING, 58);
  xfer += prot_->writeString(this->field58);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field59", apache::thrift::protocol::T_FLOAT, 59);
  xfer += prot_->writeFloat(this->field59);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field60", apache::thrift::protocol::T_STRUCT, 60);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field60);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field61", apache::thrift::protocol::T_FLOAT, 61);
  xfer += prot_->writeFloat(this->field61);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field62", apache::thrift::protocol::T_I64, 62);
  xfer += prot_->writeI64(this->field62);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field63", apache::thrift::protocol::T_I16, 63);
  xfer += prot_->writeI16(this->field63);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field64", apache::thrift::protocol::T_I32, 64);
  xfer += prot_->writeI32(this->field64);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field65", apache::thrift::protocol::T_LIST, 65);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field65);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field66", apache::thrift::protocol::T_DOUBLE, 66);
  xfer += prot_->writeDouble(this->field66);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field67", apache::thrift::protocol::T_I64, 67);
  xfer += prot_->writeI64(this->field67);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field68", apache::thrift::protocol::T_BYTE, 68);
  xfer += prot_->writeByte(this->field68);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field69", apache::thrift::protocol::T_LIST, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field69);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field70", apache::thrift::protocol::T_SET, 70);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field70);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field71", apache::thrift::protocol::T_STRUCT, 71);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field71);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field72", apache::thrift::protocol::T_STRING, 72);
  xfer += prot_->writeBinary(this->field72);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field73", apache::thrift::protocol::T_SET, 73);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::set<std::set<std::string>>>::write(*prot_, this->field73);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field74", apache::thrift::protocol::T_STRUCT, 74);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field74);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field75", apache::thrift::protocol::T_STRING, 75);
  xfer += prot_->writeBinary(this->field75);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field76", apache::thrift::protocol::T_STRUCT, 76);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field76);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field77", apache::thrift::protocol::T_BYTE, 77);
  xfer += prot_->writeByte(this->field77);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field78", apache::thrift::protocol::T_SET, 78);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field78);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field79", apache::thrift::protocol::T_BOOL, 79);
  xfer += prot_->writeBool(this->field79);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field80", apache::thrift::protocol::T_BYTE, 80);
  xfer += prot_->writeByte(this->field80);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field81", apache::thrift::protocol::T_I16, 81);
  xfer += prot_->writeI16(this->field81);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field82", apache::thrift::protocol::T_DOUBLE, 82);
  xfer += prot_->writeDouble(this->field82);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field83", apache::thrift::protocol::T_I16, 83);
  xfer += prot_->writeI16(this->field83);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field84", apache::thrift::protocol::T_STRING, 84);
  xfer += prot_->writeBinary(this->field84);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field85", apache::thrift::protocol::T_STRUCT, 85);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field85);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field86", apache::thrift::protocol::T_LIST, 86);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field86);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field87", apache::thrift::protocol::T_MAP, 87);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct0, int64_t>>::write(*prot_, this->field87);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field88", apache::thrift::protocol::T_BYTE, 88);
  xfer += prot_->writeByte(this->field88);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field89", apache::thrift::protocol::T_STRING, 89);
  xfer += prot_->writeString(this->field89);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field90", apache::thrift::protocol::T_STRING, 90);
  xfer += prot_->writeString(this->field90);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field91", apache::thrift::protocol::T_LIST, 91);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field91);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field92", apache::thrift::protocol::T_LIST, 92);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field92);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field93", apache::thrift::protocol::T_STRING, 93);
  xfer += prot_->writeString(this->field93);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field94", apache::thrift::protocol::T_FLOAT, 94);
  xfer += prot_->writeFloat(this->field94);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field95", apache::thrift::protocol::T_BOOL, 95);
  xfer += prot_->writeBool(this->field95);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field96", apache::thrift::protocol::T_STRING, 96);
  xfer += prot_->writeString(this->field96);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field97", apache::thrift::protocol::T_LIST, 97);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field97);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field98", apache::thrift::protocol::T_DOUBLE, 98);
  xfer += prot_->writeDouble(this->field98);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field99", apache::thrift::protocol::T_STRING, 99);
  xfer += prot_->writeString(this->field99);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field100", apache::thrift::protocol::T_MAP, 100);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::floating_point>>, std::map<int64_t, std::map<std::string, double>>>::write(*prot_, this->field100);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field101", apache::thrift::protocol::T_FLOAT, 101);
  xfer += prot_->writeFloat(this->field101);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field102", apache::thrift::protocol::T_STRUCT, 102);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field102);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field103", apache::thrift::protocol::T_I64, 103);
  xfer += prot_->writeI64(this->field103);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field104", apache::thrift::protocol::T_MAP, 104);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::write(*prot_, this->field104);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field105", apache::thrift::protocol::T_MAP, 105);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<bool, double>>::write(*prot_, this->field105);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field106", apache::thrift::protocol::T_BYTE, 106);
  xfer += prot_->writeByte(this->field106);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field107", apache::thrift::protocol::T_I32, 107);
  xfer += prot_->writeI32(this->field107);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field108", apache::thrift::protocol::T_BOOL, 108);
  xfer += prot_->writeBool(this->field108);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field109", apache::thrift::protocol::T_STRUCT, 109);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field109);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace cpp2 {

template <class Protocol_>
uint32_t Struct8::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field1 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field3 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field5 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field7 = std::map<float, std::map<int16_t, int64_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::map<float, std::map<int16_t, int64_t>>>::read(*iprot, this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field8 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field10 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field11 = std::vector< ::cpp2::Struct1>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct1>>::read(*iprot, this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct8::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct8");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_LIST, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I64, 6);
  xfer += prot_->serializedSizeI64(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::map<float, std::map<int16_t, int64_t>>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_FLOAT, 9);
  xfer += prot_->serializedSizeFloat(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_LIST, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct1>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_BYTE, 12);
  xfer += prot_->serializedSizeByte(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_STRUCT, 13);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_I16, 14);
  xfer += prot_->serializedSizeI16(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_I64, 15);
  xfer += prot_->serializedSizeI64(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_STRING, 16);
  xfer += prot_->serializedSizeBinary(this->field16);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct8::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct8");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_LIST, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I64, 6);
  xfer += prot_->serializedSizeI64(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::map<float, std::map<int16_t, int64_t>>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_FLOAT, 9);
  xfer += prot_->serializedSizeFloat(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_LIST, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct1>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_BYTE, 12);
  xfer += prot_->serializedSizeByte(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_STRUCT, 13);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_I16, 14);
  xfer += prot_->serializedSizeI16(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_I64, 15);
  xfer += prot_->serializedSizeI64(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_STRING, 16);
  xfer += prot_->serializedSizeZCBinary(this->field16);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct8::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct8");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_LIST, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_I64, 6);
  xfer += prot_->writeI64(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::map<float, std::map<int16_t, int64_t>>>::write(*prot_, this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_FLOAT, 9);
  xfer += prot_->writeFloat(this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_LIST, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct1>>::write(*prot_, this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_BYTE, 12);
  xfer += prot_->writeByte(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_STRUCT, 13);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_I16, 14);
  xfer += prot_->writeI16(this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_I64, 15);
  xfer += prot_->writeI64(this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_STRING, 16);
  xfer += prot_->writeBinary(this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace cpp2 {

template <class Protocol_>
uint32_t Struct9::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field6 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field7 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field8 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field12 = std::map<int16_t,  ::cpp2::Struct3>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int16_t,  ::cpp2::Struct3>>::read(*iprot, this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field19 = std::vector<std::set<std::vector<double>>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>>, std::vector<std::set<std::vector<double>>>>::read(*iprot, this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field22 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::read(iprot, &this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field27 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field27);
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field28 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field28);
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field29 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field29);
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 30:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field30);
          this->__isset.field30 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 31:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field31 = std::map<double, std::set<int16_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<double, std::set<int16_t>>>::read(*iprot, this->field31);
          this->__isset.field31 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 32:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field32);
          this->__isset.field32 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 33:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field33);
          this->__isset.field33 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 34:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field34 = std::map<bool, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int32_t>>::read(*iprot, this->field34);
          this->__isset.field34 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 35:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field35);
          this->__isset.field35 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 36:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field36 = std::map<int64_t, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int64_t, std::string>>::read(*iprot, this->field36);
          this->__isset.field36 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 37:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field37);
          this->__isset.field37 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 38:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field38);
          this->__isset.field38 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 39:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field39);
          this->__isset.field39 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 40:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field40 = std::set<std::map<bool, int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<bool, int32_t>>>::read(*iprot, this->field40);
          this->__isset.field40 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 41:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field41 = std::map< ::cpp2::Struct2, std::vector<int8_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map< ::cpp2::Struct2, std::vector<int8_t>>>::read(*iprot, this->field41);
          this->__isset.field41 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 42:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field42);
          this->__isset.field42 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 43:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field43);
          this->__isset.field43 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 44:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field44);
          this->__isset.field44 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 45:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field45 = std::map<std::string, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::floating_point>, std::map<std::string, float>>::read(*iprot, this->field45);
          this->__isset.field45 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 46:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field46);
          this->__isset.field46 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 47:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field47);
          this->__isset.field47 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 48:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field48 = std::map<int64_t, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int64_t, std::string>>::read(*iprot, this->field48);
          this->__isset.field48 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 49:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field49);
          this->__isset.field49 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 50:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field50);
          this->__isset.field50 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 51:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field51);
          this->__isset.field51 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 52:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field52 = std::set<std::set<int16_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int16_t>>>::read(*iprot, this->field52);
          this->__isset.field52 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 53:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field53);
          this->__isset.field53 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 54:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field54);
          this->__isset.field54 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 55:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field55 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field55);
          this->__isset.field55 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 56:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field56);
          this->__isset.field56 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 57:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field57);
          this->__isset.field57 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 58:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field58 = std::map<std::map<int64_t, int8_t>, std::map<bool, std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>>, std::map<std::map<int64_t, int8_t>, std::map<bool, std::string>>>::read(*iprot, this->field58);
          this->__isset.field58 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 59:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field59);
          this->__isset.field59 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 60:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field60 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field60);
          this->__isset.field60 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 61:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field61);
          this->__isset.field61 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 62:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field62 = std::map<int16_t, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int16_t, float>>::read(*iprot, this->field62);
          this->__isset.field62 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 63:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field63 = std::set<std::vector<int16_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int16_t>>>::read(*iprot, this->field63);
          this->__isset.field63 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 64:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field64 = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->field64);
          this->__isset.field64 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 65:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field65 = std::map<int64_t,  ::cpp2::Struct1>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int64_t,  ::cpp2::Struct1>>::read(*iprot, this->field65);
          this->__isset.field65 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 66:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field66);
          this->__isset.field66 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 67:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field67);
          this->__isset.field67 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 68:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field68 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field68);
          this->__isset.field68 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 69:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field69 = std::map<std::set< ::cpp2::Struct4>,  ::cpp2::Struct2>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, ::apache::thrift::type_class::structure>, std::map<std::set< ::cpp2::Struct4>,  ::cpp2::Struct2>>::read(*iprot, this->field69);
          this->__isset.field69 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 70:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field70 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field70);
          this->__isset.field70 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 71:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field71 = std::set<std::set<double>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<double>>>::read(*iprot, this->field71);
          this->__isset.field71 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 72:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field72 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field72);
          this->__isset.field72 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct9::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct9");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_FLOAT, 2);
  xfer += prot_->serializedSizeFloat(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_FLOAT, 3);
  xfer += prot_->serializedSizeFloat(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeBinary(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_BYTE, 5);
  xfer += prot_->serializedSizeByte(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_SET, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_I64, 10);
  xfer += prot_->serializedSizeI64(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_FLOAT, 11);
  xfer += prot_->serializedSizeFloat(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_MAP, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int16_t,  ::cpp2::Struct3>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_STRUCT, 13);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_I64, 14);
  xfer += prot_->serializedSizeI64(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_STRUCT, 15);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_STRUCT, 16);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_I32, 17);
  xfer += prot_->serializedSizeI32(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_I32, 18);
  xfer += prot_->serializedSizeI32(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_LIST, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>>, std::vector<std::set<std::vector<double>>>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_DOUBLE, 20);
  xfer += prot_->serializedSizeDouble(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_BOOL, 21);
  xfer += prot_->serializedSizeBool(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_LIST, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_STRUCT, 23);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_STRING, 24);
  xfer += prot_->serializedSizeBinary(this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_DOUBLE, 25);
  xfer += prot_->serializedSizeDouble(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_STRUCT, 26);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSize(prot_, &this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_LIST, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_SET, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_SET, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_DOUBLE, 30);
  xfer += prot_->serializedSizeDouble(this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_MAP, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<double, std::set<int16_t>>>::serializedSize<false>(*prot_, this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_I64, 32);
  xfer += prot_->serializedSizeI64(this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_BYTE, 33);
  xfer += prot_->serializedSizeByte(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_MAP, 34);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int32_t>>::serializedSize<false>(*prot_, this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_BOOL, 35);
  xfer += prot_->serializedSizeBool(this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_MAP, 36);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int64_t, std::string>>::serializedSize<false>(*prot_, this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_BOOL, 37);
  xfer += prot_->serializedSizeBool(this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_FLOAT, 38);
  xfer += prot_->serializedSizeFloat(this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_BYTE, 39);
  xfer += prot_->serializedSizeByte(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_SET, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<bool, int32_t>>>::serializedSize<false>(*prot_, this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_MAP, 41);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map< ::cpp2::Struct2, std::vector<int8_t>>>::serializedSize<false>(*prot_, this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_I32, 42);
  xfer += prot_->serializedSizeI32(this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_STRING, 43);
  xfer += prot_->serializedSizeString(this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_I64, 44);
  xfer += prot_->serializedSizeI64(this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_MAP, 45);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::floating_point>, std::map<std::string, float>>::serializedSize<false>(*prot_, this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_I32, 46);
  xfer += prot_->serializedSizeI32(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_DOUBLE, 47);
  xfer += prot_->serializedSizeDouble(this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_MAP, 48);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int64_t, std::string>>::serializedSize<false>(*prot_, this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_STRUCT, 49);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_I64, 50);
  xfer += prot_->serializedSizeI64(this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_BYTE, 51);
  xfer += prot_->serializedSizeByte(this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_SET, 52);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int16_t>>>::serializedSize<false>(*prot_, this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_I16, 53);
  xfer += prot_->serializedSizeI16(this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_STRUCT, 54);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_LIST, 55);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_STRING, 56);
  xfer += prot_->serializedSizeBinary(this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_STRUCT, 57);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_MAP, 58);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>>, std::map<std::map<int64_t, int8_t>, std::map<bool, std::string>>>::serializedSize<false>(*prot_, this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_STRING, 59);
  xfer += prot_->serializedSizeString(this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_SET, 60);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_I64, 61);
  xfer += prot_->serializedSizeI64(this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_MAP, 62);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int16_t, float>>::serializedSize<false>(*prot_, this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_SET, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int16_t>>>::serializedSize<false>(*prot_, this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_LIST, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_MAP, 65);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int64_t,  ::cpp2::Struct1>>::serializedSize<false>(*prot_, this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_I64, 66);
  xfer += prot_->serializedSizeI64(this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_STRING, 67);
  xfer += prot_->serializedSizeString(this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_SET, 68);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_MAP, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, ::apache::thrift::type_class::structure>, std::map<std::set< ::cpp2::Struct4>,  ::cpp2::Struct2>>::serializedSize<false>(*prot_, this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_SET, 70);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_SET, 71);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<double>>>::serializedSize<false>(*prot_, this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_LIST, 72);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field72);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct9::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct9");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_FLOAT, 2);
  xfer += prot_->serializedSizeFloat(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_FLOAT, 3);
  xfer += prot_->serializedSizeFloat(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeZCBinary(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_BYTE, 5);
  xfer += prot_->serializedSizeByte(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_SET, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_I64, 10);
  xfer += prot_->serializedSizeI64(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_FLOAT, 11);
  xfer += prot_->serializedSizeFloat(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_MAP, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int16_t,  ::cpp2::Struct3>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_STRUCT, 13);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_I64, 14);
  xfer += prot_->serializedSizeI64(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_STRUCT, 15);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_STRUCT, 16);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_I32, 17);
  xfer += prot_->serializedSizeI32(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_I32, 18);
  xfer += prot_->serializedSizeI32(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_LIST, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>>, std::vector<std::set<std::vector<double>>>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_DOUBLE, 20);
  xfer += prot_->serializedSizeDouble(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_BOOL, 21);
  xfer += prot_->serializedSizeBool(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_LIST, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_STRUCT, 23);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_STRING, 24);
  xfer += prot_->serializedSizeZCBinary(this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_DOUBLE, 25);
  xfer += prot_->serializedSizeDouble(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_STRUCT, 26);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSizeZC(prot_, &this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_LIST, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_SET, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_SET, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_DOUBLE, 30);
  xfer += prot_->serializedSizeDouble(this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_MAP, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<double, std::set<int16_t>>>::serializedSize<false>(*prot_, this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_I64, 32);
  xfer += prot_->serializedSizeI64(this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_BYTE, 33);
  xfer += prot_->serializedSizeByte(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_MAP, 34);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int32_t>>::serializedSize<false>(*prot_, this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_BOOL, 35);
  xfer += prot_->serializedSizeBool(this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_MAP, 36);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int64_t, std::string>>::serializedSize<false>(*prot_, this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_BOOL, 37);
  xfer += prot_->serializedSizeBool(this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_FLOAT, 38);
  xfer += prot_->serializedSizeFloat(this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_BYTE, 39);
  xfer += prot_->serializedSizeByte(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_SET, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<bool, int32_t>>>::serializedSize<false>(*prot_, this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_MAP, 41);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map< ::cpp2::Struct2, std::vector<int8_t>>>::serializedSize<false>(*prot_, this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_I32, 42);
  xfer += prot_->serializedSizeI32(this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_STRING, 43);
  xfer += prot_->serializedSizeString(this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_I64, 44);
  xfer += prot_->serializedSizeI64(this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_MAP, 45);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::floating_point>, std::map<std::string, float>>::serializedSize<false>(*prot_, this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_I32, 46);
  xfer += prot_->serializedSizeI32(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_DOUBLE, 47);
  xfer += prot_->serializedSizeDouble(this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_MAP, 48);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int64_t, std::string>>::serializedSize<false>(*prot_, this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_STRUCT, 49);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_I64, 50);
  xfer += prot_->serializedSizeI64(this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_BYTE, 51);
  xfer += prot_->serializedSizeByte(this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_SET, 52);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int16_t>>>::serializedSize<false>(*prot_, this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_I16, 53);
  xfer += prot_->serializedSizeI16(this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_STRUCT, 54);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_LIST, 55);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_STRING, 56);
  xfer += prot_->serializedSizeZCBinary(this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_STRUCT, 57);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_MAP, 58);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>>, std::map<std::map<int64_t, int8_t>, std::map<bool, std::string>>>::serializedSize<false>(*prot_, this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_STRING, 59);
  xfer += prot_->serializedSizeString(this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_SET, 60);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_I64, 61);
  xfer += prot_->serializedSizeI64(this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_MAP, 62);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int16_t, float>>::serializedSize<false>(*prot_, this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_SET, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int16_t>>>::serializedSize<false>(*prot_, this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_LIST, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_MAP, 65);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int64_t,  ::cpp2::Struct1>>::serializedSize<false>(*prot_, this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_I64, 66);
  xfer += prot_->serializedSizeI64(this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_STRING, 67);
  xfer += prot_->serializedSizeString(this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_SET, 68);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_MAP, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, ::apache::thrift::type_class::structure>, std::map<std::set< ::cpp2::Struct4>,  ::cpp2::Struct2>>::serializedSize<false>(*prot_, this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_SET, 70);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_SET, 71);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<double>>>::serializedSize<false>(*prot_, this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_LIST, 72);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field72);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct9::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct9");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_FLOAT, 2);
  xfer += prot_->writeFloat(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_FLOAT, 3);
  xfer += prot_->writeFloat(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->writeBinary(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_BYTE, 5);
  xfer += prot_->writeByte(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_SET, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_I64, 10);
  xfer += prot_->writeI64(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_FLOAT, 11);
  xfer += prot_->writeFloat(this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_MAP, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int16_t,  ::cpp2::Struct3>>::write(*prot_, this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_STRUCT, 13);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_I64, 14);
  xfer += prot_->writeI64(this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_STRUCT, 15);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_STRUCT, 16);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_I32, 17);
  xfer += prot_->writeI32(this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_I32, 18);
  xfer += prot_->writeI32(this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_LIST, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>>, std::vector<std::set<std::vector<double>>>>::write(*prot_, this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_DOUBLE, 20);
  xfer += prot_->writeDouble(this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_BOOL, 21);
  xfer += prot_->writeBool(this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_LIST, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_STRUCT, 23);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_STRING, 24);
  xfer += prot_->writeBinary(this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_DOUBLE, 25);
  xfer += prot_->writeDouble(this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_STRUCT, 26);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::write(prot_, &this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_LIST, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field27);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_SET, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field28);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field29", apache::thrift::protocol::T_SET, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field29);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field30", apache::thrift::protocol::T_DOUBLE, 30);
  xfer += prot_->writeDouble(this->field30);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field31", apache::thrift::protocol::T_MAP, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<double, std::set<int16_t>>>::write(*prot_, this->field31);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field32", apache::thrift::protocol::T_I64, 32);
  xfer += prot_->writeI64(this->field32);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field33", apache::thrift::protocol::T_BYTE, 33);
  xfer += prot_->writeByte(this->field33);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field34", apache::thrift::protocol::T_MAP, 34);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int32_t>>::write(*prot_, this->field34);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field35", apache::thrift::protocol::T_BOOL, 35);
  xfer += prot_->writeBool(this->field35);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field36", apache::thrift::protocol::T_MAP, 36);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int64_t, std::string>>::write(*prot_, this->field36);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field37", apache::thrift::protocol::T_BOOL, 37);
  xfer += prot_->writeBool(this->field37);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field38", apache::thrift::protocol::T_FLOAT, 38);
  xfer += prot_->writeFloat(this->field38);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field39", apache::thrift::protocol::T_BYTE, 39);
  xfer += prot_->writeByte(this->field39);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field40", apache::thrift::protocol::T_SET, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<bool, int32_t>>>::write(*prot_, this->field40);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field41", apache::thrift::protocol::T_MAP, 41);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map< ::cpp2::Struct2, std::vector<int8_t>>>::write(*prot_, this->field41);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field42", apache::thrift::protocol::T_I32, 42);
  xfer += prot_->writeI32(this->field42);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field43", apache::thrift::protocol::T_STRING, 43);
  xfer += prot_->writeString(this->field43);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field44", apache::thrift::protocol::T_I64, 44);
  xfer += prot_->writeI64(this->field44);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field45", apache::thrift::protocol::T_MAP, 45);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::floating_point>, std::map<std::string, float>>::write(*prot_, this->field45);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field46", apache::thrift::protocol::T_I32, 46);
  xfer += prot_->writeI32(this->field46);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field47", apache::thrift::protocol::T_DOUBLE, 47);
  xfer += prot_->writeDouble(this->field47);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field48", apache::thrift::protocol::T_MAP, 48);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int64_t, std::string>>::write(*prot_, this->field48);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field49", apache::thrift::protocol::T_STRUCT, 49);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field49);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field50", apache::thrift::protocol::T_I64, 50);
  xfer += prot_->writeI64(this->field50);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field51", apache::thrift::protocol::T_BYTE, 51);
  xfer += prot_->writeByte(this->field51);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field52", apache::thrift::protocol::T_SET, 52);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int16_t>>>::write(*prot_, this->field52);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field53", apache::thrift::protocol::T_I16, 53);
  xfer += prot_->writeI16(this->field53);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field54", apache::thrift::protocol::T_STRUCT, 54);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field54);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field55", apache::thrift::protocol::T_LIST, 55);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field55);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field56", apache::thrift::protocol::T_STRING, 56);
  xfer += prot_->writeBinary(this->field56);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field57", apache::thrift::protocol::T_STRUCT, 57);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field57);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field58", apache::thrift::protocol::T_MAP, 58);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>>, std::map<std::map<int64_t, int8_t>, std::map<bool, std::string>>>::write(*prot_, this->field58);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field59", apache::thrift::protocol::T_STRING, 59);
  xfer += prot_->writeString(this->field59);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field60", apache::thrift::protocol::T_SET, 60);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field60);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field61", apache::thrift::protocol::T_I64, 61);
  xfer += prot_->writeI64(this->field61);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field62", apache::thrift::protocol::T_MAP, 62);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int16_t, float>>::write(*prot_, this->field62);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field63", apache::thrift::protocol::T_SET, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int16_t>>>::write(*prot_, this->field63);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field64", apache::thrift::protocol::T_LIST, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->field64);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field65", apache::thrift::protocol::T_MAP, 65);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int64_t,  ::cpp2::Struct1>>::write(*prot_, this->field65);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field66", apache::thrift::protocol::T_I64, 66);
  xfer += prot_->writeI64(this->field66);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field67", apache::thrift::protocol::T_STRING, 67);
  xfer += prot_->writeString(this->field67);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field68", apache::thrift::protocol::T_SET, 68);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field68);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field69", apache::thrift::protocol::T_MAP, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, ::apache::thrift::type_class::structure>, std::map<std::set< ::cpp2::Struct4>,  ::cpp2::Struct2>>::write(*prot_, this->field69);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field70", apache::thrift::protocol::T_SET, 70);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field70);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field71", apache::thrift::protocol::T_SET, 71);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<double>>>::write(*prot_, this->field71);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field72", apache::thrift::protocol::T_LIST, 72);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field72);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace cpp2 {

template <class Protocol_>
uint32_t Struct10::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field4 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field5 = std::map<int8_t, std::map<double, bool>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::map<int8_t, std::map<double, bool>>>::read(*iprot, this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field8 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field16 = std::set<std::vector<bool>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<bool>>>::read(*iprot, this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field17 = std::map< ::cpp2::Struct1, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct1, int64_t>>::read(*iprot, this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::read(iprot, &this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field19 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field21 = std::vector<std::map<int32_t, std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>>, std::vector<std::map<int32_t, std::string>>>::read(*iprot, this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field24 = std::map<int64_t, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, bool>>::read(*iprot, this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field27 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field27);
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field28 = std::map<std::string, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::string>, std::map<std::string, std::string>>::read(*iprot, this->field28);
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field29);
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 30:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field30 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field30);
          this->__isset.field30 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 31:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::read(iprot, &this->field31);
          this->__isset.field31 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 32:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field32 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field32);
          this->__isset.field32 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 33:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field33);
          this->__isset.field33 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 34:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field34);
          this->__isset.field34 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 35:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field35 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field35);
          this->__isset.field35 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 36:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field36);
          this->__isset.field36 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 37:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field37 = std::map<std::string, std::map<int32_t, std::map<double, std::string>>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>>>, std::map<std::string, std::map<int32_t, std::map<double, std::string>>>>::read(*iprot, this->field37);
          this->__isset.field37 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 38:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field38 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field38);
          this->__isset.field38 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 39:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field39);
          this->__isset.field39 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 40:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field40 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field40);
          this->__isset.field40 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 41:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field41);
          this->__isset.field41 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 42:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field42);
          this->__isset.field42 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 43:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field43);
          this->__isset.field43 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 44:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field44);
          this->__isset.field44 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 45:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field45);
          this->__isset.field45 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 46:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field46);
          this->__isset.field46 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 47:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field47 = std::vector<std::map<double, std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>>, std::vector<std::map<double, std::string>>>::read(*iprot, this->field47);
          this->__isset.field47 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 48:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field48);
          this->__isset.field48 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 49:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field49 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field49);
          this->__isset.field49 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 50:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field50 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field50);
          this->__isset.field50 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 51:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::read(iprot, &this->field51);
          this->__isset.field51 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 52:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field52);
          this->__isset.field52 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 53:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field53);
          this->__isset.field53 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 54:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field54);
          this->__isset.field54 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 55:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field55);
          this->__isset.field55 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 56:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field56);
          this->__isset.field56 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 57:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field57 = std::map<int32_t,  ::cpp2::Struct0>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int32_t,  ::cpp2::Struct0>>::read(*iprot, this->field57);
          this->__isset.field57 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 58:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field58);
          this->__isset.field58 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 59:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field59);
          this->__isset.field59 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 60:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field60 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field60);
          this->__isset.field60 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 61:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field61);
          this->__isset.field61 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 62:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field62);
          this->__isset.field62 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 63:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field63 = std::map<float, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, float>>::read(*iprot, this->field63);
          this->__isset.field63 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 64:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field64 = std::map<float, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int8_t>>::read(*iprot, this->field64);
          this->__isset.field64 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 65:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field65 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field65);
          this->__isset.field65 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 66:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field66);
          this->__isset.field66 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 67:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field67 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field67);
          this->__isset.field67 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 68:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field68 = std::vector< ::cpp2::Struct0>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct0>>::read(*iprot, this->field68);
          this->__isset.field68 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 69:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field69 = std::set< ::cpp2::Struct1>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct1>>::read(*iprot, this->field69);
          this->__isset.field69 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 70:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field70 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field70);
          this->__isset.field70 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 71:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field71);
          this->__isset.field71 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 72:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::read(iprot, &this->field72);
          this->__isset.field72 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 73:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::read(iprot, &this->field73);
          this->__isset.field73 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 74:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field74 = std::map< ::cpp2::Struct2, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::binary>, std::map< ::cpp2::Struct2, std::string>>::read(*iprot, this->field74);
          this->__isset.field74 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 75:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field75);
          this->__isset.field75 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 76:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field76);
          this->__isset.field76 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 77:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field77 = std::map<int16_t, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int16_t, std::string>>::read(*iprot, this->field77);
          this->__isset.field77 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 78:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field78 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field78);
          this->__isset.field78 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 79:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field79 = std::map<bool, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int64_t>>::read(*iprot, this->field79);
          this->__isset.field79 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 80:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field80 = std::map< ::cpp2::Struct3, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct3, bool>>::read(*iprot, this->field80);
          this->__isset.field80 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 81:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::read(iprot, &this->field81);
          this->__isset.field81 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 82:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field82);
          this->__isset.field82 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 83:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::read(iprot, &this->field83);
          this->__isset.field83 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 84:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field84 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field84);
          this->__isset.field84 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 85:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field85);
          this->__isset.field85 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 86:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field86);
          this->__isset.field86 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 87:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field87);
          this->__isset.field87 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 88:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field88 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field88);
          this->__isset.field88 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 89:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field89);
          this->__isset.field89 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 90:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field90 = std::map< ::cpp2::Struct1, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct1, int16_t>>::read(*iprot, this->field90);
          this->__isset.field90 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 91:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field91);
          this->__isset.field91 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 92:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field92 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field92);
          this->__isset.field92 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 93:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field93 = std::map<float, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int64_t>>::read(*iprot, this->field93);
          this->__isset.field93 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 94:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field94 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field94);
          this->__isset.field94 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 95:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field95 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field95);
          this->__isset.field95 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 96:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field96);
          this->__isset.field96 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 97:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field97);
          this->__isset.field97 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 98:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::read(iprot, &this->field98);
          this->__isset.field98 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 99:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field99 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field99);
          this->__isset.field99 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 100:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field100);
          this->__isset.field100 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 101:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field101 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field101);
          this->__isset.field101 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 102:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field102 = std::map<std::string, std::set<double>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<std::string, std::set<double>>>::read(*iprot, this->field102);
          this->__isset.field102 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct10::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct10");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->serializedSizeDouble(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_FLOAT, 3);
  xfer += prot_->serializedSizeFloat(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_SET, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::map<int8_t, std::map<double, bool>>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_STRING, 6);
  xfer += prot_->serializedSizeBinary(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_DOUBLE, 7);
  xfer += prot_->serializedSizeDouble(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_STRING, 10);
  xfer += prot_->serializedSizeBinary(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_I32, 11);
  xfer += prot_->serializedSizeI32(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_STRUCT, 12);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_DOUBLE, 13);
  xfer += prot_->serializedSizeDouble(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_I16, 14);
  xfer += prot_->serializedSizeI16(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_STRUCT, 15);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_SET, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<bool>>>::serializedSize<false>(*prot_, this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct1, int64_t>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_STRUCT, 18);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSize(prot_, &this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_LIST, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_DOUBLE, 20);
  xfer += prot_->serializedSizeDouble(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_LIST, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>>, std::vector<std::map<int32_t, std::string>>>::serializedSize<false>(*prot_, this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_STRING, 22);
  xfer += prot_->serializedSizeString(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_FLOAT, 23);
  xfer += prot_->serializedSizeFloat(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_MAP, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, bool>>::serializedSize<false>(*prot_, this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_I64, 25);
  xfer += prot_->serializedSizeI64(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_I16, 26);
  xfer += prot_->serializedSizeI16(this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_LIST, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_MAP, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::string>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_I16, 29);
  xfer += prot_->serializedSizeI16(this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_SET, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_STRUCT, 31);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSize(prot_, &this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_SET, 32);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_BYTE, 33);
  xfer += prot_->serializedSizeByte(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_I64, 34);
  xfer += prot_->serializedSizeI64(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_LIST, 35);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_DOUBLE, 36);
  xfer += prot_->serializedSizeDouble(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_MAP, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>>>, std::map<std::string, std::map<int32_t, std::map<double, std::string>>>>::serializedSize<false>(*prot_, this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_SET, 38);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_BOOL, 39);
  xfer += prot_->serializedSizeBool(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_SET, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_BOOL, 41);
  xfer += prot_->serializedSizeBool(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_DOUBLE, 42);
  xfer += prot_->serializedSizeDouble(this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_DOUBLE, 43);
  xfer += prot_->serializedSizeDouble(this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_DOUBLE, 44);
  xfer += prot_->serializedSizeDouble(this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_STRING, 45);
  xfer += prot_->serializedSizeBinary(this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_I16, 46);
  xfer += prot_->serializedSizeI16(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_LIST, 47);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>>, std::vector<std::map<double, std::string>>>::serializedSize<false>(*prot_, this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_STRUCT, 48);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_LIST, 49);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_SET, 50);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_STRUCT, 51);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSize(prot_, &this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_STRUCT, 52);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_STRUCT, 53);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_DOUBLE, 54);
  xfer += prot_->serializedSizeDouble(this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_BYTE, 55);
  xfer += prot_->serializedSizeByte(this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_I64, 56);
  xfer += prot_->serializedSizeI64(this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_MAP, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int32_t,  ::cpp2::Struct0>>::serializedSize<false>(*prot_, this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_I64, 58);
  xfer += prot_->serializedSizeI64(this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_I16, 59);
  xfer += prot_->serializedSizeI16(this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_SET, 60);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_DOUBLE, 61);
  xfer += prot_->serializedSizeDouble(this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_STRUCT, 62);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_MAP, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, float>>::serializedSize<false>(*prot_, this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_MAP, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int8_t>>::serializedSize<false>(*prot_, this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_LIST, 65);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_BOOL, 66);
  xfer += prot_->serializedSizeBool(this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_LIST, 67);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_LIST, 68);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct0>>::serializedSize<false>(*prot_, this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_SET, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct1>>::serializedSize<false>(*prot_, this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_LIST, 70);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_I16, 71);
  xfer += prot_->serializedSizeI16(this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_STRUCT, 72);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSize(prot_, &this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_STRUCT, 73);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSize(prot_, &this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_MAP, 74);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::binary>, std::map< ::cpp2::Struct2, std::string>>::serializedSize<false>(*prot_, this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_I64, 75);
  xfer += prot_->serializedSizeI64(this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_STRING, 76);
  xfer += prot_->serializedSizeString(this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_MAP, 77);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int16_t, std::string>>::serializedSize<false>(*prot_, this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_SET, 78);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_MAP, 79);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int64_t>>::serializedSize<false>(*prot_, this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_MAP, 80);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct3, bool>>::serializedSize<false>(*prot_, this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_STRUCT, 81);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSize(prot_, &this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_BOOL, 82);
  xfer += prot_->serializedSizeBool(this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_STRUCT, 83);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSize(prot_, &this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_LIST, 84);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_BOOL, 85);
  xfer += prot_->serializedSizeBool(this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_STRUCT, 86);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_I16, 87);
  xfer += prot_->serializedSizeI16(this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_SET, 88);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_STRUCT, 89);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_MAP, 90);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct1, int16_t>>::serializedSize<false>(*prot_, this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_BOOL, 91);
  xfer += prot_->serializedSizeBool(this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_SET, 92);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_MAP, 93);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int64_t>>::serializedSize<false>(*prot_, this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_LIST, 94);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_SET, 95);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_STRING, 96);
  xfer += prot_->serializedSizeBinary(this->field96);
  xfer += prot_->serializedFieldSize("field97", apache::thrift::protocol::T_I16, 97);
  xfer += prot_->serializedSizeI16(this->field97);
  xfer += prot_->serializedFieldSize("field98", apache::thrift::protocol::T_STRUCT, 98);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSize(prot_, &this->field98);
  xfer += prot_->serializedFieldSize("field99", apache::thrift::protocol::T_SET, 99);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field99);
  xfer += prot_->serializedFieldSize("field100", apache::thrift::protocol::T_STRING, 100);
  xfer += prot_->serializedSizeString(this->field100);
  xfer += prot_->serializedFieldSize("field101", apache::thrift::protocol::T_SET, 101);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field101);
  xfer += prot_->serializedFieldSize("field102", apache::thrift::protocol::T_MAP, 102);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<std::string, std::set<double>>>::serializedSize<false>(*prot_, this->field102);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct10::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct10");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeString(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->serializedSizeDouble(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_FLOAT, 3);
  xfer += prot_->serializedSizeFloat(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_SET, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::map<int8_t, std::map<double, bool>>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_STRING, 6);
  xfer += prot_->serializedSizeZCBinary(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_DOUBLE, 7);
  xfer += prot_->serializedSizeDouble(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_STRING, 10);
  xfer += prot_->serializedSizeZCBinary(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_I32, 11);
  xfer += prot_->serializedSizeI32(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_STRUCT, 12);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_DOUBLE, 13);
  xfer += prot_->serializedSizeDouble(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_I16, 14);
  xfer += prot_->serializedSizeI16(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_STRUCT, 15);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_SET, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<bool>>>::serializedSize<false>(*prot_, this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct1, int64_t>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_STRUCT, 18);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSizeZC(prot_, &this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_LIST, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_DOUBLE, 20);
  xfer += prot_->serializedSizeDouble(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_LIST, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>>, std::vector<std::map<int32_t, std::string>>>::serializedSize<false>(*prot_, this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_STRING, 22);
  xfer += prot_->serializedSizeString(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_FLOAT, 23);
  xfer += prot_->serializedSizeFloat(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_MAP, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, bool>>::serializedSize<false>(*prot_, this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_I64, 25);
  xfer += prot_->serializedSizeI64(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_I16, 26);
  xfer += prot_->serializedSizeI16(this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_LIST, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_MAP, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::string>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_I16, 29);
  xfer += prot_->serializedSizeI16(this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_SET, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_STRUCT, 31);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSizeZC(prot_, &this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_SET, 32);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_BYTE, 33);
  xfer += prot_->serializedSizeByte(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_I64, 34);
  xfer += prot_->serializedSizeI64(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_LIST, 35);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_DOUBLE, 36);
  xfer += prot_->serializedSizeDouble(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_MAP, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>>>, std::map<std::string, std::map<int32_t, std::map<double, std::string>>>>::serializedSize<false>(*prot_, this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_SET, 38);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_BOOL, 39);
  xfer += prot_->serializedSizeBool(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_SET, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_BOOL, 41);
  xfer += prot_->serializedSizeBool(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_DOUBLE, 42);
  xfer += prot_->serializedSizeDouble(this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_DOUBLE, 43);
  xfer += prot_->serializedSizeDouble(this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_DOUBLE, 44);
  xfer += prot_->serializedSizeDouble(this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_STRING, 45);
  xfer += prot_->serializedSizeZCBinary(this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_I16, 46);
  xfer += prot_->serializedSizeI16(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_LIST, 47);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>>, std::vector<std::map<double, std::string>>>::serializedSize<false>(*prot_, this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_STRUCT, 48);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_LIST, 49);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_SET, 50);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_STRUCT, 51);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSizeZC(prot_, &this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_STRUCT, 52);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_STRUCT, 53);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_DOUBLE, 54);
  xfer += prot_->serializedSizeDouble(this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_BYTE, 55);
  xfer += prot_->serializedSizeByte(this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_I64, 56);
  xfer += prot_->serializedSizeI64(this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_MAP, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int32_t,  ::cpp2::Struct0>>::serializedSize<false>(*prot_, this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_I64, 58);
  xfer += prot_->serializedSizeI64(this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_I16, 59);
  xfer += prot_->serializedSizeI16(this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_SET, 60);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_DOUBLE, 61);
  xfer += prot_->serializedSizeDouble(this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_STRUCT, 62);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_MAP, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, float>>::serializedSize<false>(*prot_, this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_MAP, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int8_t>>::serializedSize<false>(*prot_, this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_LIST, 65);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_BOOL, 66);
  xfer += prot_->serializedSizeBool(this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_LIST, 67);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_LIST, 68);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct0>>::serializedSize<false>(*prot_, this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_SET, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct1>>::serializedSize<false>(*prot_, this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_LIST, 70);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_I16, 71);
  xfer += prot_->serializedSizeI16(this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_STRUCT, 72);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSizeZC(prot_, &this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_STRUCT, 73);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSizeZC(prot_, &this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_MAP, 74);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::binary>, std::map< ::cpp2::Struct2, std::string>>::serializedSize<false>(*prot_, this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_I64, 75);
  xfer += prot_->serializedSizeI64(this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_STRING, 76);
  xfer += prot_->serializedSizeString(this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_MAP, 77);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int16_t, std::string>>::serializedSize<false>(*prot_, this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_SET, 78);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_MAP, 79);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int64_t>>::serializedSize<false>(*prot_, this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_MAP, 80);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct3, bool>>::serializedSize<false>(*prot_, this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_STRUCT, 81);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSizeZC(prot_, &this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_BOOL, 82);
  xfer += prot_->serializedSizeBool(this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_STRUCT, 83);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSizeZC(prot_, &this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_LIST, 84);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_BOOL, 85);
  xfer += prot_->serializedSizeBool(this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_STRUCT, 86);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_I16, 87);
  xfer += prot_->serializedSizeI16(this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_SET, 88);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_STRUCT, 89);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_MAP, 90);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct1, int16_t>>::serializedSize<false>(*prot_, this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_BOOL, 91);
  xfer += prot_->serializedSizeBool(this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_SET, 92);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_MAP, 93);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int64_t>>::serializedSize<false>(*prot_, this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_LIST, 94);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_SET, 95);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_STRING, 96);
  xfer += prot_->serializedSizeZCBinary(this->field96);
  xfer += prot_->serializedFieldSize("field97", apache::thrift::protocol::T_I16, 97);
  xfer += prot_->serializedSizeI16(this->field97);
  xfer += prot_->serializedFieldSize("field98", apache::thrift::protocol::T_STRUCT, 98);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSizeZC(prot_, &this->field98);
  xfer += prot_->serializedFieldSize("field99", apache::thrift::protocol::T_SET, 99);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field99);
  xfer += prot_->serializedFieldSize("field100", apache::thrift::protocol::T_STRING, 100);
  xfer += prot_->serializedSizeString(this->field100);
  xfer += prot_->serializedFieldSize("field101", apache::thrift::protocol::T_SET, 101);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field101);
  xfer += prot_->serializedFieldSize("field102", apache::thrift::protocol::T_MAP, 102);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<std::string, std::set<double>>>::serializedSize<false>(*prot_, this->field102);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct10::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct10");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeString(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->writeDouble(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_FLOAT, 3);
  xfer += prot_->writeFloat(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_SET, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::map<int8_t, std::map<double, bool>>>::write(*prot_, this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_STRING, 6);
  xfer += prot_->writeBinary(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_DOUBLE, 7);
  xfer += prot_->writeDouble(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_STRING, 10);
  xfer += prot_->writeBinary(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_I32, 11);
  xfer += prot_->writeI32(this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_STRUCT, 12);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_DOUBLE, 13);
  xfer += prot_->writeDouble(this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_I16, 14);
  xfer += prot_->writeI16(this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_STRUCT, 15);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_SET, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<bool>>>::write(*prot_, this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct1, int64_t>>::write(*prot_, this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_STRUCT, 18);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::write(prot_, &this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_LIST, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_DOUBLE, 20);
  xfer += prot_->writeDouble(this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_LIST, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>>, std::vector<std::map<int32_t, std::string>>>::write(*prot_, this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_STRING, 22);
  xfer += prot_->writeString(this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_FLOAT, 23);
  xfer += prot_->writeFloat(this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_MAP, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, bool>>::write(*prot_, this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_I64, 25);
  xfer += prot_->writeI64(this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_I16, 26);
  xfer += prot_->writeI16(this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_LIST, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field27);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_MAP, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::string>, std::map<std::string, std::string>>::write(*prot_, this->field28);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field29", apache::thrift::protocol::T_I16, 29);
  xfer += prot_->writeI16(this->field29);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field30", apache::thrift::protocol::T_SET, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field30);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field31", apache::thrift::protocol::T_STRUCT, 31);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::write(prot_, &this->field31);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field32", apache::thrift::protocol::T_SET, 32);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field32);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field33", apache::thrift::protocol::T_BYTE, 33);
  xfer += prot_->writeByte(this->field33);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field34", apache::thrift::protocol::T_I64, 34);
  xfer += prot_->writeI64(this->field34);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field35", apache::thrift::protocol::T_LIST, 35);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field35);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field36", apache::thrift::protocol::T_DOUBLE, 36);
  xfer += prot_->writeDouble(this->field36);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field37", apache::thrift::protocol::T_MAP, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>>>, std::map<std::string, std::map<int32_t, std::map<double, std::string>>>>::write(*prot_, this->field37);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field38", apache::thrift::protocol::T_SET, 38);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field38);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field39", apache::thrift::protocol::T_BOOL, 39);
  xfer += prot_->writeBool(this->field39);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field40", apache::thrift::protocol::T_SET, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field40);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field41", apache::thrift::protocol::T_BOOL, 41);
  xfer += prot_->writeBool(this->field41);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field42", apache::thrift::protocol::T_DOUBLE, 42);
  xfer += prot_->writeDouble(this->field42);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field43", apache::thrift::protocol::T_DOUBLE, 43);
  xfer += prot_->writeDouble(this->field43);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field44", apache::thrift::protocol::T_DOUBLE, 44);
  xfer += prot_->writeDouble(this->field44);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field45", apache::thrift::protocol::T_STRING, 45);
  xfer += prot_->writeBinary(this->field45);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field46", apache::thrift::protocol::T_I16, 46);
  xfer += prot_->writeI16(this->field46);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field47", apache::thrift::protocol::T_LIST, 47);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>>, std::vector<std::map<double, std::string>>>::write(*prot_, this->field47);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field48", apache::thrift::protocol::T_STRUCT, 48);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field48);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field49", apache::thrift::protocol::T_LIST, 49);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field49);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field50", apache::thrift::protocol::T_SET, 50);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field50);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field51", apache::thrift::protocol::T_STRUCT, 51);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::write(prot_, &this->field51);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field52", apache::thrift::protocol::T_STRUCT, 52);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field52);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field53", apache::thrift::protocol::T_STRUCT, 53);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field53);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field54", apache::thrift::protocol::T_DOUBLE, 54);
  xfer += prot_->writeDouble(this->field54);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field55", apache::thrift::protocol::T_BYTE, 55);
  xfer += prot_->writeByte(this->field55);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field56", apache::thrift::protocol::T_I64, 56);
  xfer += prot_->writeI64(this->field56);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field57", apache::thrift::protocol::T_MAP, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int32_t,  ::cpp2::Struct0>>::write(*prot_, this->field57);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field58", apache::thrift::protocol::T_I64, 58);
  xfer += prot_->writeI64(this->field58);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field59", apache::thrift::protocol::T_I16, 59);
  xfer += prot_->writeI16(this->field59);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field60", apache::thrift::protocol::T_SET, 60);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field60);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field61", apache::thrift::protocol::T_DOUBLE, 61);
  xfer += prot_->writeDouble(this->field61);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field62", apache::thrift::protocol::T_STRUCT, 62);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field62);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field63", apache::thrift::protocol::T_MAP, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, float>>::write(*prot_, this->field63);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field64", apache::thrift::protocol::T_MAP, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int8_t>>::write(*prot_, this->field64);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field65", apache::thrift::protocol::T_LIST, 65);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field65);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field66", apache::thrift::protocol::T_BOOL, 66);
  xfer += prot_->writeBool(this->field66);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field67", apache::thrift::protocol::T_LIST, 67);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field67);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field68", apache::thrift::protocol::T_LIST, 68);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct0>>::write(*prot_, this->field68);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field69", apache::thrift::protocol::T_SET, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct1>>::write(*prot_, this->field69);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field70", apache::thrift::protocol::T_LIST, 70);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field70);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field71", apache::thrift::protocol::T_I16, 71);
  xfer += prot_->writeI16(this->field71);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field72", apache::thrift::protocol::T_STRUCT, 72);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::write(prot_, &this->field72);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field73", apache::thrift::protocol::T_STRUCT, 73);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::write(prot_, &this->field73);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field74", apache::thrift::protocol::T_MAP, 74);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::binary>, std::map< ::cpp2::Struct2, std::string>>::write(*prot_, this->field74);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field75", apache::thrift::protocol::T_I64, 75);
  xfer += prot_->writeI64(this->field75);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field76", apache::thrift::protocol::T_STRING, 76);
  xfer += prot_->writeString(this->field76);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field77", apache::thrift::protocol::T_MAP, 77);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int16_t, std::string>>::write(*prot_, this->field77);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field78", apache::thrift::protocol::T_SET, 78);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field78);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field79", apache::thrift::protocol::T_MAP, 79);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int64_t>>::write(*prot_, this->field79);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field80", apache::thrift::protocol::T_MAP, 80);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct3, bool>>::write(*prot_, this->field80);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field81", apache::thrift::protocol::T_STRUCT, 81);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::write(prot_, &this->field81);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field82", apache::thrift::protocol::T_BOOL, 82);
  xfer += prot_->writeBool(this->field82);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field83", apache::thrift::protocol::T_STRUCT, 83);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::write(prot_, &this->field83);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field84", apache::thrift::protocol::T_LIST, 84);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field84);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field85", apache::thrift::protocol::T_BOOL, 85);
  xfer += prot_->writeBool(this->field85);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field86", apache::thrift::protocol::T_STRUCT, 86);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field86);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field87", apache::thrift::protocol::T_I16, 87);
  xfer += prot_->writeI16(this->field87);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field88", apache::thrift::protocol::T_SET, 88);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field88);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field89", apache::thrift::protocol::T_STRUCT, 89);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field89);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field90", apache::thrift::protocol::T_MAP, 90);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct1, int16_t>>::write(*prot_, this->field90);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field91", apache::thrift::protocol::T_BOOL, 91);
  xfer += prot_->writeBool(this->field91);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field92", apache::thrift::protocol::T_SET, 92);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field92);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field93", apache::thrift::protocol::T_MAP, 93);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int64_t>>::write(*prot_, this->field93);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field94", apache::thrift::protocol::T_LIST, 94);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field94);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field95", apache::thrift::protocol::T_SET, 95);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field95);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field96", apache::thrift::protocol::T_STRING, 96);
  xfer += prot_->writeBinary(this->field96);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field97", apache::thrift::protocol::T_I16, 97);
  xfer += prot_->writeI16(this->field97);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field98", apache::thrift::protocol::T_STRUCT, 98);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::write(prot_, &this->field98);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field99", apache::thrift::protocol::T_SET, 99);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field99);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field100", apache::thrift::protocol::T_STRING, 100);
  xfer += prot_->writeString(this->field100);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field101", apache::thrift::protocol::T_SET, 101);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field101);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field102", apache::thrift::protocol::T_MAP, 102);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<std::string, std::set<double>>>::write(*prot_, this->field102);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace cpp2 {

template <class Protocol_>
uint32_t Struct11::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field1 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::read(iprot, &this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::read(iprot, &this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field5 = std::set< ::cpp2::Struct2>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct2>>::read(*iprot, this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field6 = std::map<int16_t, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int8_t>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field7 = std::map< ::cpp2::Struct2, std::vector<int64_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map< ::cpp2::Struct2, std::vector<int64_t>>>::read(*iprot, this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field8 = std::map< ::cpp2::Struct1, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct1, int32_t>>::read(*iprot, this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field9 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field10 = std::map<int16_t, std::map<int64_t, float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::map<int16_t, std::map<int64_t, float>>>::read(*iprot, this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::read(iprot, &this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::read(iprot, &this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field17 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::read(iprot, &this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field22 = std::map<std::vector<int32_t>, std::set<int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<std::vector<int32_t>, std::set<int32_t>>>::read(*iprot, this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::read(iprot, &this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field26 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field27);
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field28);
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field29);
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 30:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field30 = std::map<int8_t, double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int8_t, double>>::read(*iprot, this->field30);
          this->__isset.field30 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 31:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field31 = std::map<std::map<float, float>, double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::floating_point>, std::map<std::map<float, float>, double>>::read(*iprot, this->field31);
          this->__isset.field31 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 32:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::read(iprot, &this->field32);
          this->__isset.field32 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 33:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field33 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field33);
          this->__isset.field33 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 34:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field34);
          this->__isset.field34 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 35:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field35);
          this->__isset.field35 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 36:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field36);
          this->__isset.field36 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 37:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field37);
          this->__isset.field37 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 38:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field38 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field38);
          this->__isset.field38 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 39:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field39);
          this->__isset.field39 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 40:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field40 = std::map<int32_t,  ::cpp2::Struct2>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int32_t,  ::cpp2::Struct2>>::read(*iprot, this->field40);
          this->__isset.field40 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 41:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field41);
          this->__isset.field41 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 42:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field42);
          this->__isset.field42 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 43:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field43);
          this->__isset.field43 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 44:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field44);
          this->__isset.field44 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 45:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field45);
          this->__isset.field45 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 46:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field46);
          this->__isset.field46 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 47:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field47 = std::map<int16_t, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int16_t>>::read(*iprot, this->field47);
          this->__isset.field47 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 48:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field48 = std::map<int8_t, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int8_t, std::string>>::read(*iprot, this->field48);
          this->__isset.field48 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 49:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field49 = std::map<int64_t, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int16_t>>::read(*iprot, this->field49);
          this->__isset.field49 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 50:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field50 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field50);
          this->__isset.field50 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 51:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field51 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field51);
          this->__isset.field51 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 52:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field52);
          this->__isset.field52 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 53:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field53);
          this->__isset.field53 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 54:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field54 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field54);
          this->__isset.field54 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 55:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field55);
          this->__isset.field55 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 56:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field56 = std::map<int32_t, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int16_t>>::read(*iprot, this->field56);
          this->__isset.field56 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 57:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field57);
          this->__isset.field57 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 58:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field58);
          this->__isset.field58 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 59:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field59);
          this->__isset.field59 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 60:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field60);
          this->__isset.field60 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 61:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field61 = std::map<int32_t, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, bool>>::read(*iprot, this->field61);
          this->__isset.field61 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 62:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field62);
          this->__isset.field62 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 63:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field63 = std::map<int32_t, std::vector<int64_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<int32_t, std::vector<int64_t>>>::read(*iprot, this->field63);
          this->__isset.field63 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 64:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field64 = std::map<std::set<int32_t>, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::set<int32_t>, int8_t>>::read(*iprot, this->field64);
          this->__isset.field64 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 65:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field65 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field65);
          this->__isset.field65 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 66:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field66);
          this->__isset.field66 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 67:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field67);
          this->__isset.field67 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 68:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::read(iprot, &this->field68);
          this->__isset.field68 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 69:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field69);
          this->__isset.field69 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 70:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field70 = std::vector<std::set< ::cpp2::Struct7>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::structure>>, std::vector<std::set< ::cpp2::Struct7>>>::read(*iprot, this->field70);
          this->__isset.field70 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 71:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field71 = std::vector<std::vector<double>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<double>>>::read(*iprot, this->field71);
          this->__isset.field71 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 72:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field72);
          this->__isset.field72 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 73:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field73 = std::map<float, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int8_t>>::read(*iprot, this->field73);
          this->__isset.field73 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 74:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field74);
          this->__isset.field74 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 75:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field75);
          this->__isset.field75 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 76:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field76);
          this->__isset.field76 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 77:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field77);
          this->__isset.field77 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 78:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field78 = std::map<int64_t, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int16_t>>::read(*iprot, this->field78);
          this->__isset.field78 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 79:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field79);
          this->__isset.field79 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 80:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field80 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field80);
          this->__isset.field80 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 81:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field81);
          this->__isset.field81 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 82:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field82 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field82);
          this->__isset.field82 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 83:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field83);
          this->__isset.field83 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 84:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field84);
          this->__isset.field84 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 85:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field85 = std::map<std::set<int16_t>, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>, std::map<std::set<int16_t>, std::string>>::read(*iprot, this->field85);
          this->__isset.field85 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 86:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field86 = std::map<std::string, std::map<bool, int64_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::map<std::string, std::map<bool, int64_t>>>::read(*iprot, this->field86);
          this->__isset.field86 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 87:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field87);
          this->__isset.field87 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 88:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field88 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field88);
          this->__isset.field88 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 89:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field89);
          this->__isset.field89 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 90:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field90);
          this->__isset.field90 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 91:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field91 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field91);
          this->__isset.field91 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 92:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field92);
          this->__isset.field92 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 93:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field93 = std::map<std::vector<int64_t>, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<int64_t>, int8_t>>::read(*iprot, this->field93);
          this->__isset.field93 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 94:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field94 = std::vector<std::set<int8_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int8_t>>>::read(*iprot, this->field94);
          this->__isset.field94 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 95:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field95);
          this->__isset.field95 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 96:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field96);
          this->__isset.field96 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 97:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field97 = std::vector< ::cpp2::Struct1>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct1>>::read(*iprot, this->field97);
          this->__isset.field97 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 98:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field98 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field98);
          this->__isset.field98 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 99:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field99);
          this->__isset.field99 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 100:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field100 = std::vector<std::map<bool, bool>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::vector<std::map<bool, bool>>>::read(*iprot, this->field100);
          this->__isset.field100 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 101:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field101);
          this->__isset.field101 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 102:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field102 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field102);
          this->__isset.field102 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 103:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field103);
          this->__isset.field103 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 104:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field104 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field104);
          this->__isset.field104 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 105:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field105);
          this->__isset.field105 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 106:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field106);
          this->__isset.field106 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 107:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field107);
          this->__isset.field107 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 108:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field108);
          this->__isset.field108 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 109:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field109);
          this->__isset.field109 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 110:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field110 = std::map< ::cpp2::Struct4, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::string>, std::map< ::cpp2::Struct4, std::string>>::read(*iprot, this->field110);
          this->__isset.field110 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 111:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field111);
          this->__isset.field111 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 112:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field112 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field112);
          this->__isset.field112 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 113:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::read(iprot, &this->field113);
          this->__isset.field113 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 114:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field114);
          this->__isset.field114 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 115:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field115 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field115);
          this->__isset.field115 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 116:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field116);
          this->__isset.field116 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 117:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field117);
          this->__isset.field117 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 118:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field118 = std::map<double, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int8_t>>::read(*iprot, this->field118);
          this->__isset.field118 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 119:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field119);
          this->__isset.field119 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 120:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field120);
          this->__isset.field120 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 121:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field121 = std::vector< ::cpp2::Struct0>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct0>>::read(*iprot, this->field121);
          this->__isset.field121 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 122:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field122 = std::set<std::set<double>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<double>>>::read(*iprot, this->field122);
          this->__isset.field122 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 123:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::read(iprot, &this->field123);
          this->__isset.field123 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 124:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field124);
          this->__isset.field124 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 125:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field125);
          this->__isset.field125 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 126:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field126 = std::map<float, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, float>>::read(*iprot, this->field126);
          this->__isset.field126 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 127:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::read(iprot, &this->field127);
          this->__isset.field127 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 128:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field128 = std::map<float, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, std::map<float, std::string>>::read(*iprot, this->field128);
          this->__isset.field128 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 129:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field129);
          this->__isset.field129 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 130:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field130);
          this->__isset.field130 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 131:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field131 = std::map< ::cpp2::Struct0, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct0, int8_t>>::read(*iprot, this->field131);
          this->__isset.field131 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 132:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field132 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field132);
          this->__isset.field132 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 133:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field133);
          this->__isset.field133 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 134:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field134 = std::map<int16_t, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int16_t, std::string>>::read(*iprot, this->field134);
          this->__isset.field134 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 135:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field135);
          this->__isset.field135 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 136:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field136 = std::vector<std::vector<int64_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int64_t>>>::read(*iprot, this->field136);
          this->__isset.field136 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 137:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field137 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field137);
          this->__isset.field137 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 138:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field138 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field138);
          this->__isset.field138 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 139:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field139 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field139);
          this->__isset.field139 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 140:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field140);
          this->__isset.field140 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 141:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field141);
          this->__isset.field141 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 142:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field142);
          this->__isset.field142 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 143:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field143 = std::map<int32_t, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int32_t, std::string>>::read(*iprot, this->field143);
          this->__isset.field143 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 144:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field144 = std::map<double, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int32_t>>::read(*iprot, this->field144);
          this->__isset.field144 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 145:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::read(iprot, &this->field145);
          this->__isset.field145 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 146:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field146 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field146);
          this->__isset.field146 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 147:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field147);
          this->__isset.field147 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 148:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field148);
          this->__isset.field148 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 149:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field149 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field149);
          this->__isset.field149 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 150:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field150);
          this->__isset.field150 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 151:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field151);
          this->__isset.field151 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 152:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field152);
          this->__isset.field152 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 153:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field153 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field153);
          this->__isset.field153 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 154:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field154);
          this->__isset.field154 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 155:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field155);
          this->__isset.field155 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 156:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field156);
          this->__isset.field156 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 157:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field157);
          this->__isset.field157 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 158:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field158);
          this->__isset.field158 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 159:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field159);
          this->__isset.field159 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 160:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field160 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field160);
          this->__isset.field160 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 161:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field161);
          this->__isset.field161 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 162:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field162);
          this->__isset.field162 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 163:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field163);
          this->__isset.field163 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 164:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::read(iprot, &this->field164);
          this->__isset.field164 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 165:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field165);
          this->__isset.field165 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 166:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field166);
          this->__isset.field166 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 167:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::read(iprot, &this->field167);
          this->__isset.field167 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 168:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field168);
          this->__isset.field168 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 169:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field169);
          this->__isset.field169 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 170:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field170);
          this->__isset.field170 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 171:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field171);
          this->__isset.field171 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 172:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field172);
          this->__isset.field172 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 173:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field173);
          this->__isset.field173 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 174:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field174 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field174);
          this->__isset.field174 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 175:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field175 = std::map<float, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int16_t>>::read(*iprot, this->field175);
          this->__isset.field175 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 176:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field176 = std::vector<std::map<int64_t, bool>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::vector<std::map<int64_t, bool>>>::read(*iprot, this->field176);
          this->__isset.field176 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 177:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field177 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field177);
          this->__isset.field177 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 178:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field178);
          this->__isset.field178 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 179:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field179 = std::map<int32_t,  ::cpp2::Struct1>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int32_t,  ::cpp2::Struct1>>::read(*iprot, this->field179);
          this->__isset.field179 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 180:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::read(iprot, &this->field180);
          this->__isset.field180 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 181:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field181 = std::map<bool, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int16_t>>::read(*iprot, this->field181);
          this->__isset.field181 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 182:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field182);
          this->__isset.field182 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 183:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field183 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field183);
          this->__isset.field183 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 184:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field184);
          this->__isset.field184 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 185:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field185);
          this->__isset.field185 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 186:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field186 = std::set< ::cpp2::Struct3>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct3>>::read(*iprot, this->field186);
          this->__isset.field186 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 187:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field187);
          this->__isset.field187 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 188:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::read(iprot, &this->field188);
          this->__isset.field188 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 189:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field189);
          this->__isset.field189 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 190:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field190);
          this->__isset.field190 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 191:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field191 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field191);
          this->__isset.field191 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 192:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field192 = std::map<std::vector<std::string>, std::vector<std::map<double, int8_t>>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::string>, ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>>, std::map<std::vector<std::string>, std::vector<std::map<double, int8_t>>>>::read(*iprot, this->field192);
          this->__isset.field192 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct11::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct11");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSize(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSize(prot_, &this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->serializedSizeByte(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct2>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int8_t>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map< ::cpp2::Struct2, std::vector<int64_t>>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_MAP, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct1, int32_t>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::map<int16_t, std::map<int64_t, float>>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_STRUCT, 11);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSize(prot_, &this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_BOOL, 12);
  xfer += prot_->serializedSizeBool(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_FLOAT, 13);
  xfer += prot_->serializedSizeFloat(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_STRUCT, 14);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSize(prot_, &this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_STRING, 15);
  xfer += prot_->serializedSizeString(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_BYTE, 16);
  xfer += prot_->serializedSizeByte(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_LIST, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_STRUCT, 18);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSize(prot_, &this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_BYTE, 19);
  xfer += prot_->serializedSizeByte(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_I32, 20);
  xfer += prot_->serializedSizeI32(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_BYTE, 21);
  xfer += prot_->serializedSizeByte(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_MAP, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<std::vector<int32_t>, std::set<int32_t>>>::serializedSize<false>(*prot_, this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_BYTE, 23);
  xfer += prot_->serializedSizeByte(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_FLOAT, 24);
  xfer += prot_->serializedSizeFloat(this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_STRUCT, 25);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSize(prot_, &this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_SET, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_STRING, 27);
  xfer += prot_->serializedSizeBinary(this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_BOOL, 28);
  xfer += prot_->serializedSizeBool(this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_BYTE, 29);
  xfer += prot_->serializedSizeByte(this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_MAP, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int8_t, double>>::serializedSize<false>(*prot_, this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_MAP, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::floating_point>, std::map<std::map<float, float>, double>>::serializedSize<false>(*prot_, this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_STRUCT, 32);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSize(prot_, &this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_SET, 33);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_I64, 34);
  xfer += prot_->serializedSizeI64(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_BYTE, 35);
  xfer += prot_->serializedSizeByte(this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_I16, 36);
  xfer += prot_->serializedSizeI16(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_STRING, 37);
  xfer += prot_->serializedSizeBinary(this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_SET, 38);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_I16, 39);
  xfer += prot_->serializedSizeI16(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_MAP, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int32_t,  ::cpp2::Struct2>>::serializedSize<false>(*prot_, this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_BYTE, 41);
  xfer += prot_->serializedSizeByte(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_BOOL, 42);
  xfer += prot_->serializedSizeBool(this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_FLOAT, 43);
  xfer += prot_->serializedSizeFloat(this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_I16, 44);
  xfer += prot_->serializedSizeI16(this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_I32, 45);
  xfer += prot_->serializedSizeI32(this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_BOOL, 46);
  xfer += prot_->serializedSizeBool(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_MAP, 47);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int16_t>>::serializedSize<false>(*prot_, this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_MAP, 48);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int8_t, std::string>>::serializedSize<false>(*prot_, this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_MAP, 49);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int16_t>>::serializedSize<false>(*prot_, this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_LIST, 50);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_LIST, 51);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_STRUCT, 52);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_STRING, 53);
  xfer += prot_->serializedSizeBinary(this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_SET, 54);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_FLOAT, 55);
  xfer += prot_->serializedSizeFloat(this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_MAP, 56);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int16_t>>::serializedSize<false>(*prot_, this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_STRING, 57);
  xfer += prot_->serializedSizeBinary(this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_DOUBLE, 58);
  xfer += prot_->serializedSizeDouble(this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_BYTE, 59);
  xfer += prot_->serializedSizeByte(this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_BYTE, 60);
  xfer += prot_->serializedSizeByte(this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_MAP, 61);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, bool>>::serializedSize<false>(*prot_, this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_STRING, 62);
  xfer += prot_->serializedSizeString(this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_MAP, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<int32_t, std::vector<int64_t>>>::serializedSize<false>(*prot_, this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_MAP, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::set<int32_t>, int8_t>>::serializedSize<false>(*prot_, this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_SET, 65);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_BOOL, 66);
  xfer += prot_->serializedSizeBool(this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_DOUBLE, 67);
  xfer += prot_->serializedSizeDouble(this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_STRUCT, 68);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::serializedSize(prot_, &this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_BOOL, 69);
  xfer += prot_->serializedSizeBool(this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_LIST, 70);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::structure>>, std::vector<std::set< ::cpp2::Struct7>>>::serializedSize<false>(*prot_, this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_LIST, 71);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<double>>>::serializedSize<false>(*prot_, this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_STRING, 72);
  xfer += prot_->serializedSizeBinary(this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_MAP, 73);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int8_t>>::serializedSize<false>(*prot_, this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_STRING, 74);
  xfer += prot_->serializedSizeString(this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_I32, 75);
  xfer += prot_->serializedSizeI32(this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_BOOL, 76);
  xfer += prot_->serializedSizeBool(this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_BYTE, 77);
  xfer += prot_->serializedSizeByte(this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_MAP, 78);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int16_t>>::serializedSize<false>(*prot_, this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_STRING, 79);
  xfer += prot_->serializedSizeString(this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_LIST, 80);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_BYTE, 81);
  xfer += prot_->serializedSizeByte(this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_LIST, 82);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_BYTE, 83);
  xfer += prot_->serializedSizeByte(this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_I32, 84);
  xfer += prot_->serializedSizeI32(this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_MAP, 85);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>, std::map<std::set<int16_t>, std::string>>::serializedSize<false>(*prot_, this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_MAP, 86);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::map<std::string, std::map<bool, int64_t>>>::serializedSize<false>(*prot_, this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_DOUBLE, 87);
  xfer += prot_->serializedSizeDouble(this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_LIST, 88);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_STRUCT, 89);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_I16, 90);
  xfer += prot_->serializedSizeI16(this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_SET, 91);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_I64, 92);
  xfer += prot_->serializedSizeI64(this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_MAP, 93);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<int64_t>, int8_t>>::serializedSize<false>(*prot_, this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_LIST, 94);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int8_t>>>::serializedSize<false>(*prot_, this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_BYTE, 95);
  xfer += prot_->serializedSizeByte(this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_FLOAT, 96);
  xfer += prot_->serializedSizeFloat(this->field96);
  xfer += prot_->serializedFieldSize("field97", apache::thrift::protocol::T_LIST, 97);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct1>>::serializedSize<false>(*prot_, this->field97);
  xfer += prot_->serializedFieldSize("field98", apache::thrift::protocol::T_SET, 98);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field98);
  xfer += prot_->serializedFieldSize("field99", apache::thrift::protocol::T_I32, 99);
  xfer += prot_->serializedSizeI32(this->field99);
  xfer += prot_->serializedFieldSize("field100", apache::thrift::protocol::T_LIST, 100);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::vector<std::map<bool, bool>>>::serializedSize<false>(*prot_, this->field100);
  xfer += prot_->serializedFieldSize("field101", apache::thrift::protocol::T_FLOAT, 101);
  xfer += prot_->serializedSizeFloat(this->field101);
  xfer += prot_->serializedFieldSize("field102", apache::thrift::protocol::T_LIST, 102);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field102);
  xfer += prot_->serializedFieldSize("field103", apache::thrift::protocol::T_STRING, 103);
  xfer += prot_->serializedSizeString(this->field103);
  xfer += prot_->serializedFieldSize("field104", apache::thrift::protocol::T_SET, 104);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field104);
  xfer += prot_->serializedFieldSize("field105", apache::thrift::protocol::T_STRUCT, 105);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field105);
  xfer += prot_->serializedFieldSize("field106", apache::thrift::protocol::T_STRING, 106);
  xfer += prot_->serializedSizeString(this->field106);
  xfer += prot_->serializedFieldSize("field107", apache::thrift::protocol::T_FLOAT, 107);
  xfer += prot_->serializedSizeFloat(this->field107);
  xfer += prot_->serializedFieldSize("field108", apache::thrift::protocol::T_STRING, 108);
  xfer += prot_->serializedSizeString(this->field108);
  xfer += prot_->serializedFieldSize("field109", apache::thrift::protocol::T_BOOL, 109);
  xfer += prot_->serializedSizeBool(this->field109);
  xfer += prot_->serializedFieldSize("field110", apache::thrift::protocol::T_MAP, 110);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::string>, std::map< ::cpp2::Struct4, std::string>>::serializedSize<false>(*prot_, this->field110);
  xfer += prot_->serializedFieldSize("field111", apache::thrift::protocol::T_BOOL, 111);
  xfer += prot_->serializedSizeBool(this->field111);
  xfer += prot_->serializedFieldSize("field112", apache::thrift::protocol::T_LIST, 112);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field112);
  xfer += prot_->serializedFieldSize("field113", apache::thrift::protocol::T_STRUCT, 113);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSize(prot_, &this->field113);
  xfer += prot_->serializedFieldSize("field114", apache::thrift::protocol::T_STRING, 114);
  xfer += prot_->serializedSizeString(this->field114);
  xfer += prot_->serializedFieldSize("field115", apache::thrift::protocol::T_SET, 115);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field115);
  xfer += prot_->serializedFieldSize("field116", apache::thrift::protocol::T_BYTE, 116);
  xfer += prot_->serializedSizeByte(this->field116);
  xfer += prot_->serializedFieldSize("field117", apache::thrift::protocol::T_I32, 117);
  xfer += prot_->serializedSizeI32(this->field117);
  xfer += prot_->serializedFieldSize("field118", apache::thrift::protocol::T_MAP, 118);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int8_t>>::serializedSize<false>(*prot_, this->field118);
  xfer += prot_->serializedFieldSize("field119", apache::thrift::protocol::T_BOOL, 119);
  xfer += prot_->serializedSizeBool(this->field119);
  xfer += prot_->serializedFieldSize("field120", apache::thrift::protocol::T_STRING, 120);
  xfer += prot_->serializedSizeString(this->field120);
  xfer += prot_->serializedFieldSize("field121", apache::thrift::protocol::T_LIST, 121);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct0>>::serializedSize<false>(*prot_, this->field121);
  xfer += prot_->serializedFieldSize("field122", apache::thrift::protocol::T_SET, 122);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<double>>>::serializedSize<false>(*prot_, this->field122);
  xfer += prot_->serializedFieldSize("field123", apache::thrift::protocol::T_STRUCT, 123);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSize(prot_, &this->field123);
  xfer += prot_->serializedFieldSize("field124", apache::thrift::protocol::T_BYTE, 124);
  xfer += prot_->serializedSizeByte(this->field124);
  xfer += prot_->serializedFieldSize("field125", apache::thrift::protocol::T_FLOAT, 125);
  xfer += prot_->serializedSizeFloat(this->field125);
  xfer += prot_->serializedFieldSize("field126", apache::thrift::protocol::T_MAP, 126);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, float>>::serializedSize<false>(*prot_, this->field126);
  xfer += prot_->serializedFieldSize("field127", apache::thrift::protocol::T_STRUCT, 127);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSize(prot_, &this->field127);
  xfer += prot_->serializedFieldSize("field128", apache::thrift::protocol::T_MAP, 128);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, std::map<float, std::string>>::serializedSize<false>(*prot_, this->field128);
  xfer += prot_->serializedFieldSize("field129", apache::thrift::protocol::T_BYTE, 129);
  xfer += prot_->serializedSizeByte(this->field129);
  xfer += prot_->serializedFieldSize("field130", apache::thrift::protocol::T_BYTE, 130);
  xfer += prot_->serializedSizeByte(this->field130);
  xfer += prot_->serializedFieldSize("field131", apache::thrift::protocol::T_MAP, 131);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct0, int8_t>>::serializedSize<false>(*prot_, this->field131);
  xfer += prot_->serializedFieldSize("field132", apache::thrift::protocol::T_LIST, 132);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field132);
  xfer += prot_->serializedFieldSize("field133", apache::thrift::protocol::T_STRING, 133);
  xfer += prot_->serializedSizeString(this->field133);
  xfer += prot_->serializedFieldSize("field134", apache::thrift::protocol::T_MAP, 134);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int16_t, std::string>>::serializedSize<false>(*prot_, this->field134);
  xfer += prot_->serializedFieldSize("field135", apache::thrift::protocol::T_DOUBLE, 135);
  xfer += prot_->serializedSizeDouble(this->field135);
  xfer += prot_->serializedFieldSize("field136", apache::thrift::protocol::T_LIST, 136);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int64_t>>>::serializedSize<false>(*prot_, this->field136);
  xfer += prot_->serializedFieldSize("field137", apache::thrift::protocol::T_LIST, 137);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field137);
  xfer += prot_->serializedFieldSize("field138", apache::thrift::protocol::T_SET, 138);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field138);
  xfer += prot_->serializedFieldSize("field139", apache::thrift::protocol::T_SET, 139);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field139);
  xfer += prot_->serializedFieldSize("field140", apache::thrift::protocol::T_I32, 140);
  xfer += prot_->serializedSizeI32(this->field140);
  xfer += prot_->serializedFieldSize("field141", apache::thrift::protocol::T_STRUCT, 141);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field141);
  xfer += prot_->serializedFieldSize("field142", apache::thrift::protocol::T_STRUCT, 142);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field142);
  xfer += prot_->serializedFieldSize("field143", apache::thrift::protocol::T_MAP, 143);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int32_t, std::string>>::serializedSize<false>(*prot_, this->field143);
  xfer += prot_->serializedFieldSize("field144", apache::thrift::protocol::T_MAP, 144);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int32_t>>::serializedSize<false>(*prot_, this->field144);
  xfer += prot_->serializedFieldSize("field145", apache::thrift::protocol::T_STRUCT, 145);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSize(prot_, &this->field145);
  xfer += prot_->serializedFieldSize("field146", apache::thrift::protocol::T_LIST, 146);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field146);
  xfer += prot_->serializedFieldSize("field147", apache::thrift::protocol::T_STRUCT, 147);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field147);
  xfer += prot_->serializedFieldSize("field148", apache::thrift::protocol::T_STRING, 148);
  xfer += prot_->serializedSizeString(this->field148);
  xfer += prot_->serializedFieldSize("field149", apache::thrift::protocol::T_SET, 149);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field149);
  xfer += prot_->serializedFieldSize("field150", apache::thrift::protocol::T_DOUBLE, 150);
  xfer += prot_->serializedSizeDouble(this->field150);
  xfer += prot_->serializedFieldSize("field151", apache::thrift::protocol::T_STRUCT, 151);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field151);
  xfer += prot_->serializedFieldSize("field152", apache::thrift::protocol::T_I32, 152);
  xfer += prot_->serializedSizeI32(this->field152);
  xfer += prot_->serializedFieldSize("field153", apache::thrift::protocol::T_LIST, 153);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field153);
  xfer += prot_->serializedFieldSize("field154", apache::thrift::protocol::T_STRING, 154);
  xfer += prot_->serializedSizeBinary(this->field154);
  xfer += prot_->serializedFieldSize("field155", apache::thrift::protocol::T_BOOL, 155);
  xfer += prot_->serializedSizeBool(this->field155);
  xfer += prot_->serializedFieldSize("field156", apache::thrift::protocol::T_STRUCT, 156);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field156);
  xfer += prot_->serializedFieldSize("field157", apache::thrift::protocol::T_FLOAT, 157);
  xfer += prot_->serializedSizeFloat(this->field157);
  xfer += prot_->serializedFieldSize("field158", apache::thrift::protocol::T_STRING, 158);
  xfer += prot_->serializedSizeString(this->field158);
  xfer += prot_->serializedFieldSize("field159", apache::thrift::protocol::T_BYTE, 159);
  xfer += prot_->serializedSizeByte(this->field159);
  xfer += prot_->serializedFieldSize("field160", apache::thrift::protocol::T_LIST, 160);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field160);
  xfer += prot_->serializedFieldSize("field161", apache::thrift::protocol::T_STRUCT, 161);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field161);
  xfer += prot_->serializedFieldSize("field162", apache::thrift::protocol::T_I64, 162);
  xfer += prot_->serializedSizeI64(this->field162);
  xfer += prot_->serializedFieldSize("field163", apache::thrift::protocol::T_STRING, 163);
  xfer += prot_->serializedSizeString(this->field163);
  xfer += prot_->serializedFieldSize("field164", apache::thrift::protocol::T_STRUCT, 164);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSize(prot_, &this->field164);
  xfer += prot_->serializedFieldSize("field165", apache::thrift::protocol::T_DOUBLE, 165);
  xfer += prot_->serializedSizeDouble(this->field165);
  xfer += prot_->serializedFieldSize("field166", apache::thrift::protocol::T_I32, 166);
  xfer += prot_->serializedSizeI32(this->field166);
  xfer += prot_->serializedFieldSize("field167", apache::thrift::protocol::T_STRUCT, 167);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSize(prot_, &this->field167);
  xfer += prot_->serializedFieldSize("field168", apache::thrift::protocol::T_STRUCT, 168);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field168);
  xfer += prot_->serializedFieldSize("field169", apache::thrift::protocol::T_STRING, 169);
  xfer += prot_->serializedSizeString(this->field169);
  xfer += prot_->serializedFieldSize("field170", apache::thrift::protocol::T_STRING, 170);
  xfer += prot_->serializedSizeBinary(this->field170);
  xfer += prot_->serializedFieldSize("field171", apache::thrift::protocol::T_STRUCT, 171);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field171);
  xfer += prot_->serializedFieldSize("field172", apache::thrift::protocol::T_FLOAT, 172);
  xfer += prot_->serializedSizeFloat(this->field172);
  xfer += prot_->serializedFieldSize("field173", apache::thrift::protocol::T_DOUBLE, 173);
  xfer += prot_->serializedSizeDouble(this->field173);
  xfer += prot_->serializedFieldSize("field174", apache::thrift::protocol::T_SET, 174);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field174);
  xfer += prot_->serializedFieldSize("field175", apache::thrift::protocol::T_MAP, 175);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int16_t>>::serializedSize<false>(*prot_, this->field175);
  xfer += prot_->serializedFieldSize("field176", apache::thrift::protocol::T_LIST, 176);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::vector<std::map<int64_t, bool>>>::serializedSize<false>(*prot_, this->field176);
  xfer += prot_->serializedFieldSize("field177", apache::thrift::protocol::T_SET, 177);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field177);
  xfer += prot_->serializedFieldSize("field178", apache::thrift::protocol::T_STRUCT, 178);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field178);
  xfer += prot_->serializedFieldSize("field179", apache::thrift::protocol::T_MAP, 179);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int32_t,  ::cpp2::Struct1>>::serializedSize<false>(*prot_, this->field179);
  xfer += prot_->serializedFieldSize("field180", apache::thrift::protocol::T_STRUCT, 180);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSize(prot_, &this->field180);
  xfer += prot_->serializedFieldSize("field181", apache::thrift::protocol::T_MAP, 181);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int16_t>>::serializedSize<false>(*prot_, this->field181);
  xfer += prot_->serializedFieldSize("field182", apache::thrift::protocol::T_FLOAT, 182);
  xfer += prot_->serializedSizeFloat(this->field182);
  xfer += prot_->serializedFieldSize("field183", apache::thrift::protocol::T_LIST, 183);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field183);
  xfer += prot_->serializedFieldSize("field184", apache::thrift::protocol::T_I16, 184);
  xfer += prot_->serializedSizeI16(this->field184);
  xfer += prot_->serializedFieldSize("field185", apache::thrift::protocol::T_STRUCT, 185);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field185);
  xfer += prot_->serializedFieldSize("field186", apache::thrift::protocol::T_SET, 186);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct3>>::serializedSize<false>(*prot_, this->field186);
  xfer += prot_->serializedFieldSize("field187", apache::thrift::protocol::T_BOOL, 187);
  xfer += prot_->serializedSizeBool(this->field187);
  xfer += prot_->serializedFieldSize("field188", apache::thrift::protocol::T_STRUCT, 188);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSize(prot_, &this->field188);
  xfer += prot_->serializedFieldSize("field189", apache::thrift::protocol::T_STRUCT, 189);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field189);
  xfer += prot_->serializedFieldSize("field190", apache::thrift::protocol::T_FLOAT, 190);
  xfer += prot_->serializedSizeFloat(this->field190);
  xfer += prot_->serializedFieldSize("field191", apache::thrift::protocol::T_LIST, 191);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field191);
  xfer += prot_->serializedFieldSize("field192", apache::thrift::protocol::T_MAP, 192);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::string>, ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>>, std::map<std::vector<std::string>, std::vector<std::map<double, int8_t>>>>::serializedSize<false>(*prot_, this->field192);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct11::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct11");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSizeZC(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSizeZC(prot_, &this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->serializedSizeByte(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct2>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int8_t>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map< ::cpp2::Struct2, std::vector<int64_t>>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_MAP, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct1, int32_t>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::map<int16_t, std::map<int64_t, float>>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_STRUCT, 11);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSizeZC(prot_, &this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_BOOL, 12);
  xfer += prot_->serializedSizeBool(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_FLOAT, 13);
  xfer += prot_->serializedSizeFloat(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_STRUCT, 14);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSizeZC(prot_, &this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_STRING, 15);
  xfer += prot_->serializedSizeString(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_BYTE, 16);
  xfer += prot_->serializedSizeByte(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_LIST, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_STRUCT, 18);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSizeZC(prot_, &this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_BYTE, 19);
  xfer += prot_->serializedSizeByte(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_I32, 20);
  xfer += prot_->serializedSizeI32(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_BYTE, 21);
  xfer += prot_->serializedSizeByte(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_MAP, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<std::vector<int32_t>, std::set<int32_t>>>::serializedSize<false>(*prot_, this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_BYTE, 23);
  xfer += prot_->serializedSizeByte(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_FLOAT, 24);
  xfer += prot_->serializedSizeFloat(this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_STRUCT, 25);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSizeZC(prot_, &this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_SET, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_STRING, 27);
  xfer += prot_->serializedSizeZCBinary(this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_BOOL, 28);
  xfer += prot_->serializedSizeBool(this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_BYTE, 29);
  xfer += prot_->serializedSizeByte(this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_MAP, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int8_t, double>>::serializedSize<false>(*prot_, this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_MAP, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::floating_point>, std::map<std::map<float, float>, double>>::serializedSize<false>(*prot_, this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_STRUCT, 32);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSizeZC(prot_, &this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_SET, 33);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_I64, 34);
  xfer += prot_->serializedSizeI64(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_BYTE, 35);
  xfer += prot_->serializedSizeByte(this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_I16, 36);
  xfer += prot_->serializedSizeI16(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_STRING, 37);
  xfer += prot_->serializedSizeZCBinary(this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_SET, 38);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_I16, 39);
  xfer += prot_->serializedSizeI16(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_MAP, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int32_t,  ::cpp2::Struct2>>::serializedSize<false>(*prot_, this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_BYTE, 41);
  xfer += prot_->serializedSizeByte(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_BOOL, 42);
  xfer += prot_->serializedSizeBool(this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_FLOAT, 43);
  xfer += prot_->serializedSizeFloat(this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_I16, 44);
  xfer += prot_->serializedSizeI16(this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_I32, 45);
  xfer += prot_->serializedSizeI32(this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_BOOL, 46);
  xfer += prot_->serializedSizeBool(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_MAP, 47);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int16_t>>::serializedSize<false>(*prot_, this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_MAP, 48);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int8_t, std::string>>::serializedSize<false>(*prot_, this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_MAP, 49);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int16_t>>::serializedSize<false>(*prot_, this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_LIST, 50);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_LIST, 51);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_STRUCT, 52);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_STRING, 53);
  xfer += prot_->serializedSizeZCBinary(this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_SET, 54);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_FLOAT, 55);
  xfer += prot_->serializedSizeFloat(this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_MAP, 56);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int16_t>>::serializedSize<false>(*prot_, this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_STRING, 57);
  xfer += prot_->serializedSizeZCBinary(this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_DOUBLE, 58);
  xfer += prot_->serializedSizeDouble(this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_BYTE, 59);
  xfer += prot_->serializedSizeByte(this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_BYTE, 60);
  xfer += prot_->serializedSizeByte(this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_MAP, 61);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, bool>>::serializedSize<false>(*prot_, this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_STRING, 62);
  xfer += prot_->serializedSizeString(this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_MAP, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<int32_t, std::vector<int64_t>>>::serializedSize<false>(*prot_, this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_MAP, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::set<int32_t>, int8_t>>::serializedSize<false>(*prot_, this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_SET, 65);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_BOOL, 66);
  xfer += prot_->serializedSizeBool(this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_DOUBLE, 67);
  xfer += prot_->serializedSizeDouble(this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_STRUCT, 68);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::serializedSizeZC(prot_, &this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_BOOL, 69);
  xfer += prot_->serializedSizeBool(this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_LIST, 70);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::structure>>, std::vector<std::set< ::cpp2::Struct7>>>::serializedSize<false>(*prot_, this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_LIST, 71);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<double>>>::serializedSize<false>(*prot_, this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_STRING, 72);
  xfer += prot_->serializedSizeZCBinary(this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_MAP, 73);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int8_t>>::serializedSize<false>(*prot_, this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_STRING, 74);
  xfer += prot_->serializedSizeString(this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_I32, 75);
  xfer += prot_->serializedSizeI32(this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_BOOL, 76);
  xfer += prot_->serializedSizeBool(this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_BYTE, 77);
  xfer += prot_->serializedSizeByte(this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_MAP, 78);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int16_t>>::serializedSize<false>(*prot_, this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_STRING, 79);
  xfer += prot_->serializedSizeString(this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_LIST, 80);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_BYTE, 81);
  xfer += prot_->serializedSizeByte(this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_LIST, 82);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_BYTE, 83);
  xfer += prot_->serializedSizeByte(this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_I32, 84);
  xfer += prot_->serializedSizeI32(this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_MAP, 85);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>, std::map<std::set<int16_t>, std::string>>::serializedSize<false>(*prot_, this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_MAP, 86);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::map<std::string, std::map<bool, int64_t>>>::serializedSize<false>(*prot_, this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_DOUBLE, 87);
  xfer += prot_->serializedSizeDouble(this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_LIST, 88);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_STRUCT, 89);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_I16, 90);
  xfer += prot_->serializedSizeI16(this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_SET, 91);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_I64, 92);
  xfer += prot_->serializedSizeI64(this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_MAP, 93);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<int64_t>, int8_t>>::serializedSize<false>(*prot_, this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_LIST, 94);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int8_t>>>::serializedSize<false>(*prot_, this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_BYTE, 95);
  xfer += prot_->serializedSizeByte(this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_FLOAT, 96);
  xfer += prot_->serializedSizeFloat(this->field96);
  xfer += prot_->serializedFieldSize("field97", apache::thrift::protocol::T_LIST, 97);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct1>>::serializedSize<false>(*prot_, this->field97);
  xfer += prot_->serializedFieldSize("field98", apache::thrift::protocol::T_SET, 98);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field98);
  xfer += prot_->serializedFieldSize("field99", apache::thrift::protocol::T_I32, 99);
  xfer += prot_->serializedSizeI32(this->field99);
  xfer += prot_->serializedFieldSize("field100", apache::thrift::protocol::T_LIST, 100);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::vector<std::map<bool, bool>>>::serializedSize<false>(*prot_, this->field100);
  xfer += prot_->serializedFieldSize("field101", apache::thrift::protocol::T_FLOAT, 101);
  xfer += prot_->serializedSizeFloat(this->field101);
  xfer += prot_->serializedFieldSize("field102", apache::thrift::protocol::T_LIST, 102);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field102);
  xfer += prot_->serializedFieldSize("field103", apache::thrift::protocol::T_STRING, 103);
  xfer += prot_->serializedSizeString(this->field103);
  xfer += prot_->serializedFieldSize("field104", apache::thrift::protocol::T_SET, 104);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field104);
  xfer += prot_->serializedFieldSize("field105", apache::thrift::protocol::T_STRUCT, 105);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field105);
  xfer += prot_->serializedFieldSize("field106", apache::thrift::protocol::T_STRING, 106);
  xfer += prot_->serializedSizeString(this->field106);
  xfer += prot_->serializedFieldSize("field107", apache::thrift::protocol::T_FLOAT, 107);
  xfer += prot_->serializedSizeFloat(this->field107);
  xfer += prot_->serializedFieldSize("field108", apache::thrift::protocol::T_STRING, 108);
  xfer += prot_->serializedSizeString(this->field108);
  xfer += prot_->serializedFieldSize("field109", apache::thrift::protocol::T_BOOL, 109);
  xfer += prot_->serializedSizeBool(this->field109);
  xfer += prot_->serializedFieldSize("field110", apache::thrift::protocol::T_MAP, 110);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::string>, std::map< ::cpp2::Struct4, std::string>>::serializedSize<false>(*prot_, this->field110);
  xfer += prot_->serializedFieldSize("field111", apache::thrift::protocol::T_BOOL, 111);
  xfer += prot_->serializedSizeBool(this->field111);
  xfer += prot_->serializedFieldSize("field112", apache::thrift::protocol::T_LIST, 112);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field112);
  xfer += prot_->serializedFieldSize("field113", apache::thrift::protocol::T_STRUCT, 113);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSizeZC(prot_, &this->field113);
  xfer += prot_->serializedFieldSize("field114", apache::thrift::protocol::T_STRING, 114);
  xfer += prot_->serializedSizeString(this->field114);
  xfer += prot_->serializedFieldSize("field115", apache::thrift::protocol::T_SET, 115);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field115);
  xfer += prot_->serializedFieldSize("field116", apache::thrift::protocol::T_BYTE, 116);
  xfer += prot_->serializedSizeByte(this->field116);
  xfer += prot_->serializedFieldSize("field117", apache::thrift::protocol::T_I32, 117);
  xfer += prot_->serializedSizeI32(this->field117);
  xfer += prot_->serializedFieldSize("field118", apache::thrift::protocol::T_MAP, 118);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int8_t>>::serializedSize<false>(*prot_, this->field118);
  xfer += prot_->serializedFieldSize("field119", apache::thrift::protocol::T_BOOL, 119);
  xfer += prot_->serializedSizeBool(this->field119);
  xfer += prot_->serializedFieldSize("field120", apache::thrift::protocol::T_STRING, 120);
  xfer += prot_->serializedSizeString(this->field120);
  xfer += prot_->serializedFieldSize("field121", apache::thrift::protocol::T_LIST, 121);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct0>>::serializedSize<false>(*prot_, this->field121);
  xfer += prot_->serializedFieldSize("field122", apache::thrift::protocol::T_SET, 122);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<double>>>::serializedSize<false>(*prot_, this->field122);
  xfer += prot_->serializedFieldSize("field123", apache::thrift::protocol::T_STRUCT, 123);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSizeZC(prot_, &this->field123);
  xfer += prot_->serializedFieldSize("field124", apache::thrift::protocol::T_BYTE, 124);
  xfer += prot_->serializedSizeByte(this->field124);
  xfer += prot_->serializedFieldSize("field125", apache::thrift::protocol::T_FLOAT, 125);
  xfer += prot_->serializedSizeFloat(this->field125);
  xfer += prot_->serializedFieldSize("field126", apache::thrift::protocol::T_MAP, 126);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, float>>::serializedSize<false>(*prot_, this->field126);
  xfer += prot_->serializedFieldSize("field127", apache::thrift::protocol::T_STRUCT, 127);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSizeZC(prot_, &this->field127);
  xfer += prot_->serializedFieldSize("field128", apache::thrift::protocol::T_MAP, 128);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, std::map<float, std::string>>::serializedSize<false>(*prot_, this->field128);
  xfer += prot_->serializedFieldSize("field129", apache::thrift::protocol::T_BYTE, 129);
  xfer += prot_->serializedSizeByte(this->field129);
  xfer += prot_->serializedFieldSize("field130", apache::thrift::protocol::T_BYTE, 130);
  xfer += prot_->serializedSizeByte(this->field130);
  xfer += prot_->serializedFieldSize("field131", apache::thrift::protocol::T_MAP, 131);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct0, int8_t>>::serializedSize<false>(*prot_, this->field131);
  xfer += prot_->serializedFieldSize("field132", apache::thrift::protocol::T_LIST, 132);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field132);
  xfer += prot_->serializedFieldSize("field133", apache::thrift::protocol::T_STRING, 133);
  xfer += prot_->serializedSizeString(this->field133);
  xfer += prot_->serializedFieldSize("field134", apache::thrift::protocol::T_MAP, 134);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int16_t, std::string>>::serializedSize<false>(*prot_, this->field134);
  xfer += prot_->serializedFieldSize("field135", apache::thrift::protocol::T_DOUBLE, 135);
  xfer += prot_->serializedSizeDouble(this->field135);
  xfer += prot_->serializedFieldSize("field136", apache::thrift::protocol::T_LIST, 136);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int64_t>>>::serializedSize<false>(*prot_, this->field136);
  xfer += prot_->serializedFieldSize("field137", apache::thrift::protocol::T_LIST, 137);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field137);
  xfer += prot_->serializedFieldSize("field138", apache::thrift::protocol::T_SET, 138);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field138);
  xfer += prot_->serializedFieldSize("field139", apache::thrift::protocol::T_SET, 139);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field139);
  xfer += prot_->serializedFieldSize("field140", apache::thrift::protocol::T_I32, 140);
  xfer += prot_->serializedSizeI32(this->field140);
  xfer += prot_->serializedFieldSize("field141", apache::thrift::protocol::T_STRUCT, 141);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field141);
  xfer += prot_->serializedFieldSize("field142", apache::thrift::protocol::T_STRUCT, 142);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field142);
  xfer += prot_->serializedFieldSize("field143", apache::thrift::protocol::T_MAP, 143);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int32_t, std::string>>::serializedSize<false>(*prot_, this->field143);
  xfer += prot_->serializedFieldSize("field144", apache::thrift::protocol::T_MAP, 144);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int32_t>>::serializedSize<false>(*prot_, this->field144);
  xfer += prot_->serializedFieldSize("field145", apache::thrift::protocol::T_STRUCT, 145);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSizeZC(prot_, &this->field145);
  xfer += prot_->serializedFieldSize("field146", apache::thrift::protocol::T_LIST, 146);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field146);
  xfer += prot_->serializedFieldSize("field147", apache::thrift::protocol::T_STRUCT, 147);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field147);
  xfer += prot_->serializedFieldSize("field148", apache::thrift::protocol::T_STRING, 148);
  xfer += prot_->serializedSizeString(this->field148);
  xfer += prot_->serializedFieldSize("field149", apache::thrift::protocol::T_SET, 149);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field149);
  xfer += prot_->serializedFieldSize("field150", apache::thrift::protocol::T_DOUBLE, 150);
  xfer += prot_->serializedSizeDouble(this->field150);
  xfer += prot_->serializedFieldSize("field151", apache::thrift::protocol::T_STRUCT, 151);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field151);
  xfer += prot_->serializedFieldSize("field152", apache::thrift::protocol::T_I32, 152);
  xfer += prot_->serializedSizeI32(this->field152);
  xfer += prot_->serializedFieldSize("field153", apache::thrift::protocol::T_LIST, 153);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field153);
  xfer += prot_->serializedFieldSize("field154", apache::thrift::protocol::T_STRING, 154);
  xfer += prot_->serializedSizeZCBinary(this->field154);
  xfer += prot_->serializedFieldSize("field155", apache::thrift::protocol::T_BOOL, 155);
  xfer += prot_->serializedSizeBool(this->field155);
  xfer += prot_->serializedFieldSize("field156", apache::thrift::protocol::T_STRUCT, 156);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field156);
  xfer += prot_->serializedFieldSize("field157", apache::thrift::protocol::T_FLOAT, 157);
  xfer += prot_->serializedSizeFloat(this->field157);
  xfer += prot_->serializedFieldSize("field158", apache::thrift::protocol::T_STRING, 158);
  xfer += prot_->serializedSizeString(this->field158);
  xfer += prot_->serializedFieldSize("field159", apache::thrift::protocol::T_BYTE, 159);
  xfer += prot_->serializedSizeByte(this->field159);
  xfer += prot_->serializedFieldSize("field160", apache::thrift::protocol::T_LIST, 160);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field160);
  xfer += prot_->serializedFieldSize("field161", apache::thrift::protocol::T_STRUCT, 161);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field161);
  xfer += prot_->serializedFieldSize("field162", apache::thrift::protocol::T_I64, 162);
  xfer += prot_->serializedSizeI64(this->field162);
  xfer += prot_->serializedFieldSize("field163", apache::thrift::protocol::T_STRING, 163);
  xfer += prot_->serializedSizeString(this->field163);
  xfer += prot_->serializedFieldSize("field164", apache::thrift::protocol::T_STRUCT, 164);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSizeZC(prot_, &this->field164);
  xfer += prot_->serializedFieldSize("field165", apache::thrift::protocol::T_DOUBLE, 165);
  xfer += prot_->serializedSizeDouble(this->field165);
  xfer += prot_->serializedFieldSize("field166", apache::thrift::protocol::T_I32, 166);
  xfer += prot_->serializedSizeI32(this->field166);
  xfer += prot_->serializedFieldSize("field167", apache::thrift::protocol::T_STRUCT, 167);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSizeZC(prot_, &this->field167);
  xfer += prot_->serializedFieldSize("field168", apache::thrift::protocol::T_STRUCT, 168);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field168);
  xfer += prot_->serializedFieldSize("field169", apache::thrift::protocol::T_STRING, 169);
  xfer += prot_->serializedSizeString(this->field169);
  xfer += prot_->serializedFieldSize("field170", apache::thrift::protocol::T_STRING, 170);
  xfer += prot_->serializedSizeZCBinary(this->field170);
  xfer += prot_->serializedFieldSize("field171", apache::thrift::protocol::T_STRUCT, 171);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field171);
  xfer += prot_->serializedFieldSize("field172", apache::thrift::protocol::T_FLOAT, 172);
  xfer += prot_->serializedSizeFloat(this->field172);
  xfer += prot_->serializedFieldSize("field173", apache::thrift::protocol::T_DOUBLE, 173);
  xfer += prot_->serializedSizeDouble(this->field173);
  xfer += prot_->serializedFieldSize("field174", apache::thrift::protocol::T_SET, 174);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field174);
  xfer += prot_->serializedFieldSize("field175", apache::thrift::protocol::T_MAP, 175);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int16_t>>::serializedSize<false>(*prot_, this->field175);
  xfer += prot_->serializedFieldSize("field176", apache::thrift::protocol::T_LIST, 176);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::vector<std::map<int64_t, bool>>>::serializedSize<false>(*prot_, this->field176);
  xfer += prot_->serializedFieldSize("field177", apache::thrift::protocol::T_SET, 177);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field177);
  xfer += prot_->serializedFieldSize("field178", apache::thrift::protocol::T_STRUCT, 178);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field178);
  xfer += prot_->serializedFieldSize("field179", apache::thrift::protocol::T_MAP, 179);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int32_t,  ::cpp2::Struct1>>::serializedSize<false>(*prot_, this->field179);
  xfer += prot_->serializedFieldSize("field180", apache::thrift::protocol::T_STRUCT, 180);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSizeZC(prot_, &this->field180);
  xfer += prot_->serializedFieldSize("field181", apache::thrift::protocol::T_MAP, 181);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int16_t>>::serializedSize<false>(*prot_, this->field181);
  xfer += prot_->serializedFieldSize("field182", apache::thrift::protocol::T_FLOAT, 182);
  xfer += prot_->serializedSizeFloat(this->field182);
  xfer += prot_->serializedFieldSize("field183", apache::thrift::protocol::T_LIST, 183);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field183);
  xfer += prot_->serializedFieldSize("field184", apache::thrift::protocol::T_I16, 184);
  xfer += prot_->serializedSizeI16(this->field184);
  xfer += prot_->serializedFieldSize("field185", apache::thrift::protocol::T_STRUCT, 185);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field185);
  xfer += prot_->serializedFieldSize("field186", apache::thrift::protocol::T_SET, 186);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct3>>::serializedSize<false>(*prot_, this->field186);
  xfer += prot_->serializedFieldSize("field187", apache::thrift::protocol::T_BOOL, 187);
  xfer += prot_->serializedSizeBool(this->field187);
  xfer += prot_->serializedFieldSize("field188", apache::thrift::protocol::T_STRUCT, 188);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSizeZC(prot_, &this->field188);
  xfer += prot_->serializedFieldSize("field189", apache::thrift::protocol::T_STRUCT, 189);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field189);
  xfer += prot_->serializedFieldSize("field190", apache::thrift::protocol::T_FLOAT, 190);
  xfer += prot_->serializedSizeFloat(this->field190);
  xfer += prot_->serializedFieldSize("field191", apache::thrift::protocol::T_LIST, 191);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field191);
  xfer += prot_->serializedFieldSize("field192", apache::thrift::protocol::T_MAP, 192);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::string>, ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>>, std::map<std::vector<std::string>, std::vector<std::map<double, int8_t>>>>::serializedSize<false>(*prot_, this->field192);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct11::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct11");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::write(prot_, &this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::write(prot_, &this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->writeByte(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct2>>::write(*prot_, this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int8_t>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map< ::cpp2::Struct2, std::vector<int64_t>>>::write(*prot_, this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_MAP, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct1, int32_t>>::write(*prot_, this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::map<int16_t, std::map<int64_t, float>>>::write(*prot_, this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_STRUCT, 11);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::write(prot_, &this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_BOOL, 12);
  xfer += prot_->writeBool(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_FLOAT, 13);
  xfer += prot_->writeFloat(this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_STRUCT, 14);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::write(prot_, &this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_STRING, 15);
  xfer += prot_->writeString(this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_BYTE, 16);
  xfer += prot_->writeByte(this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_LIST, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_STRUCT, 18);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::write(prot_, &this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_BYTE, 19);
  xfer += prot_->writeByte(this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_I32, 20);
  xfer += prot_->writeI32(this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_BYTE, 21);
  xfer += prot_->writeByte(this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_MAP, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<std::vector<int32_t>, std::set<int32_t>>>::write(*prot_, this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_BYTE, 23);
  xfer += prot_->writeByte(this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_FLOAT, 24);
  xfer += prot_->writeFloat(this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_STRUCT, 25);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::write(prot_, &this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_SET, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_STRING, 27);
  xfer += prot_->writeBinary(this->field27);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_BOOL, 28);
  xfer += prot_->writeBool(this->field28);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field29", apache::thrift::protocol::T_BYTE, 29);
  xfer += prot_->writeByte(this->field29);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field30", apache::thrift::protocol::T_MAP, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int8_t, double>>::write(*prot_, this->field30);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field31", apache::thrift::protocol::T_MAP, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::floating_point>, std::map<std::map<float, float>, double>>::write(*prot_, this->field31);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field32", apache::thrift::protocol::T_STRUCT, 32);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::write(prot_, &this->field32);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field33", apache::thrift::protocol::T_SET, 33);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field33);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field34", apache::thrift::protocol::T_I64, 34);
  xfer += prot_->writeI64(this->field34);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field35", apache::thrift::protocol::T_BYTE, 35);
  xfer += prot_->writeByte(this->field35);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field36", apache::thrift::protocol::T_I16, 36);
  xfer += prot_->writeI16(this->field36);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field37", apache::thrift::protocol::T_STRING, 37);
  xfer += prot_->writeBinary(this->field37);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field38", apache::thrift::protocol::T_SET, 38);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field38);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field39", apache::thrift::protocol::T_I16, 39);
  xfer += prot_->writeI16(this->field39);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field40", apache::thrift::protocol::T_MAP, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int32_t,  ::cpp2::Struct2>>::write(*prot_, this->field40);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field41", apache::thrift::protocol::T_BYTE, 41);
  xfer += prot_->writeByte(this->field41);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field42", apache::thrift::protocol::T_BOOL, 42);
  xfer += prot_->writeBool(this->field42);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field43", apache::thrift::protocol::T_FLOAT, 43);
  xfer += prot_->writeFloat(this->field43);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field44", apache::thrift::protocol::T_I16, 44);
  xfer += prot_->writeI16(this->field44);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field45", apache::thrift::protocol::T_I32, 45);
  xfer += prot_->writeI32(this->field45);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field46", apache::thrift::protocol::T_BOOL, 46);
  xfer += prot_->writeBool(this->field46);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field47", apache::thrift::protocol::T_MAP, 47);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int16_t>>::write(*prot_, this->field47);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field48", apache::thrift::protocol::T_MAP, 48);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int8_t, std::string>>::write(*prot_, this->field48);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field49", apache::thrift::protocol::T_MAP, 49);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int16_t>>::write(*prot_, this->field49);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field50", apache::thrift::protocol::T_LIST, 50);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field50);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field51", apache::thrift::protocol::T_LIST, 51);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field51);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field52", apache::thrift::protocol::T_STRUCT, 52);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field52);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field53", apache::thrift::protocol::T_STRING, 53);
  xfer += prot_->writeBinary(this->field53);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field54", apache::thrift::protocol::T_SET, 54);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field54);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field55", apache::thrift::protocol::T_FLOAT, 55);
  xfer += prot_->writeFloat(this->field55);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field56", apache::thrift::protocol::T_MAP, 56);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int16_t>>::write(*prot_, this->field56);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field57", apache::thrift::protocol::T_STRING, 57);
  xfer += prot_->writeBinary(this->field57);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field58", apache::thrift::protocol::T_DOUBLE, 58);
  xfer += prot_->writeDouble(this->field58);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field59", apache::thrift::protocol::T_BYTE, 59);
  xfer += prot_->writeByte(this->field59);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field60", apache::thrift::protocol::T_BYTE, 60);
  xfer += prot_->writeByte(this->field60);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field61", apache::thrift::protocol::T_MAP, 61);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, bool>>::write(*prot_, this->field61);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field62", apache::thrift::protocol::T_STRING, 62);
  xfer += prot_->writeString(this->field62);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field63", apache::thrift::protocol::T_MAP, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<int32_t, std::vector<int64_t>>>::write(*prot_, this->field63);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field64", apache::thrift::protocol::T_MAP, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::set<int32_t>, int8_t>>::write(*prot_, this->field64);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field65", apache::thrift::protocol::T_SET, 65);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field65);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field66", apache::thrift::protocol::T_BOOL, 66);
  xfer += prot_->writeBool(this->field66);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field67", apache::thrift::protocol::T_DOUBLE, 67);
  xfer += prot_->writeDouble(this->field67);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field68", apache::thrift::protocol::T_STRUCT, 68);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::write(prot_, &this->field68);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field69", apache::thrift::protocol::T_BOOL, 69);
  xfer += prot_->writeBool(this->field69);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field70", apache::thrift::protocol::T_LIST, 70);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::structure>>, std::vector<std::set< ::cpp2::Struct7>>>::write(*prot_, this->field70);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field71", apache::thrift::protocol::T_LIST, 71);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<double>>>::write(*prot_, this->field71);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field72", apache::thrift::protocol::T_STRING, 72);
  xfer += prot_->writeBinary(this->field72);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field73", apache::thrift::protocol::T_MAP, 73);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int8_t>>::write(*prot_, this->field73);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field74", apache::thrift::protocol::T_STRING, 74);
  xfer += prot_->writeString(this->field74);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field75", apache::thrift::protocol::T_I32, 75);
  xfer += prot_->writeI32(this->field75);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field76", apache::thrift::protocol::T_BOOL, 76);
  xfer += prot_->writeBool(this->field76);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field77", apache::thrift::protocol::T_BYTE, 77);
  xfer += prot_->writeByte(this->field77);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field78", apache::thrift::protocol::T_MAP, 78);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int16_t>>::write(*prot_, this->field78);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field79", apache::thrift::protocol::T_STRING, 79);
  xfer += prot_->writeString(this->field79);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field80", apache::thrift::protocol::T_LIST, 80);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field80);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field81", apache::thrift::protocol::T_BYTE, 81);
  xfer += prot_->writeByte(this->field81);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field82", apache::thrift::protocol::T_LIST, 82);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field82);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field83", apache::thrift::protocol::T_BYTE, 83);
  xfer += prot_->writeByte(this->field83);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field84", apache::thrift::protocol::T_I32, 84);
  xfer += prot_->writeI32(this->field84);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field85", apache::thrift::protocol::T_MAP, 85);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>, std::map<std::set<int16_t>, std::string>>::write(*prot_, this->field85);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field86", apache::thrift::protocol::T_MAP, 86);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::map<std::string, std::map<bool, int64_t>>>::write(*prot_, this->field86);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field87", apache::thrift::protocol::T_DOUBLE, 87);
  xfer += prot_->writeDouble(this->field87);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field88", apache::thrift::protocol::T_LIST, 88);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field88);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field89", apache::thrift::protocol::T_STRUCT, 89);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field89);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field90", apache::thrift::protocol::T_I16, 90);
  xfer += prot_->writeI16(this->field90);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field91", apache::thrift::protocol::T_SET, 91);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field91);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field92", apache::thrift::protocol::T_I64, 92);
  xfer += prot_->writeI64(this->field92);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field93", apache::thrift::protocol::T_MAP, 93);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<int64_t>, int8_t>>::write(*prot_, this->field93);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field94", apache::thrift::protocol::T_LIST, 94);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int8_t>>>::write(*prot_, this->field94);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field95", apache::thrift::protocol::T_BYTE, 95);
  xfer += prot_->writeByte(this->field95);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field96", apache::thrift::protocol::T_FLOAT, 96);
  xfer += prot_->writeFloat(this->field96);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field97", apache::thrift::protocol::T_LIST, 97);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct1>>::write(*prot_, this->field97);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field98", apache::thrift::protocol::T_SET, 98);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field98);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field99", apache::thrift::protocol::T_I32, 99);
  xfer += prot_->writeI32(this->field99);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field100", apache::thrift::protocol::T_LIST, 100);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::vector<std::map<bool, bool>>>::write(*prot_, this->field100);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field101", apache::thrift::protocol::T_FLOAT, 101);
  xfer += prot_->writeFloat(this->field101);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field102", apache::thrift::protocol::T_LIST, 102);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field102);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field103", apache::thrift::protocol::T_STRING, 103);
  xfer += prot_->writeString(this->field103);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field104", apache::thrift::protocol::T_SET, 104);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field104);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field105", apache::thrift::protocol::T_STRUCT, 105);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field105);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field106", apache::thrift::protocol::T_STRING, 106);
  xfer += prot_->writeString(this->field106);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field107", apache::thrift::protocol::T_FLOAT, 107);
  xfer += prot_->writeFloat(this->field107);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field108", apache::thrift::protocol::T_STRING, 108);
  xfer += prot_->writeString(this->field108);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field109", apache::thrift::protocol::T_BOOL, 109);
  xfer += prot_->writeBool(this->field109);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field110", apache::thrift::protocol::T_MAP, 110);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::string>, std::map< ::cpp2::Struct4, std::string>>::write(*prot_, this->field110);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field111", apache::thrift::protocol::T_BOOL, 111);
  xfer += prot_->writeBool(this->field111);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field112", apache::thrift::protocol::T_LIST, 112);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field112);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field113", apache::thrift::protocol::T_STRUCT, 113);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::write(prot_, &this->field113);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field114", apache::thrift::protocol::T_STRING, 114);
  xfer += prot_->writeString(this->field114);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field115", apache::thrift::protocol::T_SET, 115);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field115);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field116", apache::thrift::protocol::T_BYTE, 116);
  xfer += prot_->writeByte(this->field116);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field117", apache::thrift::protocol::T_I32, 117);
  xfer += prot_->writeI32(this->field117);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field118", apache::thrift::protocol::T_MAP, 118);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int8_t>>::write(*prot_, this->field118);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field119", apache::thrift::protocol::T_BOOL, 119);
  xfer += prot_->writeBool(this->field119);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field120", apache::thrift::protocol::T_STRING, 120);
  xfer += prot_->writeString(this->field120);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field121", apache::thrift::protocol::T_LIST, 121);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct0>>::write(*prot_, this->field121);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field122", apache::thrift::protocol::T_SET, 122);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<double>>>::write(*prot_, this->field122);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field123", apache::thrift::protocol::T_STRUCT, 123);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::write(prot_, &this->field123);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field124", apache::thrift::protocol::T_BYTE, 124);
  xfer += prot_->writeByte(this->field124);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field125", apache::thrift::protocol::T_FLOAT, 125);
  xfer += prot_->writeFloat(this->field125);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field126", apache::thrift::protocol::T_MAP, 126);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, float>>::write(*prot_, this->field126);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field127", apache::thrift::protocol::T_STRUCT, 127);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::write(prot_, &this->field127);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field128", apache::thrift::protocol::T_MAP, 128);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, std::map<float, std::string>>::write(*prot_, this->field128);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field129", apache::thrift::protocol::T_BYTE, 129);
  xfer += prot_->writeByte(this->field129);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field130", apache::thrift::protocol::T_BYTE, 130);
  xfer += prot_->writeByte(this->field130);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field131", apache::thrift::protocol::T_MAP, 131);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct0, int8_t>>::write(*prot_, this->field131);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field132", apache::thrift::protocol::T_LIST, 132);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field132);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field133", apache::thrift::protocol::T_STRING, 133);
  xfer += prot_->writeString(this->field133);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field134", apache::thrift::protocol::T_MAP, 134);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int16_t, std::string>>::write(*prot_, this->field134);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field135", apache::thrift::protocol::T_DOUBLE, 135);
  xfer += prot_->writeDouble(this->field135);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field136", apache::thrift::protocol::T_LIST, 136);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int64_t>>>::write(*prot_, this->field136);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field137", apache::thrift::protocol::T_LIST, 137);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field137);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field138", apache::thrift::protocol::T_SET, 138);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field138);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field139", apache::thrift::protocol::T_SET, 139);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field139);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field140", apache::thrift::protocol::T_I32, 140);
  xfer += prot_->writeI32(this->field140);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field141", apache::thrift::protocol::T_STRUCT, 141);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field141);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field142", apache::thrift::protocol::T_STRUCT, 142);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field142);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field143", apache::thrift::protocol::T_MAP, 143);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int32_t, std::string>>::write(*prot_, this->field143);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field144", apache::thrift::protocol::T_MAP, 144);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int32_t>>::write(*prot_, this->field144);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field145", apache::thrift::protocol::T_STRUCT, 145);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::write(prot_, &this->field145);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field146", apache::thrift::protocol::T_LIST, 146);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field146);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field147", apache::thrift::protocol::T_STRUCT, 147);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field147);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field148", apache::thrift::protocol::T_STRING, 148);
  xfer += prot_->writeString(this->field148);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field149", apache::thrift::protocol::T_SET, 149);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field149);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field150", apache::thrift::protocol::T_DOUBLE, 150);
  xfer += prot_->writeDouble(this->field150);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field151", apache::thrift::protocol::T_STRUCT, 151);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field151);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field152", apache::thrift::protocol::T_I32, 152);
  xfer += prot_->writeI32(this->field152);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field153", apache::thrift::protocol::T_LIST, 153);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field153);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field154", apache::thrift::protocol::T_STRING, 154);
  xfer += prot_->writeBinary(this->field154);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field155", apache::thrift::protocol::T_BOOL, 155);
  xfer += prot_->writeBool(this->field155);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field156", apache::thrift::protocol::T_STRUCT, 156);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field156);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field157", apache::thrift::protocol::T_FLOAT, 157);
  xfer += prot_->writeFloat(this->field157);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field158", apache::thrift::protocol::T_STRING, 158);
  xfer += prot_->writeString(this->field158);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field159", apache::thrift::protocol::T_BYTE, 159);
  xfer += prot_->writeByte(this->field159);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field160", apache::thrift::protocol::T_LIST, 160);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field160);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field161", apache::thrift::protocol::T_STRUCT, 161);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field161);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field162", apache::thrift::protocol::T_I64, 162);
  xfer += prot_->writeI64(this->field162);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field163", apache::thrift::protocol::T_STRING, 163);
  xfer += prot_->writeString(this->field163);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field164", apache::thrift::protocol::T_STRUCT, 164);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::write(prot_, &this->field164);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field165", apache::thrift::protocol::T_DOUBLE, 165);
  xfer += prot_->writeDouble(this->field165);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field166", apache::thrift::protocol::T_I32, 166);
  xfer += prot_->writeI32(this->field166);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field167", apache::thrift::protocol::T_STRUCT, 167);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::write(prot_, &this->field167);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field168", apache::thrift::protocol::T_STRUCT, 168);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field168);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field169", apache::thrift::protocol::T_STRING, 169);
  xfer += prot_->writeString(this->field169);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field170", apache::thrift::protocol::T_STRING, 170);
  xfer += prot_->writeBinary(this->field170);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field171", apache::thrift::protocol::T_STRUCT, 171);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field171);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field172", apache::thrift::protocol::T_FLOAT, 172);
  xfer += prot_->writeFloat(this->field172);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field173", apache::thrift::protocol::T_DOUBLE, 173);
  xfer += prot_->writeDouble(this->field173);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field174", apache::thrift::protocol::T_SET, 174);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field174);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field175", apache::thrift::protocol::T_MAP, 175);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int16_t>>::write(*prot_, this->field175);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field176", apache::thrift::protocol::T_LIST, 176);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::vector<std::map<int64_t, bool>>>::write(*prot_, this->field176);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field177", apache::thrift::protocol::T_SET, 177);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field177);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field178", apache::thrift::protocol::T_STRUCT, 178);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field178);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field179", apache::thrift::protocol::T_MAP, 179);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int32_t,  ::cpp2::Struct1>>::write(*prot_, this->field179);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field180", apache::thrift::protocol::T_STRUCT, 180);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::write(prot_, &this->field180);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field181", apache::thrift::protocol::T_MAP, 181);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int16_t>>::write(*prot_, this->field181);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field182", apache::thrift::protocol::T_FLOAT, 182);
  xfer += prot_->writeFloat(this->field182);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field183", apache::thrift::protocol::T_LIST, 183);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field183);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field184", apache::thrift::protocol::T_I16, 184);
  xfer += prot_->writeI16(this->field184);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field185", apache::thrift::protocol::T_STRUCT, 185);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field185);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field186", apache::thrift::protocol::T_SET, 186);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct3>>::write(*prot_, this->field186);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field187", apache::thrift::protocol::T_BOOL, 187);
  xfer += prot_->writeBool(this->field187);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field188", apache::thrift::protocol::T_STRUCT, 188);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::write(prot_, &this->field188);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field189", apache::thrift::protocol::T_STRUCT, 189);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field189);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field190", apache::thrift::protocol::T_FLOAT, 190);
  xfer += prot_->writeFloat(this->field190);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field191", apache::thrift::protocol::T_LIST, 191);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field191);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field192", apache::thrift::protocol::T_MAP, 192);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::string>, ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>>, std::map<std::vector<std::string>, std::vector<std::map<double, int8_t>>>>::write(*prot_, this->field192);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace cpp2 {

template <class Protocol_>
uint32_t Struct12::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field2 = std::set<std::set<double>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<double>>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field6 = std::map<double, double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<double, double>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::read(iprot, &this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field10 = std::map<std::string, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::read(*iprot, this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field13 = std::set<std::map<int16_t, int64_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int16_t, int64_t>>>::read(*iprot, this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field14 = std::map<int16_t, std::vector<int16_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<int16_t, std::vector<int16_t>>>::read(*iprot, this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field18 = std::map<int64_t, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int32_t>>::read(*iprot, this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field19 = std::map<int64_t, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int8_t>>::read(*iprot, this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::read(iprot, &this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field21 = std::map<std::vector<int32_t>, std::vector<float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<std::vector<int32_t>, std::vector<float>>>::read(*iprot, this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::read(iprot, &this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field25 = std::vector<std::set<int64_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int64_t>>>::read(*iprot, this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field27 = std::map<int8_t, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int8_t, std::string>>::read(*iprot, this->field27);
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field28);
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field29);
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 30:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field30);
          this->__isset.field30 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 31:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field31 = std::map<std::string, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::read(*iprot, this->field31);
          this->__isset.field31 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 32:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field32);
          this->__isset.field32 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 33:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field33);
          this->__isset.field33 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 34:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field34);
          this->__isset.field34 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 35:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field35 = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->field35);
          this->__isset.field35 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 36:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field36);
          this->__isset.field36 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 37:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field37);
          this->__isset.field37 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 38:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field38);
          this->__isset.field38 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 39:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field39);
          this->__isset.field39 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 40:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field40);
          this->__isset.field40 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 41:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field41);
          this->__isset.field41 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 42:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field42);
          this->__isset.field42 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 43:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::read(iprot, &this->field43);
          this->__isset.field43 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 44:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field44 = std::map<int8_t, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int32_t>>::read(*iprot, this->field44);
          this->__isset.field44 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 45:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field45);
          this->__isset.field45 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 46:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::read(iprot, &this->field46);
          this->__isset.field46 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 47:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field47 = std::map<double, std::vector<std::map<double, float>>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>>>, std::map<double, std::vector<std::map<double, float>>>>::read(*iprot, this->field47);
          this->__isset.field47 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 48:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field48 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field48);
          this->__isset.field48 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 49:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field49);
          this->__isset.field49 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 50:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field50 = std::map<int16_t,  ::cpp2::Struct5>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int16_t,  ::cpp2::Struct5>>::read(*iprot, this->field50);
          this->__isset.field50 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 51:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field51);
          this->__isset.field51 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 52:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field52);
          this->__isset.field52 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 53:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field53 = std::map<int32_t, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int16_t>>::read(*iprot, this->field53);
          this->__isset.field53 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 54:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field54 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field54);
          this->__isset.field54 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 55:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field55);
          this->__isset.field55 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 56:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field56 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field56);
          this->__isset.field56 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 57:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field57);
          this->__isset.field57 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 58:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field58);
          this->__isset.field58 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 59:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::read(iprot, &this->field59);
          this->__isset.field59 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 60:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field60);
          this->__isset.field60 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 61:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::read(iprot, &this->field61);
          this->__isset.field61 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 62:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field62 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field62);
          this->__isset.field62 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 63:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field63 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field63);
          this->__isset.field63 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 64:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field64 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field64);
          this->__isset.field64 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 65:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field65);
          this->__isset.field65 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 66:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field66 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field66);
          this->__isset.field66 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 67:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field67 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field67);
          this->__isset.field67 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 68:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field68);
          this->__isset.field68 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 69:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field69 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field69);
          this->__isset.field69 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 70:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field70 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field70);
          this->__isset.field70 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 71:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::read(iprot, &this->field71);
          this->__isset.field71 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 72:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field72 = std::map<std::vector<int16_t>, std::vector<bool>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<std::vector<int16_t>, std::vector<bool>>>::read(*iprot, this->field72);
          this->__isset.field72 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 73:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field73);
          this->__isset.field73 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 74:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field74);
          this->__isset.field74 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 75:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field75);
          this->__isset.field75 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 76:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field76 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field76);
          this->__isset.field76 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 77:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field77);
          this->__isset.field77 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 78:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field78);
          this->__isset.field78 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 79:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field79);
          this->__isset.field79 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 80:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field80);
          this->__isset.field80 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 81:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field81);
          this->__isset.field81 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 82:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field82);
          this->__isset.field82 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 83:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field83);
          this->__isset.field83 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 84:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field84);
          this->__isset.field84 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 85:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field85 = std::map<int64_t, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int64_t, std::string>>::read(*iprot, this->field85);
          this->__isset.field85 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 86:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field86);
          this->__isset.field86 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 87:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field87 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field87);
          this->__isset.field87 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 88:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field88);
          this->__isset.field88 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 89:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field89 = std::map<bool, std::map<double, int8_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::map<bool, std::map<double, int8_t>>>::read(*iprot, this->field89);
          this->__isset.field89 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 90:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field90);
          this->__isset.field90 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 91:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field91);
          this->__isset.field91 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 92:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field92 = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->field92);
          this->__isset.field92 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 93:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field93 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field93);
          this->__isset.field93 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 94:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field94 = std::set<std::map<std::string, float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::floating_point>>, std::set<std::map<std::string, float>>>::read(*iprot, this->field94);
          this->__isset.field94 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 95:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field95);
          this->__isset.field95 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 96:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field96 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field96);
          this->__isset.field96 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 97:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field97);
          this->__isset.field97 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 98:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field98);
          this->__isset.field98 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 99:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field99);
          this->__isset.field99 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 100:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field100);
          this->__isset.field100 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct12::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct12");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_BOOL, 1);
  xfer += prot_->serializedSizeBool(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<double>>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_FLOAT, 3);
  xfer += prot_->serializedSizeFloat(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->serializedSizeByte(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_BYTE, 5);
  xfer += prot_->serializedSizeByte(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<double, double>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->serializedSizeByte(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_DOUBLE, 8);
  xfer += prot_->serializedSizeDouble(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::serializedSize(prot_, &this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_STRUCT, 11);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_BYTE, 12);
  xfer += prot_->serializedSizeByte(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_SET, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int16_t, int64_t>>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_MAP, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<int16_t, std::vector<int16_t>>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_FLOAT, 15);
  xfer += prot_->serializedSizeFloat(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_BYTE, 16);
  xfer += prot_->serializedSizeByte(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_BOOL, 17);
  xfer += prot_->serializedSizeBool(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_MAP, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int32_t>>::serializedSize<false>(*prot_, this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_MAP, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int8_t>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_STRUCT, 20);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSize(prot_, &this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_MAP, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<std::vector<int32_t>, std::vector<float>>>::serializedSize<false>(*prot_, this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_STRUCT, 22);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_I32, 23);
  xfer += prot_->serializedSizeI32(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_STRUCT, 24);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSize(prot_, &this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_LIST, 25);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int64_t>>>::serializedSize<false>(*prot_, this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_STRUCT, 26);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_MAP, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int8_t, std::string>>::serializedSize<false>(*prot_, this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_STRUCT, 28);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_STRING, 29);
  xfer += prot_->serializedSizeString(this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_DOUBLE, 30);
  xfer += prot_->serializedSizeDouble(this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_MAP, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::serializedSize<false>(*prot_, this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_I32, 32);
  xfer += prot_->serializedSizeI32(this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_STRING, 33);
  xfer += prot_->serializedSizeBinary(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_STRING, 34);
  xfer += prot_->serializedSizeBinary(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_LIST, 35);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_STRING, 36);
  xfer += prot_->serializedSizeString(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_STRING, 37);
  xfer += prot_->serializedSizeBinary(this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_I32, 38);
  xfer += prot_->serializedSizeI32(this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_BYTE, 39);
  xfer += prot_->serializedSizeByte(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_BYTE, 40);
  xfer += prot_->serializedSizeByte(this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_STRING, 41);
  xfer += prot_->serializedSizeBinary(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_BYTE, 42);
  xfer += prot_->serializedSizeByte(this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_STRUCT, 43);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::serializedSize(prot_, &this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_MAP, 44);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int32_t>>::serializedSize<false>(*prot_, this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_BYTE, 45);
  xfer += prot_->serializedSizeByte(this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_STRUCT, 46);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSize(prot_, &this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_MAP, 47);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>>>, std::map<double, std::vector<std::map<double, float>>>>::serializedSize<false>(*prot_, this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_LIST, 48);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_STRUCT, 49);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_MAP, 50);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int16_t,  ::cpp2::Struct5>>::serializedSize<false>(*prot_, this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_BOOL, 51);
  xfer += prot_->serializedSizeBool(this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_STRUCT, 52);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_MAP, 53);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int16_t>>::serializedSize<false>(*prot_, this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_LIST, 54);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_I64, 55);
  xfer += prot_->serializedSizeI64(this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_LIST, 56);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_BOOL, 57);
  xfer += prot_->serializedSizeBool(this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_BYTE, 58);
  xfer += prot_->serializedSizeByte(this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_STRUCT, 59);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSize(prot_, &this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_I16, 60);
  xfer += prot_->serializedSizeI16(this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_STRUCT, 61);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSize(prot_, &this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_SET, 62);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_SET, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_LIST, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_STRING, 65);
  xfer += prot_->serializedSizeString(this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_LIST, 66);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_LIST, 67);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_I64, 68);
  xfer += prot_->serializedSizeI64(this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_LIST, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_SET, 70);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_STRUCT, 71);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSize(prot_, &this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_MAP, 72);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<std::vector<int16_t>, std::vector<bool>>>::serializedSize<false>(*prot_, this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_STRUCT, 73);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_STRUCT, 74);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_I64, 75);
  xfer += prot_->serializedSizeI64(this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_SET, 76);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_I64, 77);
  xfer += prot_->serializedSizeI64(this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_BYTE, 78);
  xfer += prot_->serializedSizeByte(this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_I64, 79);
  xfer += prot_->serializedSizeI64(this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_DOUBLE, 80);
  xfer += prot_->serializedSizeDouble(this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_I16, 81);
  xfer += prot_->serializedSizeI16(this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_I64, 82);
  xfer += prot_->serializedSizeI64(this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_BYTE, 83);
  xfer += prot_->serializedSizeByte(this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_I32, 84);
  xfer += prot_->serializedSizeI32(this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_MAP, 85);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int64_t, std::string>>::serializedSize<false>(*prot_, this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_FLOAT, 86);
  xfer += prot_->serializedSizeFloat(this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_SET, 87);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_STRING, 88);
  xfer += prot_->serializedSizeString(this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_MAP, 89);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::map<bool, std::map<double, int8_t>>>::serializedSize<false>(*prot_, this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_STRING, 90);
  xfer += prot_->serializedSizeBinary(this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_BOOL, 91);
  xfer += prot_->serializedSizeBool(this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_LIST, 92);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_SET, 93);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_SET, 94);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::floating_point>>, std::set<std::map<std::string, float>>>::serializedSize<false>(*prot_, this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_FLOAT, 95);
  xfer += prot_->serializedSizeFloat(this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_LIST, 96);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field96);
  xfer += prot_->serializedFieldSize("field97", apache::thrift::protocol::T_STRING, 97);
  xfer += prot_->serializedSizeString(this->field97);
  xfer += prot_->serializedFieldSize("field98", apache::thrift::protocol::T_STRING, 98);
  xfer += prot_->serializedSizeString(this->field98);
  xfer += prot_->serializedFieldSize("field99", apache::thrift::protocol::T_I32, 99);
  xfer += prot_->serializedSizeI32(this->field99);
  xfer += prot_->serializedFieldSize("field100", apache::thrift::protocol::T_DOUBLE, 100);
  xfer += prot_->serializedSizeDouble(this->field100);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct12::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct12");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_BOOL, 1);
  xfer += prot_->serializedSizeBool(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<double>>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_FLOAT, 3);
  xfer += prot_->serializedSizeFloat(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->serializedSizeByte(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_BYTE, 5);
  xfer += prot_->serializedSizeByte(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<double, double>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->serializedSizeByte(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_DOUBLE, 8);
  xfer += prot_->serializedSizeDouble(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::serializedSizeZC(prot_, &this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_STRUCT, 11);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_BYTE, 12);
  xfer += prot_->serializedSizeByte(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_SET, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int16_t, int64_t>>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_MAP, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<int16_t, std::vector<int16_t>>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_FLOAT, 15);
  xfer += prot_->serializedSizeFloat(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_BYTE, 16);
  xfer += prot_->serializedSizeByte(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_BOOL, 17);
  xfer += prot_->serializedSizeBool(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_MAP, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int32_t>>::serializedSize<false>(*prot_, this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_MAP, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int8_t>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_STRUCT, 20);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSizeZC(prot_, &this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_MAP, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<std::vector<int32_t>, std::vector<float>>>::serializedSize<false>(*prot_, this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_STRUCT, 22);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_I32, 23);
  xfer += prot_->serializedSizeI32(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_STRUCT, 24);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSizeZC(prot_, &this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_LIST, 25);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int64_t>>>::serializedSize<false>(*prot_, this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_STRUCT, 26);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_MAP, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int8_t, std::string>>::serializedSize<false>(*prot_, this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_STRUCT, 28);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_STRING, 29);
  xfer += prot_->serializedSizeString(this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_DOUBLE, 30);
  xfer += prot_->serializedSizeDouble(this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_MAP, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::serializedSize<false>(*prot_, this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_I32, 32);
  xfer += prot_->serializedSizeI32(this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_STRING, 33);
  xfer += prot_->serializedSizeZCBinary(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_STRING, 34);
  xfer += prot_->serializedSizeZCBinary(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_LIST, 35);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_STRING, 36);
  xfer += prot_->serializedSizeString(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_STRING, 37);
  xfer += prot_->serializedSizeZCBinary(this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_I32, 38);
  xfer += prot_->serializedSizeI32(this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_BYTE, 39);
  xfer += prot_->serializedSizeByte(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_BYTE, 40);
  xfer += prot_->serializedSizeByte(this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_STRING, 41);
  xfer += prot_->serializedSizeZCBinary(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_BYTE, 42);
  xfer += prot_->serializedSizeByte(this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_STRUCT, 43);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::serializedSizeZC(prot_, &this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_MAP, 44);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int32_t>>::serializedSize<false>(*prot_, this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_BYTE, 45);
  xfer += prot_->serializedSizeByte(this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_STRUCT, 46);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSizeZC(prot_, &this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_MAP, 47);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>>>, std::map<double, std::vector<std::map<double, float>>>>::serializedSize<false>(*prot_, this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_LIST, 48);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_STRUCT, 49);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_MAP, 50);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int16_t,  ::cpp2::Struct5>>::serializedSize<false>(*prot_, this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_BOOL, 51);
  xfer += prot_->serializedSizeBool(this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_STRUCT, 52);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_MAP, 53);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int16_t>>::serializedSize<false>(*prot_, this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_LIST, 54);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_I64, 55);
  xfer += prot_->serializedSizeI64(this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_LIST, 56);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_BOOL, 57);
  xfer += prot_->serializedSizeBool(this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_BYTE, 58);
  xfer += prot_->serializedSizeByte(this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_STRUCT, 59);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSizeZC(prot_, &this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_I16, 60);
  xfer += prot_->serializedSizeI16(this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_STRUCT, 61);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSizeZC(prot_, &this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_SET, 62);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_SET, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_LIST, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_STRING, 65);
  xfer += prot_->serializedSizeString(this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_LIST, 66);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_LIST, 67);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_I64, 68);
  xfer += prot_->serializedSizeI64(this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_LIST, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_SET, 70);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_STRUCT, 71);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSizeZC(prot_, &this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_MAP, 72);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<std::vector<int16_t>, std::vector<bool>>>::serializedSize<false>(*prot_, this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_STRUCT, 73);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_STRUCT, 74);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_I64, 75);
  xfer += prot_->serializedSizeI64(this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_SET, 76);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_I64, 77);
  xfer += prot_->serializedSizeI64(this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_BYTE, 78);
  xfer += prot_->serializedSizeByte(this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_I64, 79);
  xfer += prot_->serializedSizeI64(this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_DOUBLE, 80);
  xfer += prot_->serializedSizeDouble(this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_I16, 81);
  xfer += prot_->serializedSizeI16(this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_I64, 82);
  xfer += prot_->serializedSizeI64(this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_BYTE, 83);
  xfer += prot_->serializedSizeByte(this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_I32, 84);
  xfer += prot_->serializedSizeI32(this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_MAP, 85);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int64_t, std::string>>::serializedSize<false>(*prot_, this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_FLOAT, 86);
  xfer += prot_->serializedSizeFloat(this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_SET, 87);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_STRING, 88);
  xfer += prot_->serializedSizeString(this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_MAP, 89);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::map<bool, std::map<double, int8_t>>>::serializedSize<false>(*prot_, this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_STRING, 90);
  xfer += prot_->serializedSizeZCBinary(this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_BOOL, 91);
  xfer += prot_->serializedSizeBool(this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_LIST, 92);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_SET, 93);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_SET, 94);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::floating_point>>, std::set<std::map<std::string, float>>>::serializedSize<false>(*prot_, this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_FLOAT, 95);
  xfer += prot_->serializedSizeFloat(this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_LIST, 96);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field96);
  xfer += prot_->serializedFieldSize("field97", apache::thrift::protocol::T_STRING, 97);
  xfer += prot_->serializedSizeString(this->field97);
  xfer += prot_->serializedFieldSize("field98", apache::thrift::protocol::T_STRING, 98);
  xfer += prot_->serializedSizeString(this->field98);
  xfer += prot_->serializedFieldSize("field99", apache::thrift::protocol::T_I32, 99);
  xfer += prot_->serializedSizeI32(this->field99);
  xfer += prot_->serializedFieldSize("field100", apache::thrift::protocol::T_DOUBLE, 100);
  xfer += prot_->serializedSizeDouble(this->field100);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct12::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct12");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_BOOL, 1);
  xfer += prot_->writeBool(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<double>>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_FLOAT, 3);
  xfer += prot_->writeFloat(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->writeByte(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_BYTE, 5);
  xfer += prot_->writeByte(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<double, double>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->writeByte(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_DOUBLE, 8);
  xfer += prot_->writeDouble(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::write(prot_, &this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::write(*prot_, this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_STRUCT, 11);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_BYTE, 12);
  xfer += prot_->writeByte(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_SET, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int16_t, int64_t>>>::write(*prot_, this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_MAP, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<int16_t, std::vector<int16_t>>>::write(*prot_, this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_FLOAT, 15);
  xfer += prot_->writeFloat(this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_BYTE, 16);
  xfer += prot_->writeByte(this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_BOOL, 17);
  xfer += prot_->writeBool(this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_MAP, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int32_t>>::write(*prot_, this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_MAP, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int8_t>>::write(*prot_, this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_STRUCT, 20);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::write(prot_, &this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_MAP, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<std::vector<int32_t>, std::vector<float>>>::write(*prot_, this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_STRUCT, 22);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_I32, 23);
  xfer += prot_->writeI32(this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_STRUCT, 24);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::write(prot_, &this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_LIST, 25);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int64_t>>>::write(*prot_, this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_STRUCT, 26);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_MAP, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int8_t, std::string>>::write(*prot_, this->field27);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_STRUCT, 28);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field28);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field29", apache::thrift::protocol::T_STRING, 29);
  xfer += prot_->writeString(this->field29);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field30", apache::thrift::protocol::T_DOUBLE, 30);
  xfer += prot_->writeDouble(this->field30);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field31", apache::thrift::protocol::T_MAP, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::write(*prot_, this->field31);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field32", apache::thrift::protocol::T_I32, 32);
  xfer += prot_->writeI32(this->field32);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field33", apache::thrift::protocol::T_STRING, 33);
  xfer += prot_->writeBinary(this->field33);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field34", apache::thrift::protocol::T_STRING, 34);
  xfer += prot_->writeBinary(this->field34);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field35", apache::thrift::protocol::T_LIST, 35);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->field35);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field36", apache::thrift::protocol::T_STRING, 36);
  xfer += prot_->writeString(this->field36);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field37", apache::thrift::protocol::T_STRING, 37);
  xfer += prot_->writeBinary(this->field37);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field38", apache::thrift::protocol::T_I32, 38);
  xfer += prot_->writeI32(this->field38);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field39", apache::thrift::protocol::T_BYTE, 39);
  xfer += prot_->writeByte(this->field39);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field40", apache::thrift::protocol::T_BYTE, 40);
  xfer += prot_->writeByte(this->field40);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field41", apache::thrift::protocol::T_STRING, 41);
  xfer += prot_->writeBinary(this->field41);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field42", apache::thrift::protocol::T_BYTE, 42);
  xfer += prot_->writeByte(this->field42);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field43", apache::thrift::protocol::T_STRUCT, 43);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::write(prot_, &this->field43);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field44", apache::thrift::protocol::T_MAP, 44);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int32_t>>::write(*prot_, this->field44);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field45", apache::thrift::protocol::T_BYTE, 45);
  xfer += prot_->writeByte(this->field45);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field46", apache::thrift::protocol::T_STRUCT, 46);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::write(prot_, &this->field46);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field47", apache::thrift::protocol::T_MAP, 47);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>>>, std::map<double, std::vector<std::map<double, float>>>>::write(*prot_, this->field47);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field48", apache::thrift::protocol::T_LIST, 48);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field48);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field49", apache::thrift::protocol::T_STRUCT, 49);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field49);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field50", apache::thrift::protocol::T_MAP, 50);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int16_t,  ::cpp2::Struct5>>::write(*prot_, this->field50);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field51", apache::thrift::protocol::T_BOOL, 51);
  xfer += prot_->writeBool(this->field51);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field52", apache::thrift::protocol::T_STRUCT, 52);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field52);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field53", apache::thrift::protocol::T_MAP, 53);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int16_t>>::write(*prot_, this->field53);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field54", apache::thrift::protocol::T_LIST, 54);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field54);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field55", apache::thrift::protocol::T_I64, 55);
  xfer += prot_->writeI64(this->field55);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field56", apache::thrift::protocol::T_LIST, 56);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field56);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field57", apache::thrift::protocol::T_BOOL, 57);
  xfer += prot_->writeBool(this->field57);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field58", apache::thrift::protocol::T_BYTE, 58);
  xfer += prot_->writeByte(this->field58);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field59", apache::thrift::protocol::T_STRUCT, 59);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::write(prot_, &this->field59);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field60", apache::thrift::protocol::T_I16, 60);
  xfer += prot_->writeI16(this->field60);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field61", apache::thrift::protocol::T_STRUCT, 61);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::write(prot_, &this->field61);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field62", apache::thrift::protocol::T_SET, 62);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field62);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field63", apache::thrift::protocol::T_SET, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field63);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field64", apache::thrift::protocol::T_LIST, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field64);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field65", apache::thrift::protocol::T_STRING, 65);
  xfer += prot_->writeString(this->field65);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field66", apache::thrift::protocol::T_LIST, 66);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field66);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field67", apache::thrift::protocol::T_LIST, 67);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field67);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field68", apache::thrift::protocol::T_I64, 68);
  xfer += prot_->writeI64(this->field68);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field69", apache::thrift::protocol::T_LIST, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field69);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field70", apache::thrift::protocol::T_SET, 70);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field70);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field71", apache::thrift::protocol::T_STRUCT, 71);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::write(prot_, &this->field71);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field72", apache::thrift::protocol::T_MAP, 72);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<std::vector<int16_t>, std::vector<bool>>>::write(*prot_, this->field72);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field73", apache::thrift::protocol::T_STRUCT, 73);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field73);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field74", apache::thrift::protocol::T_STRUCT, 74);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field74);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field75", apache::thrift::protocol::T_I64, 75);
  xfer += prot_->writeI64(this->field75);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field76", apache::thrift::protocol::T_SET, 76);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field76);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field77", apache::thrift::protocol::T_I64, 77);
  xfer += prot_->writeI64(this->field77);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field78", apache::thrift::protocol::T_BYTE, 78);
  xfer += prot_->writeByte(this->field78);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field79", apache::thrift::protocol::T_I64, 79);
  xfer += prot_->writeI64(this->field79);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field80", apache::thrift::protocol::T_DOUBLE, 80);
  xfer += prot_->writeDouble(this->field80);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field81", apache::thrift::protocol::T_I16, 81);
  xfer += prot_->writeI16(this->field81);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field82", apache::thrift::protocol::T_I64, 82);
  xfer += prot_->writeI64(this->field82);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field83", apache::thrift::protocol::T_BYTE, 83);
  xfer += prot_->writeByte(this->field83);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field84", apache::thrift::protocol::T_I32, 84);
  xfer += prot_->writeI32(this->field84);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field85", apache::thrift::protocol::T_MAP, 85);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int64_t, std::string>>::write(*prot_, this->field85);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field86", apache::thrift::protocol::T_FLOAT, 86);
  xfer += prot_->writeFloat(this->field86);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field87", apache::thrift::protocol::T_SET, 87);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field87);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field88", apache::thrift::protocol::T_STRING, 88);
  xfer += prot_->writeString(this->field88);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field89", apache::thrift::protocol::T_MAP, 89);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::map<bool, std::map<double, int8_t>>>::write(*prot_, this->field89);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field90", apache::thrift::protocol::T_STRING, 90);
  xfer += prot_->writeBinary(this->field90);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field91", apache::thrift::protocol::T_BOOL, 91);
  xfer += prot_->writeBool(this->field91);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field92", apache::thrift::protocol::T_LIST, 92);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->field92);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field93", apache::thrift::protocol::T_SET, 93);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field93);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field94", apache::thrift::protocol::T_SET, 94);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::floating_point>>, std::set<std::map<std::string, float>>>::write(*prot_, this->field94);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field95", apache::thrift::protocol::T_FLOAT, 95);
  xfer += prot_->writeFloat(this->field95);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field96", apache::thrift::protocol::T_LIST, 96);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field96);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field97", apache::thrift::protocol::T_STRING, 97);
  xfer += prot_->writeString(this->field97);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field98", apache::thrift::protocol::T_STRING, 98);
  xfer += prot_->writeString(this->field98);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field99", apache::thrift::protocol::T_I32, 99);
  xfer += prot_->writeI32(this->field99);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field100", apache::thrift::protocol::T_DOUBLE, 100);
  xfer += prot_->writeDouble(this->field100);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace cpp2 {

template <class Protocol_>
uint32_t Struct13::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field1 = std::map<double, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<double, float>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field2 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field3 = std::set<std::map<int8_t, int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int8_t, int32_t>>>::read(*iprot, this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field6 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field7 = std::map<std::string, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int64_t>>::read(*iprot, this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field8 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field10 = std::map<double, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int64_t>>::read(*iprot, this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field12 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field15 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::read(iprot, &this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field20 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field26 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field27);
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field28 = std::map<std::vector<std::set<bool>>, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, ::apache::thrift::type_class::integral>, std::map<std::vector<std::set<bool>>, bool>>::read(*iprot, this->field28);
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field29 = std::vector<std::vector<int16_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int16_t>>>::read(*iprot, this->field29);
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 30:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field30);
          this->__isset.field30 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 31:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field31 = std::vector<std::vector<float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<float>>>::read(*iprot, this->field31);
          this->__isset.field31 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 32:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field32);
          this->__isset.field32 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 33:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field33 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field33);
          this->__isset.field33 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 34:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field34);
          this->__isset.field34 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 35:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field35);
          this->__isset.field35 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 36:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field36 = std::map<std::vector<std::string>, std::map<std::string, int64_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>>, std::map<std::vector<std::string>, std::map<std::string, int64_t>>>::read(*iprot, this->field36);
          this->__isset.field36 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 37:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field37);
          this->__isset.field37 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 38:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field38);
          this->__isset.field38 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 39:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field39);
          this->__isset.field39 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 40:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::read(iprot, &this->field40);
          this->__isset.field40 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 41:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field41 = std::set<std::vector<int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int32_t>>>::read(*iprot, this->field41);
          this->__isset.field41 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 42:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field42 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field42);
          this->__isset.field42 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 43:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field43);
          this->__isset.field43 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 44:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field44 = std::vector< ::cpp2::Struct8>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct8>>::read(*iprot, this->field44);
          this->__isset.field44 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 45:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field45);
          this->__isset.field45 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 46:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field46 = std::vector<std::set<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::vector<std::set<std::string>>>::read(*iprot, this->field46);
          this->__isset.field46 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 47:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field47 = std::set<std::set<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>, std::set<std::set<std::string>>>::read(*iprot, this->field47);
          this->__isset.field47 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 48:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field48);
          this->__isset.field48 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 49:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field49);
          this->__isset.field49 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 50:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::read(iprot, &this->field50);
          this->__isset.field50 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 51:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field51);
          this->__isset.field51 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 52:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field52 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field52);
          this->__isset.field52 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 53:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field53);
          this->__isset.field53 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 54:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field54 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field54);
          this->__isset.field54 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 55:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field55);
          this->__isset.field55 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 56:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field56 = std::vector< ::cpp2::Struct0>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct0>>::read(*iprot, this->field56);
          this->__isset.field56 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 57:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field57);
          this->__isset.field57 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 58:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field58);
          this->__isset.field58 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 59:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field59 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field59);
          this->__isset.field59 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 60:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field60 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field60);
          this->__isset.field60 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 61:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field61 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field61);
          this->__isset.field61 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 62:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field62 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field62);
          this->__isset.field62 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 63:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field63 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field63);
          this->__isset.field63 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 64:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field64);
          this->__isset.field64 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 65:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field65);
          this->__isset.field65 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 66:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field66);
          this->__isset.field66 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 67:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field67 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field67);
          this->__isset.field67 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 68:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field68);
          this->__isset.field68 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 69:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field69);
          this->__isset.field69 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 70:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field70);
          this->__isset.field70 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 71:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field71);
          this->__isset.field71 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 72:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field72);
          this->__isset.field72 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 73:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field73);
          this->__isset.field73 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 74:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field74);
          this->__isset.field74 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 75:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field75);
          this->__isset.field75 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 76:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field76 = std::map<bool, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int64_t>>::read(*iprot, this->field76);
          this->__isset.field76 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 77:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field77);
          this->__isset.field77 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 78:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field78 = std::vector<std::map<bool, std::vector<float>>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>>, std::vector<std::map<bool, std::vector<float>>>>::read(*iprot, this->field78);
          this->__isset.field78 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 79:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field79 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field79);
          this->__isset.field79 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 80:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field80);
          this->__isset.field80 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 81:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field81 = std::map< ::cpp2::Struct8,  ::cpp2::Struct7>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::structure>, std::map< ::cpp2::Struct8,  ::cpp2::Struct7>>::read(*iprot, this->field81);
          this->__isset.field81 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 82:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field82);
          this->__isset.field82 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 83:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field83);
          this->__isset.field83 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 84:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field84 = std::map<int16_t,  ::cpp2::Struct2>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int16_t,  ::cpp2::Struct2>>::read(*iprot, this->field84);
          this->__isset.field84 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 85:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field85);
          this->__isset.field85 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 86:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field86);
          this->__isset.field86 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 87:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field87 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field87);
          this->__isset.field87 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 88:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field88);
          this->__isset.field88 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 89:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field89);
          this->__isset.field89 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 90:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field90);
          this->__isset.field90 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 91:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field91 = std::vector<std::map<bool, int8_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::vector<std::map<bool, int8_t>>>::read(*iprot, this->field91);
          this->__isset.field91 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 92:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field92);
          this->__isset.field92 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 93:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field93 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field93);
          this->__isset.field93 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 94:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::read(iprot, &this->field94);
          this->__isset.field94 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 95:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field95);
          this->__isset.field95 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 96:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field96);
          this->__isset.field96 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 97:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field97);
          this->__isset.field97 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 98:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field98);
          this->__isset.field98 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 99:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::read(iprot, &this->field99);
          this->__isset.field99 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 100:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field100 = std::set<std::map<int16_t, float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::set<std::map<int16_t, float>>>::read(*iprot, this->field100);
          this->__isset.field100 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 101:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field101);
          this->__isset.field101 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 102:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field102);
          this->__isset.field102 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 103:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field103 = std::map<int16_t, std::map<bool,  ::cpp2::Struct1>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>, std::map<int16_t, std::map<bool,  ::cpp2::Struct1>>>::read(*iprot, this->field103);
          this->__isset.field103 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 104:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field104);
          this->__isset.field104 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 105:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field105 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field105);
          this->__isset.field105 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 106:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field106);
          this->__isset.field106 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 107:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field107 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field107);
          this->__isset.field107 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 108:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field108 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field108);
          this->__isset.field108 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 109:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field109 = std::vector<std::map<float, int8_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::vector<std::map<float, int8_t>>>::read(*iprot, this->field109);
          this->__isset.field109 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 110:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field110);
          this->__isset.field110 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 111:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field111);
          this->__isset.field111 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 112:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field112);
          this->__isset.field112 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 113:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field113);
          this->__isset.field113 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 114:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field114);
          this->__isset.field114 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 115:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field115 = std::map<std::vector<int8_t>, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<int8_t>, int64_t>>::read(*iprot, this->field115);
          this->__isset.field115 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 116:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field116 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field116);
          this->__isset.field116 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 117:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field117);
          this->__isset.field117 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 118:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field118 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field118);
          this->__isset.field118 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 119:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field119);
          this->__isset.field119 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 120:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field120);
          this->__isset.field120 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 121:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field121);
          this->__isset.field121 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 122:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field122);
          this->__isset.field122 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 123:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field123);
          this->__isset.field123 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 124:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field124);
          this->__isset.field124 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 125:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field125);
          this->__isset.field125 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 126:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field126 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field126);
          this->__isset.field126 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 127:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field127);
          this->__isset.field127 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 128:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field128);
          this->__isset.field128 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 129:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::read(iprot, &this->field129);
          this->__isset.field129 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 130:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field130);
          this->__isset.field130 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 131:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field131);
          this->__isset.field131 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 132:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field132);
          this->__isset.field132 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 133:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field133);
          this->__isset.field133 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 134:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field134 = std::set<std::map< ::cpp2::Struct11, int16_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>>, std::set<std::map< ::cpp2::Struct11, int16_t>>>::read(*iprot, this->field134);
          this->__isset.field134 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 135:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field135);
          this->__isset.field135 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 136:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field136 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field136);
          this->__isset.field136 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 137:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field137);
          this->__isset.field137 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 138:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field138);
          this->__isset.field138 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 139:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field139 = std::set<std::set<double>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<double>>>::read(*iprot, this->field139);
          this->__isset.field139 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 140:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field140);
          this->__isset.field140 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 141:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field141 = std::map<bool, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<bool, float>>::read(*iprot, this->field141);
          this->__isset.field141 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 142:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field142 = std::set<std::vector<double>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::set<std::vector<double>>>::read(*iprot, this->field142);
          this->__isset.field142 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 143:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field143);
          this->__isset.field143 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 144:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field144);
          this->__isset.field144 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 145:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field145 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field145);
          this->__isset.field145 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 146:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field146);
          this->__isset.field146 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 147:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field147);
          this->__isset.field147 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 148:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::read(iprot, &this->field148);
          this->__isset.field148 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 149:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field149 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field149);
          this->__isset.field149 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 150:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field150 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field150);
          this->__isset.field150 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 151:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field151);
          this->__isset.field151 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 152:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field152 = std::vector<std::set<int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int32_t>>>::read(*iprot, this->field152);
          this->__isset.field152 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 153:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field153);
          this->__isset.field153 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 154:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field154 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field154);
          this->__isset.field154 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 155:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field155 = std::map<int32_t, std::set<bool>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<int32_t, std::set<bool>>>::read(*iprot, this->field155);
          this->__isset.field155 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 156:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field156);
          this->__isset.field156 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 157:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field157);
          this->__isset.field157 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 158:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field158 = std::vector<std::vector<int8_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int8_t>>>::read(*iprot, this->field158);
          this->__isset.field158 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 159:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field159);
          this->__isset.field159 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 160:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field160);
          this->__isset.field160 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 161:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field161);
          this->__isset.field161 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 162:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field162 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field162);
          this->__isset.field162 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 163:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field163);
          this->__isset.field163 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 164:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field164);
          this->__isset.field164 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 165:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field165);
          this->__isset.field165 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 166:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field166 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field166);
          this->__isset.field166 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 167:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field167 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field167);
          this->__isset.field167 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 168:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field168 = std::map<bool,  ::cpp2::Struct1>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<bool,  ::cpp2::Struct1>>::read(*iprot, this->field168);
          this->__isset.field168 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 169:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field169);
          this->__isset.field169 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 170:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field170);
          this->__isset.field170 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 171:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field171);
          this->__isset.field171 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 172:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field172 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field172);
          this->__isset.field172 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 173:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field173);
          this->__isset.field173 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 174:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field174 = std::map<int16_t, std::vector<int64_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<int16_t, std::vector<int64_t>>>::read(*iprot, this->field174);
          this->__isset.field174 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 175:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field175);
          this->__isset.field175 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 176:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field176);
          this->__isset.field176 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 177:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field177 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field177);
          this->__isset.field177 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 178:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field178);
          this->__isset.field178 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 179:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field179);
          this->__isset.field179 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 180:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field180 = std::set<std::set<float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<float>>>::read(*iprot, this->field180);
          this->__isset.field180 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 181:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field181 = std::set<std::vector<float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::set<std::vector<float>>>::read(*iprot, this->field181);
          this->__isset.field181 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 182:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field182);
          this->__isset.field182 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 183:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field183);
          this->__isset.field183 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 184:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::read(iprot, &this->field184);
          this->__isset.field184 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 185:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field185 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field185);
          this->__isset.field185 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 186:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field186);
          this->__isset.field186 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 187:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field187);
          this->__isset.field187 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 188:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field188 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field188);
          this->__isset.field188 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 189:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field189);
          this->__isset.field189 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 190:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field190);
          this->__isset.field190 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 191:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field191);
          this->__isset.field191 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 192:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field192 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field192);
          this->__isset.field192 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 193:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field193);
          this->__isset.field193 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 194:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field194);
          this->__isset.field194 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 195:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field195 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field195);
          this->__isset.field195 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 196:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field196);
          this->__isset.field196 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 197:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field197);
          this->__isset.field197 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 198:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field198 = std::vector< ::cpp2::Struct3>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct3>>::read(*iprot, this->field198);
          this->__isset.field198 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 199:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field199 = std::map< ::cpp2::Struct5, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::binary>, std::map< ::cpp2::Struct5, std::string>>::read(*iprot, this->field199);
          this->__isset.field199 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 200:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field200 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field200);
          this->__isset.field200 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 201:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field201 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field201);
          this->__isset.field201 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 202:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field202);
          this->__isset.field202 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 203:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field203);
          this->__isset.field203 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 204:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field204 = std::map<int16_t, std::set<float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<int16_t, std::set<float>>>::read(*iprot, this->field204);
          this->__isset.field204 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 205:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::read(iprot, &this->field205);
          this->__isset.field205 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 206:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field206);
          this->__isset.field206 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 207:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field207 = std::map<std::set<int8_t>, std::vector<float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<std::set<int8_t>, std::vector<float>>>::read(*iprot, this->field207);
          this->__isset.field207 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 208:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field208 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field208);
          this->__isset.field208 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 209:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field209 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field209);
          this->__isset.field209 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 210:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::read(iprot, &this->field210);
          this->__isset.field210 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 211:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field211 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field211);
          this->__isset.field211 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 212:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field212 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field212);
          this->__isset.field212 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 213:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field213 = std::set<std::set<std::set<int64_t>>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>>, std::set<std::set<std::set<int64_t>>>>::read(*iprot, this->field213);
          this->__isset.field213 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 214:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field214 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field214);
          this->__isset.field214 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 215:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field215);
          this->__isset.field215 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 216:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field216);
          this->__isset.field216 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 217:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field217 = std::set<std::map<std::string, bool>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>>, std::set<std::map<std::string, bool>>>::read(*iprot, this->field217);
          this->__isset.field217 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct13::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct13");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<double, float>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int8_t, int32_t>>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeString(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int64_t>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_DOUBLE, 9);
  xfer += prot_->serializedSizeDouble(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int64_t>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_STRING, 11);
  xfer += prot_->serializedSizeBinary(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_SET, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_STRUCT, 13);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_DOUBLE, 14);
  xfer += prot_->serializedSizeDouble(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_SET, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_STRUCT, 16);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSize(prot_, &this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_DOUBLE, 17);
  xfer += prot_->serializedSizeDouble(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_I16, 18);
  xfer += prot_->serializedSizeI16(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_STRING, 19);
  xfer += prot_->serializedSizeBinary(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_LIST, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_I64, 21);
  xfer += prot_->serializedSizeI64(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_STRING, 22);
  xfer += prot_->serializedSizeBinary(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_BOOL, 23);
  xfer += prot_->serializedSizeBool(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_FLOAT, 24);
  xfer += prot_->serializedSizeFloat(this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_I32, 25);
  xfer += prot_->serializedSizeI32(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_LIST, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_I32, 27);
  xfer += prot_->serializedSizeI32(this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_MAP, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, ::apache::thrift::type_class::integral>, std::map<std::vector<std::set<bool>>, bool>>::serializedSize<false>(*prot_, this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_LIST, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int16_t>>>::serializedSize<false>(*prot_, this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_BOOL, 30);
  xfer += prot_->serializedSizeBool(this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_LIST, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<float>>>::serializedSize<false>(*prot_, this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_BYTE, 32);
  xfer += prot_->serializedSizeByte(this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_SET, 33);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_FLOAT, 34);
  xfer += prot_->serializedSizeFloat(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_BYTE, 35);
  xfer += prot_->serializedSizeByte(this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_MAP, 36);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>>, std::map<std::vector<std::string>, std::map<std::string, int64_t>>>::serializedSize<false>(*prot_, this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_FLOAT, 37);
  xfer += prot_->serializedSizeFloat(this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_DOUBLE, 38);
  xfer += prot_->serializedSizeDouble(this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_FLOAT, 39);
  xfer += prot_->serializedSizeFloat(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_STRUCT, 40);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSize(prot_, &this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_SET, 41);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int32_t>>>::serializedSize<false>(*prot_, this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_LIST, 42);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_STRING, 43);
  xfer += prot_->serializedSizeBinary(this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_LIST, 44);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct8>>::serializedSize<false>(*prot_, this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_FLOAT, 45);
  xfer += prot_->serializedSizeFloat(this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_LIST, 46);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::vector<std::set<std::string>>>::serializedSize<false>(*prot_, this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_SET, 47);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>, std::set<std::set<std::string>>>::serializedSize<false>(*prot_, this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_I64, 48);
  xfer += prot_->serializedSizeI64(this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_BYTE, 49);
  xfer += prot_->serializedSizeByte(this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_STRUCT, 50);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSize(prot_, &this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_I64, 51);
  xfer += prot_->serializedSizeI64(this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_SET, 52);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_I16, 53);
  xfer += prot_->serializedSizeI16(this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_LIST, 54);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_I64, 55);
  xfer += prot_->serializedSizeI64(this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_LIST, 56);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct0>>::serializedSize<false>(*prot_, this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_I32, 57);
  xfer += prot_->serializedSizeI32(this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_STRUCT, 58);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_LIST, 59);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_SET, 60);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_LIST, 61);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_LIST, 62);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_SET, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_I32, 64);
  xfer += prot_->serializedSizeI32(this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_STRING, 65);
  xfer += prot_->serializedSizeString(this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_STRING, 66);
  xfer += prot_->serializedSizeBinary(this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_SET, 67);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_STRING, 68);
  xfer += prot_->serializedSizeBinary(this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_FLOAT, 69);
  xfer += prot_->serializedSizeFloat(this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_STRUCT, 70);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_FLOAT, 71);
  xfer += prot_->serializedSizeFloat(this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_I32, 72);
  xfer += prot_->serializedSizeI32(this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_STRUCT, 73);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_I64, 74);
  xfer += prot_->serializedSizeI64(this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_I32, 75);
  xfer += prot_->serializedSizeI32(this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_MAP, 76);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int64_t>>::serializedSize<false>(*prot_, this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_I32, 77);
  xfer += prot_->serializedSizeI32(this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_LIST, 78);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>>, std::vector<std::map<bool, std::vector<float>>>>::serializedSize<false>(*prot_, this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_LIST, 79);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_STRING, 80);
  xfer += prot_->serializedSizeString(this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_MAP, 81);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::structure>, std::map< ::cpp2::Struct8,  ::cpp2::Struct7>>::serializedSize<false>(*prot_, this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_BOOL, 82);
  xfer += prot_->serializedSizeBool(this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_BOOL, 83);
  xfer += prot_->serializedSizeBool(this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_MAP, 84);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int16_t,  ::cpp2::Struct2>>::serializedSize<false>(*prot_, this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_I16, 85);
  xfer += prot_->serializedSizeI16(this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_BYTE, 86);
  xfer += prot_->serializedSizeByte(this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_LIST, 87);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_STRUCT, 88);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_FLOAT, 89);
  xfer += prot_->serializedSizeFloat(this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_FLOAT, 90);
  xfer += prot_->serializedSizeFloat(this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_LIST, 91);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::vector<std::map<bool, int8_t>>>::serializedSize<false>(*prot_, this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_BOOL, 92);
  xfer += prot_->serializedSizeBool(this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_SET, 93);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_STRUCT, 94);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSize(prot_, &this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_BOOL, 95);
  xfer += prot_->serializedSizeBool(this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_BOOL, 96);
  xfer += prot_->serializedSizeBool(this->field96);
  xfer += prot_->serializedFieldSize("field97", apache::thrift::protocol::T_I16, 97);
  xfer += prot_->serializedSizeI16(this->field97);
  xfer += prot_->serializedFieldSize("field98", apache::thrift::protocol::T_BOOL, 98);
  xfer += prot_->serializedSizeBool(this->field98);
  xfer += prot_->serializedFieldSize("field99", apache::thrift::protocol::T_STRUCT, 99);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSize(prot_, &this->field99);
  xfer += prot_->serializedFieldSize("field100", apache::thrift::protocol::T_SET, 100);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::set<std::map<int16_t, float>>>::serializedSize<false>(*prot_, this->field100);
  xfer += prot_->serializedFieldSize("field101", apache::thrift::protocol::T_STRING, 101);
  xfer += prot_->serializedSizeBinary(this->field101);
  xfer += prot_->serializedFieldSize("field102", apache::thrift::protocol::T_I16, 102);
  xfer += prot_->serializedSizeI16(this->field102);
  xfer += prot_->serializedFieldSize("field103", apache::thrift::protocol::T_MAP, 103);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>, std::map<int16_t, std::map<bool,  ::cpp2::Struct1>>>::serializedSize<false>(*prot_, this->field103);
  xfer += prot_->serializedFieldSize("field104", apache::thrift::protocol::T_I64, 104);
  xfer += prot_->serializedSizeI64(this->field104);
  xfer += prot_->serializedFieldSize("field105", apache::thrift::protocol::T_SET, 105);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field105);
  xfer += prot_->serializedFieldSize("field106", apache::thrift::protocol::T_DOUBLE, 106);
  xfer += prot_->serializedSizeDouble(this->field106);
  xfer += prot_->serializedFieldSize("field107", apache::thrift::protocol::T_SET, 107);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field107);
  xfer += prot_->serializedFieldSize("field108", apache::thrift::protocol::T_SET, 108);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field108);
  xfer += prot_->serializedFieldSize("field109", apache::thrift::protocol::T_LIST, 109);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::vector<std::map<float, int8_t>>>::serializedSize<false>(*prot_, this->field109);
  xfer += prot_->serializedFieldSize("field110", apache::thrift::protocol::T_I16, 110);
  xfer += prot_->serializedSizeI16(this->field110);
  xfer += prot_->serializedFieldSize("field111", apache::thrift::protocol::T_STRUCT, 111);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field111);
  xfer += prot_->serializedFieldSize("field112", apache::thrift::protocol::T_STRING, 112);
  xfer += prot_->serializedSizeBinary(this->field112);
  xfer += prot_->serializedFieldSize("field113", apache::thrift::protocol::T_DOUBLE, 113);
  xfer += prot_->serializedSizeDouble(this->field113);
  xfer += prot_->serializedFieldSize("field114", apache::thrift::protocol::T_I16, 114);
  xfer += prot_->serializedSizeI16(this->field114);
  xfer += prot_->serializedFieldSize("field115", apache::thrift::protocol::T_MAP, 115);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<int8_t>, int64_t>>::serializedSize<false>(*prot_, this->field115);
  xfer += prot_->serializedFieldSize("field116", apache::thrift::protocol::T_LIST, 116);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field116);
  xfer += prot_->serializedFieldSize("field117", apache::thrift::protocol::T_STRING, 117);
  xfer += prot_->serializedSizeBinary(this->field117);
  xfer += prot_->serializedFieldSize("field118", apache::thrift::protocol::T_LIST, 118);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field118);
  xfer += prot_->serializedFieldSize("field119", apache::thrift::protocol::T_BYTE, 119);
  xfer += prot_->serializedSizeByte(this->field119);
  xfer += prot_->serializedFieldSize("field120", apache::thrift::protocol::T_DOUBLE, 120);
  xfer += prot_->serializedSizeDouble(this->field120);
  xfer += prot_->serializedFieldSize("field121", apache::thrift::protocol::T_I64, 121);
  xfer += prot_->serializedSizeI64(this->field121);
  xfer += prot_->serializedFieldSize("field122", apache::thrift::protocol::T_DOUBLE, 122);
  xfer += prot_->serializedSizeDouble(this->field122);
  xfer += prot_->serializedFieldSize("field123", apache::thrift::protocol::T_I32, 123);
  xfer += prot_->serializedSizeI32(this->field123);
  xfer += prot_->serializedFieldSize("field124", apache::thrift::protocol::T_STRING, 124);
  xfer += prot_->serializedSizeString(this->field124);
  xfer += prot_->serializedFieldSize("field125", apache::thrift::protocol::T_BOOL, 125);
  xfer += prot_->serializedSizeBool(this->field125);
  xfer += prot_->serializedFieldSize("field126", apache::thrift::protocol::T_LIST, 126);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field126);
  xfer += prot_->serializedFieldSize("field127", apache::thrift::protocol::T_STRING, 127);
  xfer += prot_->serializedSizeString(this->field127);
  xfer += prot_->serializedFieldSize("field128", apache::thrift::protocol::T_STRING, 128);
  xfer += prot_->serializedSizeString(this->field128);
  xfer += prot_->serializedFieldSize("field129", apache::thrift::protocol::T_STRUCT, 129);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSize(prot_, &this->field129);
  xfer += prot_->serializedFieldSize("field130", apache::thrift::protocol::T_I64, 130);
  xfer += prot_->serializedSizeI64(this->field130);
  xfer += prot_->serializedFieldSize("field131", apache::thrift::protocol::T_STRING, 131);
  xfer += prot_->serializedSizeString(this->field131);
  xfer += prot_->serializedFieldSize("field132", apache::thrift::protocol::T_STRUCT, 132);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field132);
  xfer += prot_->serializedFieldSize("field133", apache::thrift::protocol::T_STRING, 133);
  xfer += prot_->serializedSizeString(this->field133);
  xfer += prot_->serializedFieldSize("field134", apache::thrift::protocol::T_SET, 134);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>>, std::set<std::map< ::cpp2::Struct11, int16_t>>>::serializedSize<false>(*prot_, this->field134);
  xfer += prot_->serializedFieldSize("field135", apache::thrift::protocol::T_STRING, 135);
  xfer += prot_->serializedSizeBinary(this->field135);
  xfer += prot_->serializedFieldSize("field136", apache::thrift::protocol::T_SET, 136);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field136);
  xfer += prot_->serializedFieldSize("field137", apache::thrift::protocol::T_FLOAT, 137);
  xfer += prot_->serializedSizeFloat(this->field137);
  xfer += prot_->serializedFieldSize("field138", apache::thrift::protocol::T_DOUBLE, 138);
  xfer += prot_->serializedSizeDouble(this->field138);
  xfer += prot_->serializedFieldSize("field139", apache::thrift::protocol::T_SET, 139);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<double>>>::serializedSize<false>(*prot_, this->field139);
  xfer += prot_->serializedFieldSize("field140", apache::thrift::protocol::T_I64, 140);
  xfer += prot_->serializedSizeI64(this->field140);
  xfer += prot_->serializedFieldSize("field141", apache::thrift::protocol::T_MAP, 141);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<bool, float>>::serializedSize<false>(*prot_, this->field141);
  xfer += prot_->serializedFieldSize("field142", apache::thrift::protocol::T_SET, 142);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::set<std::vector<double>>>::serializedSize<false>(*prot_, this->field142);
  xfer += prot_->serializedFieldSize("field143", apache::thrift::protocol::T_STRUCT, 143);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field143);
  xfer += prot_->serializedFieldSize("field144", apache::thrift::protocol::T_BYTE, 144);
  xfer += prot_->serializedSizeByte(this->field144);
  xfer += prot_->serializedFieldSize("field145", apache::thrift::protocol::T_SET, 145);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field145);
  xfer += prot_->serializedFieldSize("field146", apache::thrift::protocol::T_I32, 146);
  xfer += prot_->serializedSizeI32(this->field146);
  xfer += prot_->serializedFieldSize("field147", apache::thrift::protocol::T_DOUBLE, 147);
  xfer += prot_->serializedSizeDouble(this->field147);
  xfer += prot_->serializedFieldSize("field148", apache::thrift::protocol::T_STRUCT, 148);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSize(prot_, &this->field148);
  xfer += prot_->serializedFieldSize("field149", apache::thrift::protocol::T_LIST, 149);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field149);
  xfer += prot_->serializedFieldSize("field150", apache::thrift::protocol::T_LIST, 150);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field150);
  xfer += prot_->serializedFieldSize("field151", apache::thrift::protocol::T_DOUBLE, 151);
  xfer += prot_->serializedSizeDouble(this->field151);
  xfer += prot_->serializedFieldSize("field152", apache::thrift::protocol::T_LIST, 152);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int32_t>>>::serializedSize<false>(*prot_, this->field152);
  xfer += prot_->serializedFieldSize("field153", apache::thrift::protocol::T_STRING, 153);
  xfer += prot_->serializedSizeString(this->field153);
  xfer += prot_->serializedFieldSize("field154", apache::thrift::protocol::T_SET, 154);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field154);
  xfer += prot_->serializedFieldSize("field155", apache::thrift::protocol::T_MAP, 155);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<int32_t, std::set<bool>>>::serializedSize<false>(*prot_, this->field155);
  xfer += prot_->serializedFieldSize("field156", apache::thrift::protocol::T_I64, 156);
  xfer += prot_->serializedSizeI64(this->field156);
  xfer += prot_->serializedFieldSize("field157", apache::thrift::protocol::T_DOUBLE, 157);
  xfer += prot_->serializedSizeDouble(this->field157);
  xfer += prot_->serializedFieldSize("field158", apache::thrift::protocol::T_LIST, 158);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int8_t>>>::serializedSize<false>(*prot_, this->field158);
  xfer += prot_->serializedFieldSize("field159", apache::thrift::protocol::T_BOOL, 159);
  xfer += prot_->serializedSizeBool(this->field159);
  xfer += prot_->serializedFieldSize("field160", apache::thrift::protocol::T_DOUBLE, 160);
  xfer += prot_->serializedSizeDouble(this->field160);
  xfer += prot_->serializedFieldSize("field161", apache::thrift::protocol::T_DOUBLE, 161);
  xfer += prot_->serializedSizeDouble(this->field161);
  xfer += prot_->serializedFieldSize("field162", apache::thrift::protocol::T_SET, 162);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field162);
  xfer += prot_->serializedFieldSize("field163", apache::thrift::protocol::T_STRING, 163);
  xfer += prot_->serializedSizeBinary(this->field163);
  xfer += prot_->serializedFieldSize("field164", apache::thrift::protocol::T_I64, 164);
  xfer += prot_->serializedSizeI64(this->field164);
  xfer += prot_->serializedFieldSize("field165", apache::thrift::protocol::T_STRING, 165);
  xfer += prot_->serializedSizeBinary(this->field165);
  xfer += prot_->serializedFieldSize("field166", apache::thrift::protocol::T_SET, 166);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field166);
  xfer += prot_->serializedFieldSize("field167", apache::thrift::protocol::T_LIST, 167);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field167);
  xfer += prot_->serializedFieldSize("field168", apache::thrift::protocol::T_MAP, 168);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<bool,  ::cpp2::Struct1>>::serializedSize<false>(*prot_, this->field168);
  xfer += prot_->serializedFieldSize("field169", apache::thrift::protocol::T_BYTE, 169);
  xfer += prot_->serializedSizeByte(this->field169);
  xfer += prot_->serializedFieldSize("field170", apache::thrift::protocol::T_STRING, 170);
  xfer += prot_->serializedSizeBinary(this->field170);
  xfer += prot_->serializedFieldSize("field171", apache::thrift::protocol::T_STRING, 171);
  xfer += prot_->serializedSizeBinary(this->field171);
  xfer += prot_->serializedFieldSize("field172", apache::thrift::protocol::T_SET, 172);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field172);
  xfer += prot_->serializedFieldSize("field173", apache::thrift::protocol::T_BOOL, 173);
  xfer += prot_->serializedSizeBool(this->field173);
  xfer += prot_->serializedFieldSize("field174", apache::thrift::protocol::T_MAP, 174);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<int16_t, std::vector<int64_t>>>::serializedSize<false>(*prot_, this->field174);
  xfer += prot_->serializedFieldSize("field175", apache::thrift::protocol::T_I32, 175);
  xfer += prot_->serializedSizeI32(this->field175);
  xfer += prot_->serializedFieldSize("field176", apache::thrift::protocol::T_FLOAT, 176);
  xfer += prot_->serializedSizeFloat(this->field176);
  xfer += prot_->serializedFieldSize("field177", apache::thrift::protocol::T_LIST, 177);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field177);
  xfer += prot_->serializedFieldSize("field178", apache::thrift::protocol::T_FLOAT, 178);
  xfer += prot_->serializedSizeFloat(this->field178);
  xfer += prot_->serializedFieldSize("field179", apache::thrift::protocol::T_STRING, 179);
  xfer += prot_->serializedSizeString(this->field179);
  xfer += prot_->serializedFieldSize("field180", apache::thrift::protocol::T_SET, 180);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<float>>>::serializedSize<false>(*prot_, this->field180);
  xfer += prot_->serializedFieldSize("field181", apache::thrift::protocol::T_SET, 181);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::set<std::vector<float>>>::serializedSize<false>(*prot_, this->field181);
  xfer += prot_->serializedFieldSize("field182", apache::thrift::protocol::T_STRING, 182);
  xfer += prot_->serializedSizeBinary(this->field182);
  xfer += prot_->serializedFieldSize("field183", apache::thrift::protocol::T_FLOAT, 183);
  xfer += prot_->serializedSizeFloat(this->field183);
  xfer += prot_->serializedFieldSize("field184", apache::thrift::protocol::T_STRUCT, 184);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSize(prot_, &this->field184);
  xfer += prot_->serializedFieldSize("field185", apache::thrift::protocol::T_SET, 185);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field185);
  xfer += prot_->serializedFieldSize("field186", apache::thrift::protocol::T_I32, 186);
  xfer += prot_->serializedSizeI32(this->field186);
  xfer += prot_->serializedFieldSize("field187", apache::thrift::protocol::T_DOUBLE, 187);
  xfer += prot_->serializedSizeDouble(this->field187);
  xfer += prot_->serializedFieldSize("field188", apache::thrift::protocol::T_LIST, 188);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field188);
  xfer += prot_->serializedFieldSize("field189", apache::thrift::protocol::T_FLOAT, 189);
  xfer += prot_->serializedSizeFloat(this->field189);
  xfer += prot_->serializedFieldSize("field190", apache::thrift::protocol::T_DOUBLE, 190);
  xfer += prot_->serializedSizeDouble(this->field190);
  xfer += prot_->serializedFieldSize("field191", apache::thrift::protocol::T_STRUCT, 191);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field191);
  xfer += prot_->serializedFieldSize("field192", apache::thrift::protocol::T_LIST, 192);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field192);
  xfer += prot_->serializedFieldSize("field193", apache::thrift::protocol::T_STRING, 193);
  xfer += prot_->serializedSizeString(this->field193);
  xfer += prot_->serializedFieldSize("field194", apache::thrift::protocol::T_BOOL, 194);
  xfer += prot_->serializedSizeBool(this->field194);
  xfer += prot_->serializedFieldSize("field195", apache::thrift::protocol::T_LIST, 195);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field195);
  xfer += prot_->serializedFieldSize("field196", apache::thrift::protocol::T_FLOAT, 196);
  xfer += prot_->serializedSizeFloat(this->field196);
  xfer += prot_->serializedFieldSize("field197", apache::thrift::protocol::T_STRUCT, 197);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field197);
  xfer += prot_->serializedFieldSize("field198", apache::thrift::protocol::T_LIST, 198);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct3>>::serializedSize<false>(*prot_, this->field198);
  xfer += prot_->serializedFieldSize("field199", apache::thrift::protocol::T_MAP, 199);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::binary>, std::map< ::cpp2::Struct5, std::string>>::serializedSize<false>(*prot_, this->field199);
  xfer += prot_->serializedFieldSize("field200", apache::thrift::protocol::T_LIST, 200);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field200);
  xfer += prot_->serializedFieldSize("field201", apache::thrift::protocol::T_LIST, 201);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field201);
  xfer += prot_->serializedFieldSize("field202", apache::thrift::protocol::T_FLOAT, 202);
  xfer += prot_->serializedSizeFloat(this->field202);
  xfer += prot_->serializedFieldSize("field203", apache::thrift::protocol::T_I16, 203);
  xfer += prot_->serializedSizeI16(this->field203);
  xfer += prot_->serializedFieldSize("field204", apache::thrift::protocol::T_MAP, 204);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<int16_t, std::set<float>>>::serializedSize<false>(*prot_, this->field204);
  xfer += prot_->serializedFieldSize("field205", apache::thrift::protocol::T_STRUCT, 205);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSize(prot_, &this->field205);
  xfer += prot_->serializedFieldSize("field206", apache::thrift::protocol::T_DOUBLE, 206);
  xfer += prot_->serializedSizeDouble(this->field206);
  xfer += prot_->serializedFieldSize("field207", apache::thrift::protocol::T_MAP, 207);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<std::set<int8_t>, std::vector<float>>>::serializedSize<false>(*prot_, this->field207);
  xfer += prot_->serializedFieldSize("field208", apache::thrift::protocol::T_SET, 208);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field208);
  xfer += prot_->serializedFieldSize("field209", apache::thrift::protocol::T_SET, 209);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field209);
  xfer += prot_->serializedFieldSize("field210", apache::thrift::protocol::T_STRUCT, 210);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSize(prot_, &this->field210);
  xfer += prot_->serializedFieldSize("field211", apache::thrift::protocol::T_LIST, 211);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field211);
  xfer += prot_->serializedFieldSize("field212", apache::thrift::protocol::T_LIST, 212);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field212);
  xfer += prot_->serializedFieldSize("field213", apache::thrift::protocol::T_SET, 213);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>>, std::set<std::set<std::set<int64_t>>>>::serializedSize<false>(*prot_, this->field213);
  xfer += prot_->serializedFieldSize("field214", apache::thrift::protocol::T_LIST, 214);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field214);
  xfer += prot_->serializedFieldSize("field215", apache::thrift::protocol::T_STRING, 215);
  xfer += prot_->serializedSizeString(this->field215);
  xfer += prot_->serializedFieldSize("field216", apache::thrift::protocol::T_I32, 216);
  xfer += prot_->serializedSizeI32(this->field216);
  xfer += prot_->serializedFieldSize("field217", apache::thrift::protocol::T_SET, 217);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>>, std::set<std::map<std::string, bool>>>::serializedSize<false>(*prot_, this->field217);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct13::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct13");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<double, float>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int8_t, int32_t>>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeString(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int64_t>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_DOUBLE, 9);
  xfer += prot_->serializedSizeDouble(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int64_t>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_STRING, 11);
  xfer += prot_->serializedSizeZCBinary(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_SET, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_STRUCT, 13);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_DOUBLE, 14);
  xfer += prot_->serializedSizeDouble(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_SET, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_STRUCT, 16);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSizeZC(prot_, &this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_DOUBLE, 17);
  xfer += prot_->serializedSizeDouble(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_I16, 18);
  xfer += prot_->serializedSizeI16(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_STRING, 19);
  xfer += prot_->serializedSizeZCBinary(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_LIST, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_I64, 21);
  xfer += prot_->serializedSizeI64(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_STRING, 22);
  xfer += prot_->serializedSizeZCBinary(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_BOOL, 23);
  xfer += prot_->serializedSizeBool(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_FLOAT, 24);
  xfer += prot_->serializedSizeFloat(this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_I32, 25);
  xfer += prot_->serializedSizeI32(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_LIST, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_I32, 27);
  xfer += prot_->serializedSizeI32(this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_MAP, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, ::apache::thrift::type_class::integral>, std::map<std::vector<std::set<bool>>, bool>>::serializedSize<false>(*prot_, this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_LIST, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int16_t>>>::serializedSize<false>(*prot_, this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_BOOL, 30);
  xfer += prot_->serializedSizeBool(this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_LIST, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<float>>>::serializedSize<false>(*prot_, this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_BYTE, 32);
  xfer += prot_->serializedSizeByte(this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_SET, 33);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_FLOAT, 34);
  xfer += prot_->serializedSizeFloat(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_BYTE, 35);
  xfer += prot_->serializedSizeByte(this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_MAP, 36);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>>, std::map<std::vector<std::string>, std::map<std::string, int64_t>>>::serializedSize<false>(*prot_, this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_FLOAT, 37);
  xfer += prot_->serializedSizeFloat(this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_DOUBLE, 38);
  xfer += prot_->serializedSizeDouble(this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_FLOAT, 39);
  xfer += prot_->serializedSizeFloat(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_STRUCT, 40);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSizeZC(prot_, &this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_SET, 41);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int32_t>>>::serializedSize<false>(*prot_, this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_LIST, 42);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_STRING, 43);
  xfer += prot_->serializedSizeZCBinary(this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_LIST, 44);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct8>>::serializedSize<false>(*prot_, this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_FLOAT, 45);
  xfer += prot_->serializedSizeFloat(this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_LIST, 46);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::vector<std::set<std::string>>>::serializedSize<false>(*prot_, this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_SET, 47);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>, std::set<std::set<std::string>>>::serializedSize<false>(*prot_, this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_I64, 48);
  xfer += prot_->serializedSizeI64(this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_BYTE, 49);
  xfer += prot_->serializedSizeByte(this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_STRUCT, 50);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSizeZC(prot_, &this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_I64, 51);
  xfer += prot_->serializedSizeI64(this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_SET, 52);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_I16, 53);
  xfer += prot_->serializedSizeI16(this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_LIST, 54);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_I64, 55);
  xfer += prot_->serializedSizeI64(this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_LIST, 56);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct0>>::serializedSize<false>(*prot_, this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_I32, 57);
  xfer += prot_->serializedSizeI32(this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_STRUCT, 58);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_LIST, 59);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_SET, 60);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_LIST, 61);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_LIST, 62);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_SET, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_I32, 64);
  xfer += prot_->serializedSizeI32(this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_STRING, 65);
  xfer += prot_->serializedSizeString(this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_STRING, 66);
  xfer += prot_->serializedSizeZCBinary(this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_SET, 67);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_STRING, 68);
  xfer += prot_->serializedSizeZCBinary(this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_FLOAT, 69);
  xfer += prot_->serializedSizeFloat(this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_STRUCT, 70);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_FLOAT, 71);
  xfer += prot_->serializedSizeFloat(this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_I32, 72);
  xfer += prot_->serializedSizeI32(this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_STRUCT, 73);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_I64, 74);
  xfer += prot_->serializedSizeI64(this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_I32, 75);
  xfer += prot_->serializedSizeI32(this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_MAP, 76);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int64_t>>::serializedSize<false>(*prot_, this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_I32, 77);
  xfer += prot_->serializedSizeI32(this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_LIST, 78);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>>, std::vector<std::map<bool, std::vector<float>>>>::serializedSize<false>(*prot_, this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_LIST, 79);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_STRING, 80);
  xfer += prot_->serializedSizeString(this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_MAP, 81);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::structure>, std::map< ::cpp2::Struct8,  ::cpp2::Struct7>>::serializedSize<false>(*prot_, this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_BOOL, 82);
  xfer += prot_->serializedSizeBool(this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_BOOL, 83);
  xfer += prot_->serializedSizeBool(this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_MAP, 84);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int16_t,  ::cpp2::Struct2>>::serializedSize<false>(*prot_, this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_I16, 85);
  xfer += prot_->serializedSizeI16(this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_BYTE, 86);
  xfer += prot_->serializedSizeByte(this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_LIST, 87);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_STRUCT, 88);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_FLOAT, 89);
  xfer += prot_->serializedSizeFloat(this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_FLOAT, 90);
  xfer += prot_->serializedSizeFloat(this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_LIST, 91);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::vector<std::map<bool, int8_t>>>::serializedSize<false>(*prot_, this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_BOOL, 92);
  xfer += prot_->serializedSizeBool(this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_SET, 93);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_STRUCT, 94);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSizeZC(prot_, &this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_BOOL, 95);
  xfer += prot_->serializedSizeBool(this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_BOOL, 96);
  xfer += prot_->serializedSizeBool(this->field96);
  xfer += prot_->serializedFieldSize("field97", apache::thrift::protocol::T_I16, 97);
  xfer += prot_->serializedSizeI16(this->field97);
  xfer += prot_->serializedFieldSize("field98", apache::thrift::protocol::T_BOOL, 98);
  xfer += prot_->serializedSizeBool(this->field98);
  xfer += prot_->serializedFieldSize("field99", apache::thrift::protocol::T_STRUCT, 99);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSizeZC(prot_, &this->field99);
  xfer += prot_->serializedFieldSize("field100", apache::thrift::protocol::T_SET, 100);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::set<std::map<int16_t, float>>>::serializedSize<false>(*prot_, this->field100);
  xfer += prot_->serializedFieldSize("field101", apache::thrift::protocol::T_STRING, 101);
  xfer += prot_->serializedSizeZCBinary(this->field101);
  xfer += prot_->serializedFieldSize("field102", apache::thrift::protocol::T_I16, 102);
  xfer += prot_->serializedSizeI16(this->field102);
  xfer += prot_->serializedFieldSize("field103", apache::thrift::protocol::T_MAP, 103);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>, std::map<int16_t, std::map<bool,  ::cpp2::Struct1>>>::serializedSize<false>(*prot_, this->field103);
  xfer += prot_->serializedFieldSize("field104", apache::thrift::protocol::T_I64, 104);
  xfer += prot_->serializedSizeI64(this->field104);
  xfer += prot_->serializedFieldSize("field105", apache::thrift::protocol::T_SET, 105);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field105);
  xfer += prot_->serializedFieldSize("field106", apache::thrift::protocol::T_DOUBLE, 106);
  xfer += prot_->serializedSizeDouble(this->field106);
  xfer += prot_->serializedFieldSize("field107", apache::thrift::protocol::T_SET, 107);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field107);
  xfer += prot_->serializedFieldSize("field108", apache::thrift::protocol::T_SET, 108);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field108);
  xfer += prot_->serializedFieldSize("field109", apache::thrift::protocol::T_LIST, 109);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::vector<std::map<float, int8_t>>>::serializedSize<false>(*prot_, this->field109);
  xfer += prot_->serializedFieldSize("field110", apache::thrift::protocol::T_I16, 110);
  xfer += prot_->serializedSizeI16(this->field110);
  xfer += prot_->serializedFieldSize("field111", apache::thrift::protocol::T_STRUCT, 111);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field111);
  xfer += prot_->serializedFieldSize("field112", apache::thrift::protocol::T_STRING, 112);
  xfer += prot_->serializedSizeZCBinary(this->field112);
  xfer += prot_->serializedFieldSize("field113", apache::thrift::protocol::T_DOUBLE, 113);
  xfer += prot_->serializedSizeDouble(this->field113);
  xfer += prot_->serializedFieldSize("field114", apache::thrift::protocol::T_I16, 114);
  xfer += prot_->serializedSizeI16(this->field114);
  xfer += prot_->serializedFieldSize("field115", apache::thrift::protocol::T_MAP, 115);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<int8_t>, int64_t>>::serializedSize<false>(*prot_, this->field115);
  xfer += prot_->serializedFieldSize("field116", apache::thrift::protocol::T_LIST, 116);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field116);
  xfer += prot_->serializedFieldSize("field117", apache::thrift::protocol::T_STRING, 117);
  xfer += prot_->serializedSizeZCBinary(this->field117);
  xfer += prot_->serializedFieldSize("field118", apache::thrift::protocol::T_LIST, 118);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field118);
  xfer += prot_->serializedFieldSize("field119", apache::thrift::protocol::T_BYTE, 119);
  xfer += prot_->serializedSizeByte(this->field119);
  xfer += prot_->serializedFieldSize("field120", apache::thrift::protocol::T_DOUBLE, 120);
  xfer += prot_->serializedSizeDouble(this->field120);
  xfer += prot_->serializedFieldSize("field121", apache::thrift::protocol::T_I64, 121);
  xfer += prot_->serializedSizeI64(this->field121);
  xfer += prot_->serializedFieldSize("field122", apache::thrift::protocol::T_DOUBLE, 122);
  xfer += prot_->serializedSizeDouble(this->field122);
  xfer += prot_->serializedFieldSize("field123", apache::thrift::protocol::T_I32, 123);
  xfer += prot_->serializedSizeI32(this->field123);
  xfer += prot_->serializedFieldSize("field124", apache::thrift::protocol::T_STRING, 124);
  xfer += prot_->serializedSizeString(this->field124);
  xfer += prot_->serializedFieldSize("field125", apache::thrift::protocol::T_BOOL, 125);
  xfer += prot_->serializedSizeBool(this->field125);
  xfer += prot_->serializedFieldSize("field126", apache::thrift::protocol::T_LIST, 126);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field126);
  xfer += prot_->serializedFieldSize("field127", apache::thrift::protocol::T_STRING, 127);
  xfer += prot_->serializedSizeString(this->field127);
  xfer += prot_->serializedFieldSize("field128", apache::thrift::protocol::T_STRING, 128);
  xfer += prot_->serializedSizeString(this->field128);
  xfer += prot_->serializedFieldSize("field129", apache::thrift::protocol::T_STRUCT, 129);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSizeZC(prot_, &this->field129);
  xfer += prot_->serializedFieldSize("field130", apache::thrift::protocol::T_I64, 130);
  xfer += prot_->serializedSizeI64(this->field130);
  xfer += prot_->serializedFieldSize("field131", apache::thrift::protocol::T_STRING, 131);
  xfer += prot_->serializedSizeString(this->field131);
  xfer += prot_->serializedFieldSize("field132", apache::thrift::protocol::T_STRUCT, 132);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field132);
  xfer += prot_->serializedFieldSize("field133", apache::thrift::protocol::T_STRING, 133);
  xfer += prot_->serializedSizeString(this->field133);
  xfer += prot_->serializedFieldSize("field134", apache::thrift::protocol::T_SET, 134);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>>, std::set<std::map< ::cpp2::Struct11, int16_t>>>::serializedSize<false>(*prot_, this->field134);
  xfer += prot_->serializedFieldSize("field135", apache::thrift::protocol::T_STRING, 135);
  xfer += prot_->serializedSizeZCBinary(this->field135);
  xfer += prot_->serializedFieldSize("field136", apache::thrift::protocol::T_SET, 136);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field136);
  xfer += prot_->serializedFieldSize("field137", apache::thrift::protocol::T_FLOAT, 137);
  xfer += prot_->serializedSizeFloat(this->field137);
  xfer += prot_->serializedFieldSize("field138", apache::thrift::protocol::T_DOUBLE, 138);
  xfer += prot_->serializedSizeDouble(this->field138);
  xfer += prot_->serializedFieldSize("field139", apache::thrift::protocol::T_SET, 139);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<double>>>::serializedSize<false>(*prot_, this->field139);
  xfer += prot_->serializedFieldSize("field140", apache::thrift::protocol::T_I64, 140);
  xfer += prot_->serializedSizeI64(this->field140);
  xfer += prot_->serializedFieldSize("field141", apache::thrift::protocol::T_MAP, 141);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<bool, float>>::serializedSize<false>(*prot_, this->field141);
  xfer += prot_->serializedFieldSize("field142", apache::thrift::protocol::T_SET, 142);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::set<std::vector<double>>>::serializedSize<false>(*prot_, this->field142);
  xfer += prot_->serializedFieldSize("field143", apache::thrift::protocol::T_STRUCT, 143);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field143);
  xfer += prot_->serializedFieldSize("field144", apache::thrift::protocol::T_BYTE, 144);
  xfer += prot_->serializedSizeByte(this->field144);
  xfer += prot_->serializedFieldSize("field145", apache::thrift::protocol::T_SET, 145);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field145);
  xfer += prot_->serializedFieldSize("field146", apache::thrift::protocol::T_I32, 146);
  xfer += prot_->serializedSizeI32(this->field146);
  xfer += prot_->serializedFieldSize("field147", apache::thrift::protocol::T_DOUBLE, 147);
  xfer += prot_->serializedSizeDouble(this->field147);
  xfer += prot_->serializedFieldSize("field148", apache::thrift::protocol::T_STRUCT, 148);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSizeZC(prot_, &this->field148);
  xfer += prot_->serializedFieldSize("field149", apache::thrift::protocol::T_LIST, 149);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field149);
  xfer += prot_->serializedFieldSize("field150", apache::thrift::protocol::T_LIST, 150);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field150);
  xfer += prot_->serializedFieldSize("field151", apache::thrift::protocol::T_DOUBLE, 151);
  xfer += prot_->serializedSizeDouble(this->field151);
  xfer += prot_->serializedFieldSize("field152", apache::thrift::protocol::T_LIST, 152);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int32_t>>>::serializedSize<false>(*prot_, this->field152);
  xfer += prot_->serializedFieldSize("field153", apache::thrift::protocol::T_STRING, 153);
  xfer += prot_->serializedSizeString(this->field153);
  xfer += prot_->serializedFieldSize("field154", apache::thrift::protocol::T_SET, 154);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field154);
  xfer += prot_->serializedFieldSize("field155", apache::thrift::protocol::T_MAP, 155);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<int32_t, std::set<bool>>>::serializedSize<false>(*prot_, this->field155);
  xfer += prot_->serializedFieldSize("field156", apache::thrift::protocol::T_I64, 156);
  xfer += prot_->serializedSizeI64(this->field156);
  xfer += prot_->serializedFieldSize("field157", apache::thrift::protocol::T_DOUBLE, 157);
  xfer += prot_->serializedSizeDouble(this->field157);
  xfer += prot_->serializedFieldSize("field158", apache::thrift::protocol::T_LIST, 158);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int8_t>>>::serializedSize<false>(*prot_, this->field158);
  xfer += prot_->serializedFieldSize("field159", apache::thrift::protocol::T_BOOL, 159);
  xfer += prot_->serializedSizeBool(this->field159);
  xfer += prot_->serializedFieldSize("field160", apache::thrift::protocol::T_DOUBLE, 160);
  xfer += prot_->serializedSizeDouble(this->field160);
  xfer += prot_->serializedFieldSize("field161", apache::thrift::protocol::T_DOUBLE, 161);
  xfer += prot_->serializedSizeDouble(this->field161);
  xfer += prot_->serializedFieldSize("field162", apache::thrift::protocol::T_SET, 162);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field162);
  xfer += prot_->serializedFieldSize("field163", apache::thrift::protocol::T_STRING, 163);
  xfer += prot_->serializedSizeZCBinary(this->field163);
  xfer += prot_->serializedFieldSize("field164", apache::thrift::protocol::T_I64, 164);
  xfer += prot_->serializedSizeI64(this->field164);
  xfer += prot_->serializedFieldSize("field165", apache::thrift::protocol::T_STRING, 165);
  xfer += prot_->serializedSizeZCBinary(this->field165);
  xfer += prot_->serializedFieldSize("field166", apache::thrift::protocol::T_SET, 166);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field166);
  xfer += prot_->serializedFieldSize("field167", apache::thrift::protocol::T_LIST, 167);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field167);
  xfer += prot_->serializedFieldSize("field168", apache::thrift::protocol::T_MAP, 168);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<bool,  ::cpp2::Struct1>>::serializedSize<false>(*prot_, this->field168);
  xfer += prot_->serializedFieldSize("field169", apache::thrift::protocol::T_BYTE, 169);
  xfer += prot_->serializedSizeByte(this->field169);
  xfer += prot_->serializedFieldSize("field170", apache::thrift::protocol::T_STRING, 170);
  xfer += prot_->serializedSizeZCBinary(this->field170);
  xfer += prot_->serializedFieldSize("field171", apache::thrift::protocol::T_STRING, 171);
  xfer += prot_->serializedSizeZCBinary(this->field171);
  xfer += prot_->serializedFieldSize("field172", apache::thrift::protocol::T_SET, 172);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field172);
  xfer += prot_->serializedFieldSize("field173", apache::thrift::protocol::T_BOOL, 173);
  xfer += prot_->serializedSizeBool(this->field173);
  xfer += prot_->serializedFieldSize("field174", apache::thrift::protocol::T_MAP, 174);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<int16_t, std::vector<int64_t>>>::serializedSize<false>(*prot_, this->field174);
  xfer += prot_->serializedFieldSize("field175", apache::thrift::protocol::T_I32, 175);
  xfer += prot_->serializedSizeI32(this->field175);
  xfer += prot_->serializedFieldSize("field176", apache::thrift::protocol::T_FLOAT, 176);
  xfer += prot_->serializedSizeFloat(this->field176);
  xfer += prot_->serializedFieldSize("field177", apache::thrift::protocol::T_LIST, 177);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field177);
  xfer += prot_->serializedFieldSize("field178", apache::thrift::protocol::T_FLOAT, 178);
  xfer += prot_->serializedSizeFloat(this->field178);
  xfer += prot_->serializedFieldSize("field179", apache::thrift::protocol::T_STRING, 179);
  xfer += prot_->serializedSizeString(this->field179);
  xfer += prot_->serializedFieldSize("field180", apache::thrift::protocol::T_SET, 180);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<float>>>::serializedSize<false>(*prot_, this->field180);
  xfer += prot_->serializedFieldSize("field181", apache::thrift::protocol::T_SET, 181);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::set<std::vector<float>>>::serializedSize<false>(*prot_, this->field181);
  xfer += prot_->serializedFieldSize("field182", apache::thrift::protocol::T_STRING, 182);
  xfer += prot_->serializedSizeZCBinary(this->field182);
  xfer += prot_->serializedFieldSize("field183", apache::thrift::protocol::T_FLOAT, 183);
  xfer += prot_->serializedSizeFloat(this->field183);
  xfer += prot_->serializedFieldSize("field184", apache::thrift::protocol::T_STRUCT, 184);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSizeZC(prot_, &this->field184);
  xfer += prot_->serializedFieldSize("field185", apache::thrift::protocol::T_SET, 185);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field185);
  xfer += prot_->serializedFieldSize("field186", apache::thrift::protocol::T_I32, 186);
  xfer += prot_->serializedSizeI32(this->field186);
  xfer += prot_->serializedFieldSize("field187", apache::thrift::protocol::T_DOUBLE, 187);
  xfer += prot_->serializedSizeDouble(this->field187);
  xfer += prot_->serializedFieldSize("field188", apache::thrift::protocol::T_LIST, 188);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field188);
  xfer += prot_->serializedFieldSize("field189", apache::thrift::protocol::T_FLOAT, 189);
  xfer += prot_->serializedSizeFloat(this->field189);
  xfer += prot_->serializedFieldSize("field190", apache::thrift::protocol::T_DOUBLE, 190);
  xfer += prot_->serializedSizeDouble(this->field190);
  xfer += prot_->serializedFieldSize("field191", apache::thrift::protocol::T_STRUCT, 191);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field191);
  xfer += prot_->serializedFieldSize("field192", apache::thrift::protocol::T_LIST, 192);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field192);
  xfer += prot_->serializedFieldSize("field193", apache::thrift::protocol::T_STRING, 193);
  xfer += prot_->serializedSizeString(this->field193);
  xfer += prot_->serializedFieldSize("field194", apache::thrift::protocol::T_BOOL, 194);
  xfer += prot_->serializedSizeBool(this->field194);
  xfer += prot_->serializedFieldSize("field195", apache::thrift::protocol::T_LIST, 195);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field195);
  xfer += prot_->serializedFieldSize("field196", apache::thrift::protocol::T_FLOAT, 196);
  xfer += prot_->serializedSizeFloat(this->field196);
  xfer += prot_->serializedFieldSize("field197", apache::thrift::protocol::T_STRUCT, 197);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field197);
  xfer += prot_->serializedFieldSize("field198", apache::thrift::protocol::T_LIST, 198);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct3>>::serializedSize<false>(*prot_, this->field198);
  xfer += prot_->serializedFieldSize("field199", apache::thrift::protocol::T_MAP, 199);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::binary>, std::map< ::cpp2::Struct5, std::string>>::serializedSize<false>(*prot_, this->field199);
  xfer += prot_->serializedFieldSize("field200", apache::thrift::protocol::T_LIST, 200);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field200);
  xfer += prot_->serializedFieldSize("field201", apache::thrift::protocol::T_LIST, 201);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field201);
  xfer += prot_->serializedFieldSize("field202", apache::thrift::protocol::T_FLOAT, 202);
  xfer += prot_->serializedSizeFloat(this->field202);
  xfer += prot_->serializedFieldSize("field203", apache::thrift::protocol::T_I16, 203);
  xfer += prot_->serializedSizeI16(this->field203);
  xfer += prot_->serializedFieldSize("field204", apache::thrift::protocol::T_MAP, 204);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<int16_t, std::set<float>>>::serializedSize<false>(*prot_, this->field204);
  xfer += prot_->serializedFieldSize("field205", apache::thrift::protocol::T_STRUCT, 205);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSizeZC(prot_, &this->field205);
  xfer += prot_->serializedFieldSize("field206", apache::thrift::protocol::T_DOUBLE, 206);
  xfer += prot_->serializedSizeDouble(this->field206);
  xfer += prot_->serializedFieldSize("field207", apache::thrift::protocol::T_MAP, 207);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<std::set<int8_t>, std::vector<float>>>::serializedSize<false>(*prot_, this->field207);
  xfer += prot_->serializedFieldSize("field208", apache::thrift::protocol::T_SET, 208);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field208);
  xfer += prot_->serializedFieldSize("field209", apache::thrift::protocol::T_SET, 209);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field209);
  xfer += prot_->serializedFieldSize("field210", apache::thrift::protocol::T_STRUCT, 210);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSizeZC(prot_, &this->field210);
  xfer += prot_->serializedFieldSize("field211", apache::thrift::protocol::T_LIST, 211);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field211);
  xfer += prot_->serializedFieldSize("field212", apache::thrift::protocol::T_LIST, 212);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field212);
  xfer += prot_->serializedFieldSize("field213", apache::thrift::protocol::T_SET, 213);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>>, std::set<std::set<std::set<int64_t>>>>::serializedSize<false>(*prot_, this->field213);
  xfer += prot_->serializedFieldSize("field214", apache::thrift::protocol::T_LIST, 214);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field214);
  xfer += prot_->serializedFieldSize("field215", apache::thrift::protocol::T_STRING, 215);
  xfer += prot_->serializedSizeString(this->field215);
  xfer += prot_->serializedFieldSize("field216", apache::thrift::protocol::T_I32, 216);
  xfer += prot_->serializedSizeI32(this->field216);
  xfer += prot_->serializedFieldSize("field217", apache::thrift::protocol::T_SET, 217);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>>, std::set<std::map<std::string, bool>>>::serializedSize<false>(*prot_, this->field217);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct13::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct13");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_MAP, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<double, float>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int8_t, int32_t>>>::write(*prot_, this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->writeString(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int64_t>>::write(*prot_, this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_DOUBLE, 9);
  xfer += prot_->writeDouble(this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int64_t>>::write(*prot_, this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_STRING, 11);
  xfer += prot_->writeBinary(this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_SET, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_STRUCT, 13);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_DOUBLE, 14);
  xfer += prot_->writeDouble(this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_SET, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_STRUCT, 16);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::write(prot_, &this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_DOUBLE, 17);
  xfer += prot_->writeDouble(this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_I16, 18);
  xfer += prot_->writeI16(this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_STRING, 19);
  xfer += prot_->writeBinary(this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_LIST, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_I64, 21);
  xfer += prot_->writeI64(this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_STRING, 22);
  xfer += prot_->writeBinary(this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_BOOL, 23);
  xfer += prot_->writeBool(this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_FLOAT, 24);
  xfer += prot_->writeFloat(this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_I32, 25);
  xfer += prot_->writeI32(this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_LIST, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_I32, 27);
  xfer += prot_->writeI32(this->field27);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_MAP, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, ::apache::thrift::type_class::integral>, std::map<std::vector<std::set<bool>>, bool>>::write(*prot_, this->field28);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field29", apache::thrift::protocol::T_LIST, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int16_t>>>::write(*prot_, this->field29);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field30", apache::thrift::protocol::T_BOOL, 30);
  xfer += prot_->writeBool(this->field30);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field31", apache::thrift::protocol::T_LIST, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<float>>>::write(*prot_, this->field31);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field32", apache::thrift::protocol::T_BYTE, 32);
  xfer += prot_->writeByte(this->field32);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field33", apache::thrift::protocol::T_SET, 33);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field33);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field34", apache::thrift::protocol::T_FLOAT, 34);
  xfer += prot_->writeFloat(this->field34);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field35", apache::thrift::protocol::T_BYTE, 35);
  xfer += prot_->writeByte(this->field35);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field36", apache::thrift::protocol::T_MAP, 36);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>>, std::map<std::vector<std::string>, std::map<std::string, int64_t>>>::write(*prot_, this->field36);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field37", apache::thrift::protocol::T_FLOAT, 37);
  xfer += prot_->writeFloat(this->field37);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field38", apache::thrift::protocol::T_DOUBLE, 38);
  xfer += prot_->writeDouble(this->field38);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field39", apache::thrift::protocol::T_FLOAT, 39);
  xfer += prot_->writeFloat(this->field39);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field40", apache::thrift::protocol::T_STRUCT, 40);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::write(prot_, &this->field40);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field41", apache::thrift::protocol::T_SET, 41);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int32_t>>>::write(*prot_, this->field41);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field42", apache::thrift::protocol::T_LIST, 42);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field42);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field43", apache::thrift::protocol::T_STRING, 43);
  xfer += prot_->writeBinary(this->field43);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field44", apache::thrift::protocol::T_LIST, 44);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct8>>::write(*prot_, this->field44);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field45", apache::thrift::protocol::T_FLOAT, 45);
  xfer += prot_->writeFloat(this->field45);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field46", apache::thrift::protocol::T_LIST, 46);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::vector<std::set<std::string>>>::write(*prot_, this->field46);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field47", apache::thrift::protocol::T_SET, 47);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>, std::set<std::set<std::string>>>::write(*prot_, this->field47);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field48", apache::thrift::protocol::T_I64, 48);
  xfer += prot_->writeI64(this->field48);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field49", apache::thrift::protocol::T_BYTE, 49);
  xfer += prot_->writeByte(this->field49);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field50", apache::thrift::protocol::T_STRUCT, 50);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::write(prot_, &this->field50);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field51", apache::thrift::protocol::T_I64, 51);
  xfer += prot_->writeI64(this->field51);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field52", apache::thrift::protocol::T_SET, 52);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field52);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field53", apache::thrift::protocol::T_I16, 53);
  xfer += prot_->writeI16(this->field53);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field54", apache::thrift::protocol::T_LIST, 54);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field54);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field55", apache::thrift::protocol::T_I64, 55);
  xfer += prot_->writeI64(this->field55);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field56", apache::thrift::protocol::T_LIST, 56);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct0>>::write(*prot_, this->field56);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field57", apache::thrift::protocol::T_I32, 57);
  xfer += prot_->writeI32(this->field57);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field58", apache::thrift::protocol::T_STRUCT, 58);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field58);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field59", apache::thrift::protocol::T_LIST, 59);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field59);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field60", apache::thrift::protocol::T_SET, 60);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field60);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field61", apache::thrift::protocol::T_LIST, 61);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field61);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field62", apache::thrift::protocol::T_LIST, 62);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field62);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field63", apache::thrift::protocol::T_SET, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field63);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field64", apache::thrift::protocol::T_I32, 64);
  xfer += prot_->writeI32(this->field64);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field65", apache::thrift::protocol::T_STRING, 65);
  xfer += prot_->writeString(this->field65);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field66", apache::thrift::protocol::T_STRING, 66);
  xfer += prot_->writeBinary(this->field66);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field67", apache::thrift::protocol::T_SET, 67);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field67);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field68", apache::thrift::protocol::T_STRING, 68);
  xfer += prot_->writeBinary(this->field68);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field69", apache::thrift::protocol::T_FLOAT, 69);
  xfer += prot_->writeFloat(this->field69);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field70", apache::thrift::protocol::T_STRUCT, 70);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field70);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field71", apache::thrift::protocol::T_FLOAT, 71);
  xfer += prot_->writeFloat(this->field71);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field72", apache::thrift::protocol::T_I32, 72);
  xfer += prot_->writeI32(this->field72);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field73", apache::thrift::protocol::T_STRUCT, 73);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field73);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field74", apache::thrift::protocol::T_I64, 74);
  xfer += prot_->writeI64(this->field74);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field75", apache::thrift::protocol::T_I32, 75);
  xfer += prot_->writeI32(this->field75);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field76", apache::thrift::protocol::T_MAP, 76);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int64_t>>::write(*prot_, this->field76);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field77", apache::thrift::protocol::T_I32, 77);
  xfer += prot_->writeI32(this->field77);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field78", apache::thrift::protocol::T_LIST, 78);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>>, std::vector<std::map<bool, std::vector<float>>>>::write(*prot_, this->field78);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field79", apache::thrift::protocol::T_LIST, 79);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field79);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field80", apache::thrift::protocol::T_STRING, 80);
  xfer += prot_->writeString(this->field80);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field81", apache::thrift::protocol::T_MAP, 81);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::structure>, std::map< ::cpp2::Struct8,  ::cpp2::Struct7>>::write(*prot_, this->field81);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field82", apache::thrift::protocol::T_BOOL, 82);
  xfer += prot_->writeBool(this->field82);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field83", apache::thrift::protocol::T_BOOL, 83);
  xfer += prot_->writeBool(this->field83);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field84", apache::thrift::protocol::T_MAP, 84);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int16_t,  ::cpp2::Struct2>>::write(*prot_, this->field84);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field85", apache::thrift::protocol::T_I16, 85);
  xfer += prot_->writeI16(this->field85);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field86", apache::thrift::protocol::T_BYTE, 86);
  xfer += prot_->writeByte(this->field86);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field87", apache::thrift::protocol::T_LIST, 87);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field87);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field88", apache::thrift::protocol::T_STRUCT, 88);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field88);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field89", apache::thrift::protocol::T_FLOAT, 89);
  xfer += prot_->writeFloat(this->field89);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field90", apache::thrift::protocol::T_FLOAT, 90);
  xfer += prot_->writeFloat(this->field90);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field91", apache::thrift::protocol::T_LIST, 91);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::vector<std::map<bool, int8_t>>>::write(*prot_, this->field91);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field92", apache::thrift::protocol::T_BOOL, 92);
  xfer += prot_->writeBool(this->field92);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field93", apache::thrift::protocol::T_SET, 93);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field93);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field94", apache::thrift::protocol::T_STRUCT, 94);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::write(prot_, &this->field94);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field95", apache::thrift::protocol::T_BOOL, 95);
  xfer += prot_->writeBool(this->field95);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field96", apache::thrift::protocol::T_BOOL, 96);
  xfer += prot_->writeBool(this->field96);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field97", apache::thrift::protocol::T_I16, 97);
  xfer += prot_->writeI16(this->field97);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field98", apache::thrift::protocol::T_BOOL, 98);
  xfer += prot_->writeBool(this->field98);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field99", apache::thrift::protocol::T_STRUCT, 99);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::write(prot_, &this->field99);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field100", apache::thrift::protocol::T_SET, 100);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::set<std::map<int16_t, float>>>::write(*prot_, this->field100);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field101", apache::thrift::protocol::T_STRING, 101);
  xfer += prot_->writeBinary(this->field101);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field102", apache::thrift::protocol::T_I16, 102);
  xfer += prot_->writeI16(this->field102);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field103", apache::thrift::protocol::T_MAP, 103);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>, std::map<int16_t, std::map<bool,  ::cpp2::Struct1>>>::write(*prot_, this->field103);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field104", apache::thrift::protocol::T_I64, 104);
  xfer += prot_->writeI64(this->field104);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field105", apache::thrift::protocol::T_SET, 105);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field105);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field106", apache::thrift::protocol::T_DOUBLE, 106);
  xfer += prot_->writeDouble(this->field106);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field107", apache::thrift::protocol::T_SET, 107);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field107);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field108", apache::thrift::protocol::T_SET, 108);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field108);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field109", apache::thrift::protocol::T_LIST, 109);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::vector<std::map<float, int8_t>>>::write(*prot_, this->field109);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field110", apache::thrift::protocol::T_I16, 110);
  xfer += prot_->writeI16(this->field110);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field111", apache::thrift::protocol::T_STRUCT, 111);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field111);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field112", apache::thrift::protocol::T_STRING, 112);
  xfer += prot_->writeBinary(this->field112);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field113", apache::thrift::protocol::T_DOUBLE, 113);
  xfer += prot_->writeDouble(this->field113);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field114", apache::thrift::protocol::T_I16, 114);
  xfer += prot_->writeI16(this->field114);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field115", apache::thrift::protocol::T_MAP, 115);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<int8_t>, int64_t>>::write(*prot_, this->field115);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field116", apache::thrift::protocol::T_LIST, 116);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field116);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field117", apache::thrift::protocol::T_STRING, 117);
  xfer += prot_->writeBinary(this->field117);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field118", apache::thrift::protocol::T_LIST, 118);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field118);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field119", apache::thrift::protocol::T_BYTE, 119);
  xfer += prot_->writeByte(this->field119);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field120", apache::thrift::protocol::T_DOUBLE, 120);
  xfer += prot_->writeDouble(this->field120);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field121", apache::thrift::protocol::T_I64, 121);
  xfer += prot_->writeI64(this->field121);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field122", apache::thrift::protocol::T_DOUBLE, 122);
  xfer += prot_->writeDouble(this->field122);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field123", apache::thrift::protocol::T_I32, 123);
  xfer += prot_->writeI32(this->field123);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field124", apache::thrift::protocol::T_STRING, 124);
  xfer += prot_->writeString(this->field124);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field125", apache::thrift::protocol::T_BOOL, 125);
  xfer += prot_->writeBool(this->field125);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field126", apache::thrift::protocol::T_LIST, 126);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field126);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field127", apache::thrift::protocol::T_STRING, 127);
  xfer += prot_->writeString(this->field127);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field128", apache::thrift::protocol::T_STRING, 128);
  xfer += prot_->writeString(this->field128);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field129", apache::thrift::protocol::T_STRUCT, 129);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::write(prot_, &this->field129);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field130", apache::thrift::protocol::T_I64, 130);
  xfer += prot_->writeI64(this->field130);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field131", apache::thrift::protocol::T_STRING, 131);
  xfer += prot_->writeString(this->field131);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field132", apache::thrift::protocol::T_STRUCT, 132);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field132);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field133", apache::thrift::protocol::T_STRING, 133);
  xfer += prot_->writeString(this->field133);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field134", apache::thrift::protocol::T_SET, 134);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>>, std::set<std::map< ::cpp2::Struct11, int16_t>>>::write(*prot_, this->field134);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field135", apache::thrift::protocol::T_STRING, 135);
  xfer += prot_->writeBinary(this->field135);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field136", apache::thrift::protocol::T_SET, 136);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field136);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field137", apache::thrift::protocol::T_FLOAT, 137);
  xfer += prot_->writeFloat(this->field137);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field138", apache::thrift::protocol::T_DOUBLE, 138);
  xfer += prot_->writeDouble(this->field138);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field139", apache::thrift::protocol::T_SET, 139);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<double>>>::write(*prot_, this->field139);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field140", apache::thrift::protocol::T_I64, 140);
  xfer += prot_->writeI64(this->field140);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field141", apache::thrift::protocol::T_MAP, 141);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<bool, float>>::write(*prot_, this->field141);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field142", apache::thrift::protocol::T_SET, 142);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::set<std::vector<double>>>::write(*prot_, this->field142);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field143", apache::thrift::protocol::T_STRUCT, 143);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field143);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field144", apache::thrift::protocol::T_BYTE, 144);
  xfer += prot_->writeByte(this->field144);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field145", apache::thrift::protocol::T_SET, 145);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field145);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field146", apache::thrift::protocol::T_I32, 146);
  xfer += prot_->writeI32(this->field146);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field147", apache::thrift::protocol::T_DOUBLE, 147);
  xfer += prot_->writeDouble(this->field147);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field148", apache::thrift::protocol::T_STRUCT, 148);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::write(prot_, &this->field148);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field149", apache::thrift::protocol::T_LIST, 149);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field149);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field150", apache::thrift::protocol::T_LIST, 150);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field150);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field151", apache::thrift::protocol::T_DOUBLE, 151);
  xfer += prot_->writeDouble(this->field151);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field152", apache::thrift::protocol::T_LIST, 152);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int32_t>>>::write(*prot_, this->field152);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field153", apache::thrift::protocol::T_STRING, 153);
  xfer += prot_->writeString(this->field153);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field154", apache::thrift::protocol::T_SET, 154);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field154);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field155", apache::thrift::protocol::T_MAP, 155);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<int32_t, std::set<bool>>>::write(*prot_, this->field155);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field156", apache::thrift::protocol::T_I64, 156);
  xfer += prot_->writeI64(this->field156);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field157", apache::thrift::protocol::T_DOUBLE, 157);
  xfer += prot_->writeDouble(this->field157);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field158", apache::thrift::protocol::T_LIST, 158);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int8_t>>>::write(*prot_, this->field158);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field159", apache::thrift::protocol::T_BOOL, 159);
  xfer += prot_->writeBool(this->field159);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field160", apache::thrift::protocol::T_DOUBLE, 160);
  xfer += prot_->writeDouble(this->field160);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field161", apache::thrift::protocol::T_DOUBLE, 161);
  xfer += prot_->writeDouble(this->field161);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field162", apache::thrift::protocol::T_SET, 162);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field162);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field163", apache::thrift::protocol::T_STRING, 163);
  xfer += prot_->writeBinary(this->field163);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field164", apache::thrift::protocol::T_I64, 164);
  xfer += prot_->writeI64(this->field164);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field165", apache::thrift::protocol::T_STRING, 165);
  xfer += prot_->writeBinary(this->field165);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field166", apache::thrift::protocol::T_SET, 166);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field166);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field167", apache::thrift::protocol::T_LIST, 167);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field167);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field168", apache::thrift::protocol::T_MAP, 168);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<bool,  ::cpp2::Struct1>>::write(*prot_, this->field168);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field169", apache::thrift::protocol::T_BYTE, 169);
  xfer += prot_->writeByte(this->field169);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field170", apache::thrift::protocol::T_STRING, 170);
  xfer += prot_->writeBinary(this->field170);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field171", apache::thrift::protocol::T_STRING, 171);
  xfer += prot_->writeBinary(this->field171);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field172", apache::thrift::protocol::T_SET, 172);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field172);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field173", apache::thrift::protocol::T_BOOL, 173);
  xfer += prot_->writeBool(this->field173);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field174", apache::thrift::protocol::T_MAP, 174);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<int16_t, std::vector<int64_t>>>::write(*prot_, this->field174);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field175", apache::thrift::protocol::T_I32, 175);
  xfer += prot_->writeI32(this->field175);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field176", apache::thrift::protocol::T_FLOAT, 176);
  xfer += prot_->writeFloat(this->field176);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field177", apache::thrift::protocol::T_LIST, 177);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field177);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field178", apache::thrift::protocol::T_FLOAT, 178);
  xfer += prot_->writeFloat(this->field178);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field179", apache::thrift::protocol::T_STRING, 179);
  xfer += prot_->writeString(this->field179);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field180", apache::thrift::protocol::T_SET, 180);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<float>>>::write(*prot_, this->field180);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field181", apache::thrift::protocol::T_SET, 181);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::set<std::vector<float>>>::write(*prot_, this->field181);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field182", apache::thrift::protocol::T_STRING, 182);
  xfer += prot_->writeBinary(this->field182);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field183", apache::thrift::protocol::T_FLOAT, 183);
  xfer += prot_->writeFloat(this->field183);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field184", apache::thrift::protocol::T_STRUCT, 184);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::write(prot_, &this->field184);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field185", apache::thrift::protocol::T_SET, 185);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field185);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field186", apache::thrift::protocol::T_I32, 186);
  xfer += prot_->writeI32(this->field186);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field187", apache::thrift::protocol::T_DOUBLE, 187);
  xfer += prot_->writeDouble(this->field187);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field188", apache::thrift::protocol::T_LIST, 188);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field188);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field189", apache::thrift::protocol::T_FLOAT, 189);
  xfer += prot_->writeFloat(this->field189);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field190", apache::thrift::protocol::T_DOUBLE, 190);
  xfer += prot_->writeDouble(this->field190);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field191", apache::thrift::protocol::T_STRUCT, 191);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field191);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field192", apache::thrift::protocol::T_LIST, 192);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field192);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field193", apache::thrift::protocol::T_STRING, 193);
  xfer += prot_->writeString(this->field193);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field194", apache::thrift::protocol::T_BOOL, 194);
  xfer += prot_->writeBool(this->field194);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field195", apache::thrift::protocol::T_LIST, 195);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field195);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field196", apache::thrift::protocol::T_FLOAT, 196);
  xfer += prot_->writeFloat(this->field196);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field197", apache::thrift::protocol::T_STRUCT, 197);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field197);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field198", apache::thrift::protocol::T_LIST, 198);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct3>>::write(*prot_, this->field198);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field199", apache::thrift::protocol::T_MAP, 199);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::binary>, std::map< ::cpp2::Struct5, std::string>>::write(*prot_, this->field199);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field200", apache::thrift::protocol::T_LIST, 200);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field200);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field201", apache::thrift::protocol::T_LIST, 201);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field201);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field202", apache::thrift::protocol::T_FLOAT, 202);
  xfer += prot_->writeFloat(this->field202);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field203", apache::thrift::protocol::T_I16, 203);
  xfer += prot_->writeI16(this->field203);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field204", apache::thrift::protocol::T_MAP, 204);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<int16_t, std::set<float>>>::write(*prot_, this->field204);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field205", apache::thrift::protocol::T_STRUCT, 205);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::write(prot_, &this->field205);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field206", apache::thrift::protocol::T_DOUBLE, 206);
  xfer += prot_->writeDouble(this->field206);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field207", apache::thrift::protocol::T_MAP, 207);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<std::set<int8_t>, std::vector<float>>>::write(*prot_, this->field207);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field208", apache::thrift::protocol::T_SET, 208);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field208);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field209", apache::thrift::protocol::T_SET, 209);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field209);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field210", apache::thrift::protocol::T_STRUCT, 210);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::write(prot_, &this->field210);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field211", apache::thrift::protocol::T_LIST, 211);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field211);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field212", apache::thrift::protocol::T_LIST, 212);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field212);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field213", apache::thrift::protocol::T_SET, 213);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>>, std::set<std::set<std::set<int64_t>>>>::write(*prot_, this->field213);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field214", apache::thrift::protocol::T_LIST, 214);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field214);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field215", apache::thrift::protocol::T_STRING, 215);
  xfer += prot_->writeString(this->field215);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field216", apache::thrift::protocol::T_I32, 216);
  xfer += prot_->writeI32(this->field216);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field217", apache::thrift::protocol::T_SET, 217);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>>, std::set<std::map<std::string, bool>>>::write(*prot_, this->field217);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace cpp2 {

template <class Protocol_>
uint32_t Struct14::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field7 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field23 = std::map<int64_t, std::map<std::string, float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::floating_point>>, std::map<int64_t, std::map<std::string, float>>>::read(*iprot, this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field26 = std::map<int16_t, double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int16_t, double>>::read(*iprot, this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field27);
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field28 = std::map<std::map<std::vector<std::string>, std::set<std::string>>, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::string>, ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>, ::apache::thrift::type_class::string>, std::map<std::map<std::vector<std::string>, std::set<std::string>>, std::string>>::read(*iprot, this->field28);
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field29);
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 30:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field30);
          this->__isset.field30 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 31:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field31);
          this->__isset.field31 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 32:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field32 = std::vector<std::set<bool>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<bool>>>::read(*iprot, this->field32);
          this->__isset.field32 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 33:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field33 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field33);
          this->__isset.field33 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 34:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field34);
          this->__isset.field34 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 35:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field35);
          this->__isset.field35 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 36:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field36);
          this->__isset.field36 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 37:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field37);
          this->__isset.field37 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 38:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field38);
          this->__isset.field38 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 39:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field39);
          this->__isset.field39 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 40:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::read(iprot, &this->field40);
          this->__isset.field40 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 41:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field41);
          this->__isset.field41 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 42:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field42 = std::map<int64_t, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int16_t>>::read(*iprot, this->field42);
          this->__isset.field42 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 43:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field43);
          this->__isset.field43 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 44:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field44 = std::set<std::map<std::map<int64_t,  ::cpp2::Struct8>, int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, ::apache::thrift::type_class::integral>>, std::set<std::map<std::map<int64_t,  ::cpp2::Struct8>, int32_t>>>::read(*iprot, this->field44);
          this->__isset.field44 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 45:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field45);
          this->__isset.field45 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 46:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field46);
          this->__isset.field46 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 47:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::read(iprot, &this->field47);
          this->__isset.field47 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 48:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field48 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field48);
          this->__isset.field48 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 49:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field49);
          this->__isset.field49 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 50:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field50 = std::map<float,  ::cpp2::Struct3>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::structure>, std::map<float,  ::cpp2::Struct3>>::read(*iprot, this->field50);
          this->__isset.field50 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 51:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field51);
          this->__isset.field51 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 52:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field52 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field52);
          this->__isset.field52 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 53:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field53 = std::map<std::string, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::string>, std::map<std::string, std::string>>::read(*iprot, this->field53);
          this->__isset.field53 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 54:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field54 = std::map< ::cpp2::Struct2, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct2, int32_t>>::read(*iprot, this->field54);
          this->__isset.field54 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 55:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field55);
          this->__isset.field55 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 56:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field56);
          this->__isset.field56 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 57:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field57);
          this->__isset.field57 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 58:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field58 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field58);
          this->__isset.field58 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 59:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::read(iprot, &this->field59);
          this->__isset.field59 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 60:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field60);
          this->__isset.field60 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 61:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field61);
          this->__isset.field61 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 62:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field62);
          this->__isset.field62 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 63:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field63 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field63);
          this->__isset.field63 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 64:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field64);
          this->__isset.field64 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 65:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field65);
          this->__isset.field65 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 66:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::read(iprot, &this->field66);
          this->__isset.field66 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 67:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field67);
          this->__isset.field67 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 68:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field68);
          this->__isset.field68 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 69:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field69 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field69);
          this->__isset.field69 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 70:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field70 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field70);
          this->__isset.field70 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 71:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field71);
          this->__isset.field71 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 72:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field72 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field72);
          this->__isset.field72 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 73:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field73 = std::set< ::cpp2::Struct5>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct5>>::read(*iprot, this->field73);
          this->__isset.field73 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 74:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::read(iprot, &this->field74);
          this->__isset.field74 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 75:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field75 = std::map<int16_t, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int8_t>>::read(*iprot, this->field75);
          this->__isset.field75 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 76:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field76);
          this->__isset.field76 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 77:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field77 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field77);
          this->__isset.field77 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 78:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field78);
          this->__isset.field78 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 79:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field79);
          this->__isset.field79 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 80:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field80);
          this->__isset.field80 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 81:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field81);
          this->__isset.field81 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 82:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field82);
          this->__isset.field82 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 83:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field83 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field83);
          this->__isset.field83 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 84:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::read(iprot, &this->field84);
          this->__isset.field84 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 85:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field85);
          this->__isset.field85 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 86:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field86);
          this->__isset.field86 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 87:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field87 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field87);
          this->__isset.field87 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 88:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field88 = std::map<double, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<double, float>>::read(*iprot, this->field88);
          this->__isset.field88 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 89:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field89 = std::map<std::set<std::string>, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, ::apache::thrift::type_class::binary>, std::map<std::set<std::string>, std::string>>::read(*iprot, this->field89);
          this->__isset.field89 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 90:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field90);
          this->__isset.field90 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 91:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field91);
          this->__isset.field91 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 92:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field92 = std::map<std::set<double>, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::integral>, std::map<std::set<double>, int8_t>>::read(*iprot, this->field92);
          this->__isset.field92 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 93:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field93);
          this->__isset.field93 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 94:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field94);
          this->__isset.field94 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 95:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field95 = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->field95);
          this->__isset.field95 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 96:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field96 = std::map< ::cpp2::Struct6, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct6, int64_t>>::read(*iprot, this->field96);
          this->__isset.field96 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 97:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field97);
          this->__isset.field97 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 98:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field98);
          this->__isset.field98 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 99:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field99 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field99);
          this->__isset.field99 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 100:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field100);
          this->__isset.field100 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 101:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field101 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field101);
          this->__isset.field101 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 102:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field102 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field102);
          this->__isset.field102 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 103:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field103);
          this->__isset.field103 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 104:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field104 = std::map<int8_t, std::set<float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<int8_t, std::set<float>>>::read(*iprot, this->field104);
          this->__isset.field104 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 105:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::read(iprot, &this->field105);
          this->__isset.field105 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 106:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field106);
          this->__isset.field106 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 107:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field107 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field107);
          this->__isset.field107 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 108:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field108);
          this->__isset.field108 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 109:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field109);
          this->__isset.field109 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 110:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field110 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field110);
          this->__isset.field110 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 111:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field111 = std::set<std::map<float, int16_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::set<std::map<float, int16_t>>>::read(*iprot, this->field111);
          this->__isset.field111 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 112:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field112 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field112);
          this->__isset.field112 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 113:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field113 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field113);
          this->__isset.field113 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 114:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::read(iprot, &this->field114);
          this->__isset.field114 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 115:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field115);
          this->__isset.field115 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 116:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field116);
          this->__isset.field116 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 117:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field117 = std::map<float, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, float>>::read(*iprot, this->field117);
          this->__isset.field117 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 118:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field118 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field118);
          this->__isset.field118 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 119:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field119 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field119);
          this->__isset.field119 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 120:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field120 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field120);
          this->__isset.field120 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 121:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field121 = std::map< ::cpp2::Struct0, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct0, int32_t>>::read(*iprot, this->field121);
          this->__isset.field121 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 122:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field122 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field122);
          this->__isset.field122 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 123:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::read(iprot, &this->field123);
          this->__isset.field123 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 124:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field124);
          this->__isset.field124 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 125:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field125);
          this->__isset.field125 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 126:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field126);
          this->__isset.field126 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 127:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field127 = std::vector<std::map<std::string, bool>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>>, std::vector<std::map<std::string, bool>>>::read(*iprot, this->field127);
          this->__isset.field127 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 128:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field128 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field128);
          this->__isset.field128 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 129:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field129 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field129);
          this->__isset.field129 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 130:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field130);
          this->__isset.field130 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 131:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field131);
          this->__isset.field131 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 132:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field132 = std::map< ::cpp2::Struct2, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::floating_point>, std::map< ::cpp2::Struct2, float>>::read(*iprot, this->field132);
          this->__isset.field132 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 133:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field133 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field133);
          this->__isset.field133 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 134:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field134);
          this->__isset.field134 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 135:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field135);
          this->__isset.field135 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 136:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field136);
          this->__isset.field136 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 137:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field137 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field137);
          this->__isset.field137 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 138:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field138 = std::map<bool, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int32_t>>::read(*iprot, this->field138);
          this->__isset.field138 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 139:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field139);
          this->__isset.field139 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 140:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field140);
          this->__isset.field140 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 141:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field141);
          this->__isset.field141 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 142:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field142);
          this->__isset.field142 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 143:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field143 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field143);
          this->__isset.field143 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 144:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field144 = std::map<float, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int64_t>>::read(*iprot, this->field144);
          this->__isset.field144 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 145:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field145);
          this->__isset.field145 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 146:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field146);
          this->__isset.field146 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 147:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field147 = std::set<std::vector<int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int32_t>>>::read(*iprot, this->field147);
          this->__isset.field147 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 148:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field148 = std::map<float, std::vector<int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<float, std::vector<int32_t>>>::read(*iprot, this->field148);
          this->__isset.field148 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 149:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::read(iprot, &this->field149);
          this->__isset.field149 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 150:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field150);
          this->__isset.field150 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 151:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field151);
          this->__isset.field151 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 152:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field152 = std::map<int16_t, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int32_t>>::read(*iprot, this->field152);
          this->__isset.field152 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 153:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field153);
          this->__isset.field153 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 154:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field154);
          this->__isset.field154 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 155:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field155);
          this->__isset.field155 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 156:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field156);
          this->__isset.field156 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 157:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field157 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field157);
          this->__isset.field157 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 158:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::read(iprot, &this->field158);
          this->__isset.field158 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 159:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field159);
          this->__isset.field159 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 160:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field160 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field160);
          this->__isset.field160 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 161:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field161 = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->field161);
          this->__isset.field161 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 162:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field162);
          this->__isset.field162 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 163:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field163);
          this->__isset.field163 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 164:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field164);
          this->__isset.field164 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 165:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field165);
          this->__isset.field165 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 166:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field166 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field166);
          this->__isset.field166 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 167:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::read(iprot, &this->field167);
          this->__isset.field167 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 168:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field168 = std::map< ::cpp2::Struct3, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct3, int64_t>>::read(*iprot, this->field168);
          this->__isset.field168 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 169:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field169 = std::map<std::string, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::read(*iprot, this->field169);
          this->__isset.field169 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 170:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field170 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field170);
          this->__isset.field170 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 171:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field171 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field171);
          this->__isset.field171 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 172:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field172 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field172);
          this->__isset.field172 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 173:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field173);
          this->__isset.field173 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 174:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field174 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field174);
          this->__isset.field174 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 175:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field175 = std::map<int8_t, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::read(*iprot, this->field175);
          this->__isset.field175 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 176:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field176 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field176);
          this->__isset.field176 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 177:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::read(iprot, &this->field177);
          this->__isset.field177 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 178:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::read(iprot, &this->field178);
          this->__isset.field178 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 179:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field179 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field179);
          this->__isset.field179 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 180:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field180 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field180);
          this->__isset.field180 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 181:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field181);
          this->__isset.field181 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 182:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::read(iprot, &this->field182);
          this->__isset.field182 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 183:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field183);
          this->__isset.field183 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 184:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field184);
          this->__isset.field184 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 185:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field185);
          this->__isset.field185 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 186:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field186 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field186);
          this->__isset.field186 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 187:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field187);
          this->__isset.field187 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 188:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field188);
          this->__isset.field188 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 189:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field189);
          this->__isset.field189 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 190:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field190);
          this->__isset.field190 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 191:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field191);
          this->__isset.field191 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 192:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field192 = std::map<std::vector<int16_t>, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<int16_t>, int8_t>>::read(*iprot, this->field192);
          this->__isset.field192 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 193:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field193);
          this->__isset.field193 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 194:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field194);
          this->__isset.field194 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 195:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field195);
          this->__isset.field195 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 196:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field196 = std::map<bool,  ::cpp2::Struct3>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<bool,  ::cpp2::Struct3>>::read(*iprot, this->field196);
          this->__isset.field196 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 197:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field197);
          this->__isset.field197 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct14::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct14");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->serializedSizeI64(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I16, 3);
  xfer += prot_->serializedSizeI16(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->serializedSizeByte(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_DOUBLE, 5);
  xfer += prot_->serializedSizeDouble(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_STRING, 6);
  xfer += prot_->serializedSizeBinary(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_DOUBLE, 8);
  xfer += prot_->serializedSizeDouble(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRING, 9);
  xfer += prot_->serializedSizeBinary(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_STRUCT, 10);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_FLOAT, 11);
  xfer += prot_->serializedSizeFloat(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_I32, 12);
  xfer += prot_->serializedSizeI32(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_FLOAT, 13);
  xfer += prot_->serializedSizeFloat(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_DOUBLE, 14);
  xfer += prot_->serializedSizeDouble(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_BOOL, 15);
  xfer += prot_->serializedSizeBool(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_I64, 16);
  xfer += prot_->serializedSizeI64(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_I16, 17);
  xfer += prot_->serializedSizeI16(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_I64, 18);
  xfer += prot_->serializedSizeI64(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_STRING, 19);
  xfer += prot_->serializedSizeString(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_BOOL, 20);
  xfer += prot_->serializedSizeBool(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_I16, 21);
  xfer += prot_->serializedSizeI16(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_FLOAT, 22);
  xfer += prot_->serializedSizeFloat(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_MAP, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::floating_point>>, std::map<int64_t, std::map<std::string, float>>>::serializedSize<false>(*prot_, this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_STRING, 24);
  xfer += prot_->serializedSizeBinary(this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_STRUCT, 25);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_MAP, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int16_t, double>>::serializedSize<false>(*prot_, this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_STRING, 27);
  xfer += prot_->serializedSizeString(this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_MAP, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::string>, ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>, ::apache::thrift::type_class::string>, std::map<std::map<std::vector<std::string>, std::set<std::string>>, std::string>>::serializedSize<false>(*prot_, this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_FLOAT, 29);
  xfer += prot_->serializedSizeFloat(this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_STRING, 30);
  xfer += prot_->serializedSizeString(this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_DOUBLE, 31);
  xfer += prot_->serializedSizeDouble(this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_LIST, 32);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<bool>>>::serializedSize<false>(*prot_, this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_LIST, 33);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_STRING, 34);
  xfer += prot_->serializedSizeBinary(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_STRUCT, 35);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_I32, 36);
  xfer += prot_->serializedSizeI32(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_STRUCT, 37);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_STRING, 38);
  xfer += prot_->serializedSizeBinary(this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_I32, 39);
  xfer += prot_->serializedSizeI32(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_STRUCT, 40);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSize(prot_, &this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_STRUCT, 41);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_MAP, 42);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int16_t>>::serializedSize<false>(*prot_, this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_STRING, 43);
  xfer += prot_->serializedSizeBinary(this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_SET, 44);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, ::apache::thrift::type_class::integral>>, std::set<std::map<std::map<int64_t,  ::cpp2::Struct8>, int32_t>>>::serializedSize<false>(*prot_, this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_I32, 45);
  xfer += prot_->serializedSizeI32(this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_BYTE, 46);
  xfer += prot_->serializedSizeByte(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_STRUCT, 47);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSize(prot_, &this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_SET, 48);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_STRUCT, 49);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_MAP, 50);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::structure>, std::map<float,  ::cpp2::Struct3>>::serializedSize<false>(*prot_, this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_I32, 51);
  xfer += prot_->serializedSizeI32(this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_LIST, 52);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_MAP, 53);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::string>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_MAP, 54);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct2, int32_t>>::serializedSize<false>(*prot_, this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_STRUCT, 55);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_DOUBLE, 56);
  xfer += prot_->serializedSizeDouble(this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_BOOL, 57);
  xfer += prot_->serializedSizeBool(this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_LIST, 58);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_STRUCT, 59);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSize(prot_, &this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_STRING, 60);
  xfer += prot_->serializedSizeBinary(this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_BOOL, 61);
  xfer += prot_->serializedSizeBool(this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_I16, 62);
  xfer += prot_->serializedSizeI16(this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_LIST, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_STRING, 64);
  xfer += prot_->serializedSizeString(this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_STRUCT, 65);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_STRUCT, 66);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSize(prot_, &this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_BYTE, 67);
  xfer += prot_->serializedSizeByte(this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_I64, 68);
  xfer += prot_->serializedSizeI64(this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_SET, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_LIST, 70);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_STRING, 71);
  xfer += prot_->serializedSizeString(this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_LIST, 72);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_SET, 73);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct5>>::serializedSize<false>(*prot_, this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_STRUCT, 74);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSize(prot_, &this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_MAP, 75);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int8_t>>::serializedSize<false>(*prot_, this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_BOOL, 76);
  xfer += prot_->serializedSizeBool(this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_SET, 77);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_BYTE, 78);
  xfer += prot_->serializedSizeByte(this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_STRING, 79);
  xfer += prot_->serializedSizeBinary(this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_DOUBLE, 80);
  xfer += prot_->serializedSizeDouble(this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_BOOL, 81);
  xfer += prot_->serializedSizeBool(this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_I64, 82);
  xfer += prot_->serializedSizeI64(this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_SET, 83);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_STRUCT, 84);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSize(prot_, &this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_BOOL, 85);
  xfer += prot_->serializedSizeBool(this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_FLOAT, 86);
  xfer += prot_->serializedSizeFloat(this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_SET, 87);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_MAP, 88);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<double, float>>::serializedSize<false>(*prot_, this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_MAP, 89);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, ::apache::thrift::type_class::binary>, std::map<std::set<std::string>, std::string>>::serializedSize<false>(*prot_, this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_I64, 90);
  xfer += prot_->serializedSizeI64(this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_I16, 91);
  xfer += prot_->serializedSizeI16(this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_MAP, 92);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::integral>, std::map<std::set<double>, int8_t>>::serializedSize<false>(*prot_, this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_BOOL, 93);
  xfer += prot_->serializedSizeBool(this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_I64, 94);
  xfer += prot_->serializedSizeI64(this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_LIST, 95);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_MAP, 96);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct6, int64_t>>::serializedSize<false>(*prot_, this->field96);
  xfer += prot_->serializedFieldSize("field97", apache::thrift::protocol::T_STRING, 97);
  xfer += prot_->serializedSizeString(this->field97);
  xfer += prot_->serializedFieldSize("field98", apache::thrift::protocol::T_STRUCT, 98);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field98);
  xfer += prot_->serializedFieldSize("field99", apache::thrift::protocol::T_SET, 99);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field99);
  xfer += prot_->serializedFieldSize("field100", apache::thrift::protocol::T_I64, 100);
  xfer += prot_->serializedSizeI64(this->field100);
  xfer += prot_->serializedFieldSize("field101", apache::thrift::protocol::T_LIST, 101);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field101);
  xfer += prot_->serializedFieldSize("field102", apache::thrift::protocol::T_LIST, 102);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field102);
  xfer += prot_->serializedFieldSize("field103", apache::thrift::protocol::T_I64, 103);
  xfer += prot_->serializedSizeI64(this->field103);
  xfer += prot_->serializedFieldSize("field104", apache::thrift::protocol::T_MAP, 104);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<int8_t, std::set<float>>>::serializedSize<false>(*prot_, this->field104);
  xfer += prot_->serializedFieldSize("field105", apache::thrift::protocol::T_STRUCT, 105);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSize(prot_, &this->field105);
  xfer += prot_->serializedFieldSize("field106", apache::thrift::protocol::T_BYTE, 106);
  xfer += prot_->serializedSizeByte(this->field106);
  xfer += prot_->serializedFieldSize("field107", apache::thrift::protocol::T_SET, 107);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field107);
  xfer += prot_->serializedFieldSize("field108", apache::thrift::protocol::T_FLOAT, 108);
  xfer += prot_->serializedSizeFloat(this->field108);
  xfer += prot_->serializedFieldSize("field109", apache::thrift::protocol::T_STRING, 109);
  xfer += prot_->serializedSizeBinary(this->field109);
  xfer += prot_->serializedFieldSize("field110", apache::thrift::protocol::T_LIST, 110);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field110);
  xfer += prot_->serializedFieldSize("field111", apache::thrift::protocol::T_SET, 111);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::set<std::map<float, int16_t>>>::serializedSize<false>(*prot_, this->field111);
  xfer += prot_->serializedFieldSize("field112", apache::thrift::protocol::T_LIST, 112);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field112);
  xfer += prot_->serializedFieldSize("field113", apache::thrift::protocol::T_LIST, 113);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field113);
  xfer += prot_->serializedFieldSize("field114", apache::thrift::protocol::T_STRUCT, 114);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSize(prot_, &this->field114);
  xfer += prot_->serializedFieldSize("field115", apache::thrift::protocol::T_BOOL, 115);
  xfer += prot_->serializedSizeBool(this->field115);
  xfer += prot_->serializedFieldSize("field116", apache::thrift::protocol::T_I16, 116);
  xfer += prot_->serializedSizeI16(this->field116);
  xfer += prot_->serializedFieldSize("field117", apache::thrift::protocol::T_MAP, 117);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, float>>::serializedSize<false>(*prot_, this->field117);
  xfer += prot_->serializedFieldSize("field118", apache::thrift::protocol::T_SET, 118);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field118);
  xfer += prot_->serializedFieldSize("field119", apache::thrift::protocol::T_SET, 119);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field119);
  xfer += prot_->serializedFieldSize("field120", apache::thrift::protocol::T_SET, 120);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field120);
  xfer += prot_->serializedFieldSize("field121", apache::thrift::protocol::T_MAP, 121);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct0, int32_t>>::serializedSize<false>(*prot_, this->field121);
  xfer += prot_->serializedFieldSize("field122", apache::thrift::protocol::T_SET, 122);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field122);
  xfer += prot_->serializedFieldSize("field123", apache::thrift::protocol::T_STRUCT, 123);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::serializedSize(prot_, &this->field123);
  xfer += prot_->serializedFieldSize("field124", apache::thrift::protocol::T_FLOAT, 124);
  xfer += prot_->serializedSizeFloat(this->field124);
  xfer += prot_->serializedFieldSize("field125", apache::thrift::protocol::T_STRING, 125);
  xfer += prot_->serializedSizeString(this->field125);
  xfer += prot_->serializedFieldSize("field126", apache::thrift::protocol::T_BOOL, 126);
  xfer += prot_->serializedSizeBool(this->field126);
  xfer += prot_->serializedFieldSize("field127", apache::thrift::protocol::T_LIST, 127);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>>, std::vector<std::map<std::string, bool>>>::serializedSize<false>(*prot_, this->field127);
  xfer += prot_->serializedFieldSize("field128", apache::thrift::protocol::T_LIST, 128);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field128);
  xfer += prot_->serializedFieldSize("field129", apache::thrift::protocol::T_LIST, 129);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field129);
  xfer += prot_->serializedFieldSize("field130", apache::thrift::protocol::T_BYTE, 130);
  xfer += prot_->serializedSizeByte(this->field130);
  xfer += prot_->serializedFieldSize("field131", apache::thrift::protocol::T_STRING, 131);
  xfer += prot_->serializedSizeString(this->field131);
  xfer += prot_->serializedFieldSize("field132", apache::thrift::protocol::T_MAP, 132);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::floating_point>, std::map< ::cpp2::Struct2, float>>::serializedSize<false>(*prot_, this->field132);
  xfer += prot_->serializedFieldSize("field133", apache::thrift::protocol::T_LIST, 133);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field133);
  xfer += prot_->serializedFieldSize("field134", apache::thrift::protocol::T_I64, 134);
  xfer += prot_->serializedSizeI64(this->field134);
  xfer += prot_->serializedFieldSize("field135", apache::thrift::protocol::T_STRING, 135);
  xfer += prot_->serializedSizeString(this->field135);
  xfer += prot_->serializedFieldSize("field136", apache::thrift::protocol::T_FLOAT, 136);
  xfer += prot_->serializedSizeFloat(this->field136);
  xfer += prot_->serializedFieldSize("field137", apache::thrift::protocol::T_SET, 137);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field137);
  xfer += prot_->serializedFieldSize("field138", apache::thrift::protocol::T_MAP, 138);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int32_t>>::serializedSize<false>(*prot_, this->field138);
  xfer += prot_->serializedFieldSize("field139", apache::thrift::protocol::T_DOUBLE, 139);
  xfer += prot_->serializedSizeDouble(this->field139);
  xfer += prot_->serializedFieldSize("field140", apache::thrift::protocol::T_STRING, 140);
  xfer += prot_->serializedSizeString(this->field140);
  xfer += prot_->serializedFieldSize("field141", apache::thrift::protocol::T_STRING, 141);
  xfer += prot_->serializedSizeBinary(this->field141);
  xfer += prot_->serializedFieldSize("field142", apache::thrift::protocol::T_BYTE, 142);
  xfer += prot_->serializedSizeByte(this->field142);
  xfer += prot_->serializedFieldSize("field143", apache::thrift::protocol::T_SET, 143);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field143);
  xfer += prot_->serializedFieldSize("field144", apache::thrift::protocol::T_MAP, 144);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int64_t>>::serializedSize<false>(*prot_, this->field144);
  xfer += prot_->serializedFieldSize("field145", apache::thrift::protocol::T_I32, 145);
  xfer += prot_->serializedSizeI32(this->field145);
  xfer += prot_->serializedFieldSize("field146", apache::thrift::protocol::T_I16, 146);
  xfer += prot_->serializedSizeI16(this->field146);
  xfer += prot_->serializedFieldSize("field147", apache::thrift::protocol::T_SET, 147);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int32_t>>>::serializedSize<false>(*prot_, this->field147);
  xfer += prot_->serializedFieldSize("field148", apache::thrift::protocol::T_MAP, 148);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<float, std::vector<int32_t>>>::serializedSize<false>(*prot_, this->field148);
  xfer += prot_->serializedFieldSize("field149", apache::thrift::protocol::T_STRUCT, 149);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSize(prot_, &this->field149);
  xfer += prot_->serializedFieldSize("field150", apache::thrift::protocol::T_BYTE, 150);
  xfer += prot_->serializedSizeByte(this->field150);
  xfer += prot_->serializedFieldSize("field151", apache::thrift::protocol::T_BOOL, 151);
  xfer += prot_->serializedSizeBool(this->field151);
  xfer += prot_->serializedFieldSize("field152", apache::thrift::protocol::T_MAP, 152);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int32_t>>::serializedSize<false>(*prot_, this->field152);
  xfer += prot_->serializedFieldSize("field153", apache::thrift::protocol::T_BYTE, 153);
  xfer += prot_->serializedSizeByte(this->field153);
  xfer += prot_->serializedFieldSize("field154", apache::thrift::protocol::T_STRING, 154);
  xfer += prot_->serializedSizeString(this->field154);
  xfer += prot_->serializedFieldSize("field155", apache::thrift::protocol::T_STRING, 155);
  xfer += prot_->serializedSizeString(this->field155);
  xfer += prot_->serializedFieldSize("field156", apache::thrift::protocol::T_STRUCT, 156);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field156);
  xfer += prot_->serializedFieldSize("field157", apache::thrift::protocol::T_LIST, 157);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field157);
  xfer += prot_->serializedFieldSize("field158", apache::thrift::protocol::T_STRUCT, 158);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSize(prot_, &this->field158);
  xfer += prot_->serializedFieldSize("field159", apache::thrift::protocol::T_BOOL, 159);
  xfer += prot_->serializedSizeBool(this->field159);
  xfer += prot_->serializedFieldSize("field160", apache::thrift::protocol::T_LIST, 160);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field160);
  xfer += prot_->serializedFieldSize("field161", apache::thrift::protocol::T_LIST, 161);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field161);
  xfer += prot_->serializedFieldSize("field162", apache::thrift::protocol::T_I64, 162);
  xfer += prot_->serializedSizeI64(this->field162);
  xfer += prot_->serializedFieldSize("field163", apache::thrift::protocol::T_STRING, 163);
  xfer += prot_->serializedSizeBinary(this->field163);
  xfer += prot_->serializedFieldSize("field164", apache::thrift::protocol::T_STRING, 164);
  xfer += prot_->serializedSizeBinary(this->field164);
  xfer += prot_->serializedFieldSize("field165", apache::thrift::protocol::T_I64, 165);
  xfer += prot_->serializedSizeI64(this->field165);
  xfer += prot_->serializedFieldSize("field166", apache::thrift::protocol::T_LIST, 166);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field166);
  xfer += prot_->serializedFieldSize("field167", apache::thrift::protocol::T_STRUCT, 167);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSize(prot_, &this->field167);
  xfer += prot_->serializedFieldSize("field168", apache::thrift::protocol::T_MAP, 168);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct3, int64_t>>::serializedSize<false>(*prot_, this->field168);
  xfer += prot_->serializedFieldSize("field169", apache::thrift::protocol::T_MAP, 169);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::serializedSize<false>(*prot_, this->field169);
  xfer += prot_->serializedFieldSize("field170", apache::thrift::protocol::T_LIST, 170);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field170);
  xfer += prot_->serializedFieldSize("field171", apache::thrift::protocol::T_SET, 171);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field171);
  xfer += prot_->serializedFieldSize("field172", apache::thrift::protocol::T_LIST, 172);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field172);
  xfer += prot_->serializedFieldSize("field173", apache::thrift::protocol::T_I32, 173);
  xfer += prot_->serializedSizeI32(this->field173);
  xfer += prot_->serializedFieldSize("field174", apache::thrift::protocol::T_SET, 174);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field174);
  xfer += prot_->serializedFieldSize("field175", apache::thrift::protocol::T_MAP, 175);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::serializedSize<false>(*prot_, this->field175);
  xfer += prot_->serializedFieldSize("field176", apache::thrift::protocol::T_LIST, 176);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field176);
  xfer += prot_->serializedFieldSize("field177", apache::thrift::protocol::T_STRUCT, 177);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSize(prot_, &this->field177);
  xfer += prot_->serializedFieldSize("field178", apache::thrift::protocol::T_STRUCT, 178);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::serializedSize(prot_, &this->field178);
  xfer += prot_->serializedFieldSize("field179", apache::thrift::protocol::T_SET, 179);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field179);
  xfer += prot_->serializedFieldSize("field180", apache::thrift::protocol::T_LIST, 180);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field180);
  xfer += prot_->serializedFieldSize("field181", apache::thrift::protocol::T_BYTE, 181);
  xfer += prot_->serializedSizeByte(this->field181);
  xfer += prot_->serializedFieldSize("field182", apache::thrift::protocol::T_STRUCT, 182);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSize(prot_, &this->field182);
  xfer += prot_->serializedFieldSize("field183", apache::thrift::protocol::T_BYTE, 183);
  xfer += prot_->serializedSizeByte(this->field183);
  xfer += prot_->serializedFieldSize("field184", apache::thrift::protocol::T_STRING, 184);
  xfer += prot_->serializedSizeBinary(this->field184);
  xfer += prot_->serializedFieldSize("field185", apache::thrift::protocol::T_DOUBLE, 185);
  xfer += prot_->serializedSizeDouble(this->field185);
  xfer += prot_->serializedFieldSize("field186", apache::thrift::protocol::T_SET, 186);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field186);
  xfer += prot_->serializedFieldSize("field187", apache::thrift::protocol::T_I32, 187);
  xfer += prot_->serializedSizeI32(this->field187);
  xfer += prot_->serializedFieldSize("field188", apache::thrift::protocol::T_STRUCT, 188);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field188);
  xfer += prot_->serializedFieldSize("field189", apache::thrift::protocol::T_I16, 189);
  xfer += prot_->serializedSizeI16(this->field189);
  xfer += prot_->serializedFieldSize("field190", apache::thrift::protocol::T_FLOAT, 190);
  xfer += prot_->serializedSizeFloat(this->field190);
  xfer += prot_->serializedFieldSize("field191", apache::thrift::protocol::T_STRUCT, 191);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field191);
  xfer += prot_->serializedFieldSize("field192", apache::thrift::protocol::T_MAP, 192);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<int16_t>, int8_t>>::serializedSize<false>(*prot_, this->field192);
  xfer += prot_->serializedFieldSize("field193", apache::thrift::protocol::T_STRING, 193);
  xfer += prot_->serializedSizeString(this->field193);
  xfer += prot_->serializedFieldSize("field194", apache::thrift::protocol::T_STRING, 194);
  xfer += prot_->serializedSizeString(this->field194);
  xfer += prot_->serializedFieldSize("field195", apache::thrift::protocol::T_STRUCT, 195);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field195);
  xfer += prot_->serializedFieldSize("field196", apache::thrift::protocol::T_MAP, 196);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<bool,  ::cpp2::Struct3>>::serializedSize<false>(*prot_, this->field196);
  xfer += prot_->serializedFieldSize("field197", apache::thrift::protocol::T_BOOL, 197);
  xfer += prot_->serializedSizeBool(this->field197);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct14::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct14");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->serializedSizeI64(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I16, 3);
  xfer += prot_->serializedSizeI16(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->serializedSizeByte(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_DOUBLE, 5);
  xfer += prot_->serializedSizeDouble(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_STRING, 6);
  xfer += prot_->serializedSizeZCBinary(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_DOUBLE, 8);
  xfer += prot_->serializedSizeDouble(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRING, 9);
  xfer += prot_->serializedSizeZCBinary(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_STRUCT, 10);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_FLOAT, 11);
  xfer += prot_->serializedSizeFloat(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_I32, 12);
  xfer += prot_->serializedSizeI32(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_FLOAT, 13);
  xfer += prot_->serializedSizeFloat(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_DOUBLE, 14);
  xfer += prot_->serializedSizeDouble(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_BOOL, 15);
  xfer += prot_->serializedSizeBool(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_I64, 16);
  xfer += prot_->serializedSizeI64(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_I16, 17);
  xfer += prot_->serializedSizeI16(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_I64, 18);
  xfer += prot_->serializedSizeI64(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_STRING, 19);
  xfer += prot_->serializedSizeString(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_BOOL, 20);
  xfer += prot_->serializedSizeBool(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_I16, 21);
  xfer += prot_->serializedSizeI16(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_FLOAT, 22);
  xfer += prot_->serializedSizeFloat(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_MAP, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::floating_point>>, std::map<int64_t, std::map<std::string, float>>>::serializedSize<false>(*prot_, this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_STRING, 24);
  xfer += prot_->serializedSizeZCBinary(this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_STRUCT, 25);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_MAP, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int16_t, double>>::serializedSize<false>(*prot_, this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_STRING, 27);
  xfer += prot_->serializedSizeString(this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_MAP, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::string>, ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>, ::apache::thrift::type_class::string>, std::map<std::map<std::vector<std::string>, std::set<std::string>>, std::string>>::serializedSize<false>(*prot_, this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_FLOAT, 29);
  xfer += prot_->serializedSizeFloat(this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_STRING, 30);
  xfer += prot_->serializedSizeString(this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_DOUBLE, 31);
  xfer += prot_->serializedSizeDouble(this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_LIST, 32);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<bool>>>::serializedSize<false>(*prot_, this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_LIST, 33);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_STRING, 34);
  xfer += prot_->serializedSizeZCBinary(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_STRUCT, 35);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_I32, 36);
  xfer += prot_->serializedSizeI32(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_STRUCT, 37);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_STRING, 38);
  xfer += prot_->serializedSizeZCBinary(this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_I32, 39);
  xfer += prot_->serializedSizeI32(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_STRUCT, 40);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSizeZC(prot_, &this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_STRUCT, 41);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_MAP, 42);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int16_t>>::serializedSize<false>(*prot_, this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_STRING, 43);
  xfer += prot_->serializedSizeZCBinary(this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_SET, 44);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, ::apache::thrift::type_class::integral>>, std::set<std::map<std::map<int64_t,  ::cpp2::Struct8>, int32_t>>>::serializedSize<false>(*prot_, this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_I32, 45);
  xfer += prot_->serializedSizeI32(this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_BYTE, 46);
  xfer += prot_->serializedSizeByte(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_STRUCT, 47);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSizeZC(prot_, &this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_SET, 48);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_STRUCT, 49);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_MAP, 50);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::structure>, std::map<float,  ::cpp2::Struct3>>::serializedSize<false>(*prot_, this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_I32, 51);
  xfer += prot_->serializedSizeI32(this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_LIST, 52);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_MAP, 53);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::string>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_MAP, 54);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct2, int32_t>>::serializedSize<false>(*prot_, this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_STRUCT, 55);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_DOUBLE, 56);
  xfer += prot_->serializedSizeDouble(this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_BOOL, 57);
  xfer += prot_->serializedSizeBool(this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_LIST, 58);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_STRUCT, 59);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSizeZC(prot_, &this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_STRING, 60);
  xfer += prot_->serializedSizeZCBinary(this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_BOOL, 61);
  xfer += prot_->serializedSizeBool(this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_I16, 62);
  xfer += prot_->serializedSizeI16(this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_LIST, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_STRING, 64);
  xfer += prot_->serializedSizeString(this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_STRUCT, 65);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_STRUCT, 66);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSizeZC(prot_, &this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_BYTE, 67);
  xfer += prot_->serializedSizeByte(this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_I64, 68);
  xfer += prot_->serializedSizeI64(this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_SET, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_LIST, 70);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_STRING, 71);
  xfer += prot_->serializedSizeString(this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_LIST, 72);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_SET, 73);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct5>>::serializedSize<false>(*prot_, this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_STRUCT, 74);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSizeZC(prot_, &this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_MAP, 75);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int8_t>>::serializedSize<false>(*prot_, this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_BOOL, 76);
  xfer += prot_->serializedSizeBool(this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_SET, 77);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_BYTE, 78);
  xfer += prot_->serializedSizeByte(this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_STRING, 79);
  xfer += prot_->serializedSizeZCBinary(this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_DOUBLE, 80);
  xfer += prot_->serializedSizeDouble(this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_BOOL, 81);
  xfer += prot_->serializedSizeBool(this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_I64, 82);
  xfer += prot_->serializedSizeI64(this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_SET, 83);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_STRUCT, 84);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSizeZC(prot_, &this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_BOOL, 85);
  xfer += prot_->serializedSizeBool(this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_FLOAT, 86);
  xfer += prot_->serializedSizeFloat(this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_SET, 87);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_MAP, 88);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<double, float>>::serializedSize<false>(*prot_, this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_MAP, 89);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, ::apache::thrift::type_class::binary>, std::map<std::set<std::string>, std::string>>::serializedSize<false>(*prot_, this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_I64, 90);
  xfer += prot_->serializedSizeI64(this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_I16, 91);
  xfer += prot_->serializedSizeI16(this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_MAP, 92);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::integral>, std::map<std::set<double>, int8_t>>::serializedSize<false>(*prot_, this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_BOOL, 93);
  xfer += prot_->serializedSizeBool(this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_I64, 94);
  xfer += prot_->serializedSizeI64(this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_LIST, 95);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_MAP, 96);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct6, int64_t>>::serializedSize<false>(*prot_, this->field96);
  xfer += prot_->serializedFieldSize("field97", apache::thrift::protocol::T_STRING, 97);
  xfer += prot_->serializedSizeString(this->field97);
  xfer += prot_->serializedFieldSize("field98", apache::thrift::protocol::T_STRUCT, 98);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field98);
  xfer += prot_->serializedFieldSize("field99", apache::thrift::protocol::T_SET, 99);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field99);
  xfer += prot_->serializedFieldSize("field100", apache::thrift::protocol::T_I64, 100);
  xfer += prot_->serializedSizeI64(this->field100);
  xfer += prot_->serializedFieldSize("field101", apache::thrift::protocol::T_LIST, 101);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field101);
  xfer += prot_->serializedFieldSize("field102", apache::thrift::protocol::T_LIST, 102);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field102);
  xfer += prot_->serializedFieldSize("field103", apache::thrift::protocol::T_I64, 103);
  xfer += prot_->serializedSizeI64(this->field103);
  xfer += prot_->serializedFieldSize("field104", apache::thrift::protocol::T_MAP, 104);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<int8_t, std::set<float>>>::serializedSize<false>(*prot_, this->field104);
  xfer += prot_->serializedFieldSize("field105", apache::thrift::protocol::T_STRUCT, 105);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSizeZC(prot_, &this->field105);
  xfer += prot_->serializedFieldSize("field106", apache::thrift::protocol::T_BYTE, 106);
  xfer += prot_->serializedSizeByte(this->field106);
  xfer += prot_->serializedFieldSize("field107", apache::thrift::protocol::T_SET, 107);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field107);
  xfer += prot_->serializedFieldSize("field108", apache::thrift::protocol::T_FLOAT, 108);
  xfer += prot_->serializedSizeFloat(this->field108);
  xfer += prot_->serializedFieldSize("field109", apache::thrift::protocol::T_STRING, 109);
  xfer += prot_->serializedSizeZCBinary(this->field109);
  xfer += prot_->serializedFieldSize("field110", apache::thrift::protocol::T_LIST, 110);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field110);
  xfer += prot_->serializedFieldSize("field111", apache::thrift::protocol::T_SET, 111);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::set<std::map<float, int16_t>>>::serializedSize<false>(*prot_, this->field111);
  xfer += prot_->serializedFieldSize("field112", apache::thrift::protocol::T_LIST, 112);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field112);
  xfer += prot_->serializedFieldSize("field113", apache::thrift::protocol::T_LIST, 113);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field113);
  xfer += prot_->serializedFieldSize("field114", apache::thrift::protocol::T_STRUCT, 114);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSizeZC(prot_, &this->field114);
  xfer += prot_->serializedFieldSize("field115", apache::thrift::protocol::T_BOOL, 115);
  xfer += prot_->serializedSizeBool(this->field115);
  xfer += prot_->serializedFieldSize("field116", apache::thrift::protocol::T_I16, 116);
  xfer += prot_->serializedSizeI16(this->field116);
  xfer += prot_->serializedFieldSize("field117", apache::thrift::protocol::T_MAP, 117);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, float>>::serializedSize<false>(*prot_, this->field117);
  xfer += prot_->serializedFieldSize("field118", apache::thrift::protocol::T_SET, 118);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field118);
  xfer += prot_->serializedFieldSize("field119", apache::thrift::protocol::T_SET, 119);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field119);
  xfer += prot_->serializedFieldSize("field120", apache::thrift::protocol::T_SET, 120);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field120);
  xfer += prot_->serializedFieldSize("field121", apache::thrift::protocol::T_MAP, 121);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct0, int32_t>>::serializedSize<false>(*prot_, this->field121);
  xfer += prot_->serializedFieldSize("field122", apache::thrift::protocol::T_SET, 122);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field122);
  xfer += prot_->serializedFieldSize("field123", apache::thrift::protocol::T_STRUCT, 123);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::serializedSizeZC(prot_, &this->field123);
  xfer += prot_->serializedFieldSize("field124", apache::thrift::protocol::T_FLOAT, 124);
  xfer += prot_->serializedSizeFloat(this->field124);
  xfer += prot_->serializedFieldSize("field125", apache::thrift::protocol::T_STRING, 125);
  xfer += prot_->serializedSizeString(this->field125);
  xfer += prot_->serializedFieldSize("field126", apache::thrift::protocol::T_BOOL, 126);
  xfer += prot_->serializedSizeBool(this->field126);
  xfer += prot_->serializedFieldSize("field127", apache::thrift::protocol::T_LIST, 127);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>>, std::vector<std::map<std::string, bool>>>::serializedSize<false>(*prot_, this->field127);
  xfer += prot_->serializedFieldSize("field128", apache::thrift::protocol::T_LIST, 128);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field128);
  xfer += prot_->serializedFieldSize("field129", apache::thrift::protocol::T_LIST, 129);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field129);
  xfer += prot_->serializedFieldSize("field130", apache::thrift::protocol::T_BYTE, 130);
  xfer += prot_->serializedSizeByte(this->field130);
  xfer += prot_->serializedFieldSize("field131", apache::thrift::protocol::T_STRING, 131);
  xfer += prot_->serializedSizeString(this->field131);
  xfer += prot_->serializedFieldSize("field132", apache::thrift::protocol::T_MAP, 132);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::floating_point>, std::map< ::cpp2::Struct2, float>>::serializedSize<false>(*prot_, this->field132);
  xfer += prot_->serializedFieldSize("field133", apache::thrift::protocol::T_LIST, 133);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field133);
  xfer += prot_->serializedFieldSize("field134", apache::thrift::protocol::T_I64, 134);
  xfer += prot_->serializedSizeI64(this->field134);
  xfer += prot_->serializedFieldSize("field135", apache::thrift::protocol::T_STRING, 135);
  xfer += prot_->serializedSizeString(this->field135);
  xfer += prot_->serializedFieldSize("field136", apache::thrift::protocol::T_FLOAT, 136);
  xfer += prot_->serializedSizeFloat(this->field136);
  xfer += prot_->serializedFieldSize("field137", apache::thrift::protocol::T_SET, 137);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field137);
  xfer += prot_->serializedFieldSize("field138", apache::thrift::protocol::T_MAP, 138);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int32_t>>::serializedSize<false>(*prot_, this->field138);
  xfer += prot_->serializedFieldSize("field139", apache::thrift::protocol::T_DOUBLE, 139);
  xfer += prot_->serializedSizeDouble(this->field139);
  xfer += prot_->serializedFieldSize("field140", apache::thrift::protocol::T_STRING, 140);
  xfer += prot_->serializedSizeString(this->field140);
  xfer += prot_->serializedFieldSize("field141", apache::thrift::protocol::T_STRING, 141);
  xfer += prot_->serializedSizeZCBinary(this->field141);
  xfer += prot_->serializedFieldSize("field142", apache::thrift::protocol::T_BYTE, 142);
  xfer += prot_->serializedSizeByte(this->field142);
  xfer += prot_->serializedFieldSize("field143", apache::thrift::protocol::T_SET, 143);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field143);
  xfer += prot_->serializedFieldSize("field144", apache::thrift::protocol::T_MAP, 144);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int64_t>>::serializedSize<false>(*prot_, this->field144);
  xfer += prot_->serializedFieldSize("field145", apache::thrift::protocol::T_I32, 145);
  xfer += prot_->serializedSizeI32(this->field145);
  xfer += prot_->serializedFieldSize("field146", apache::thrift::protocol::T_I16, 146);
  xfer += prot_->serializedSizeI16(this->field146);
  xfer += prot_->serializedFieldSize("field147", apache::thrift::protocol::T_SET, 147);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int32_t>>>::serializedSize<false>(*prot_, this->field147);
  xfer += prot_->serializedFieldSize("field148", apache::thrift::protocol::T_MAP, 148);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<float, std::vector<int32_t>>>::serializedSize<false>(*prot_, this->field148);
  xfer += prot_->serializedFieldSize("field149", apache::thrift::protocol::T_STRUCT, 149);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSizeZC(prot_, &this->field149);
  xfer += prot_->serializedFieldSize("field150", apache::thrift::protocol::T_BYTE, 150);
  xfer += prot_->serializedSizeByte(this->field150);
  xfer += prot_->serializedFieldSize("field151", apache::thrift::protocol::T_BOOL, 151);
  xfer += prot_->serializedSizeBool(this->field151);
  xfer += prot_->serializedFieldSize("field152", apache::thrift::protocol::T_MAP, 152);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int32_t>>::serializedSize<false>(*prot_, this->field152);
  xfer += prot_->serializedFieldSize("field153", apache::thrift::protocol::T_BYTE, 153);
  xfer += prot_->serializedSizeByte(this->field153);
  xfer += prot_->serializedFieldSize("field154", apache::thrift::protocol::T_STRING, 154);
  xfer += prot_->serializedSizeString(this->field154);
  xfer += prot_->serializedFieldSize("field155", apache::thrift::protocol::T_STRING, 155);
  xfer += prot_->serializedSizeString(this->field155);
  xfer += prot_->serializedFieldSize("field156", apache::thrift::protocol::T_STRUCT, 156);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field156);
  xfer += prot_->serializedFieldSize("field157", apache::thrift::protocol::T_LIST, 157);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field157);
  xfer += prot_->serializedFieldSize("field158", apache::thrift::protocol::T_STRUCT, 158);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSizeZC(prot_, &this->field158);
  xfer += prot_->serializedFieldSize("field159", apache::thrift::protocol::T_BOOL, 159);
  xfer += prot_->serializedSizeBool(this->field159);
  xfer += prot_->serializedFieldSize("field160", apache::thrift::protocol::T_LIST, 160);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field160);
  xfer += prot_->serializedFieldSize("field161", apache::thrift::protocol::T_LIST, 161);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field161);
  xfer += prot_->serializedFieldSize("field162", apache::thrift::protocol::T_I64, 162);
  xfer += prot_->serializedSizeI64(this->field162);
  xfer += prot_->serializedFieldSize("field163", apache::thrift::protocol::T_STRING, 163);
  xfer += prot_->serializedSizeZCBinary(this->field163);
  xfer += prot_->serializedFieldSize("field164", apache::thrift::protocol::T_STRING, 164);
  xfer += prot_->serializedSizeZCBinary(this->field164);
  xfer += prot_->serializedFieldSize("field165", apache::thrift::protocol::T_I64, 165);
  xfer += prot_->serializedSizeI64(this->field165);
  xfer += prot_->serializedFieldSize("field166", apache::thrift::protocol::T_LIST, 166);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field166);
  xfer += prot_->serializedFieldSize("field167", apache::thrift::protocol::T_STRUCT, 167);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSizeZC(prot_, &this->field167);
  xfer += prot_->serializedFieldSize("field168", apache::thrift::protocol::T_MAP, 168);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct3, int64_t>>::serializedSize<false>(*prot_, this->field168);
  xfer += prot_->serializedFieldSize("field169", apache::thrift::protocol::T_MAP, 169);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::serializedSize<false>(*prot_, this->field169);
  xfer += prot_->serializedFieldSize("field170", apache::thrift::protocol::T_LIST, 170);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field170);
  xfer += prot_->serializedFieldSize("field171", apache::thrift::protocol::T_SET, 171);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field171);
  xfer += prot_->serializedFieldSize("field172", apache::thrift::protocol::T_LIST, 172);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field172);
  xfer += prot_->serializedFieldSize("field173", apache::thrift::protocol::T_I32, 173);
  xfer += prot_->serializedSizeI32(this->field173);
  xfer += prot_->serializedFieldSize("field174", apache::thrift::protocol::T_SET, 174);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field174);
  xfer += prot_->serializedFieldSize("field175", apache::thrift::protocol::T_MAP, 175);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::serializedSize<false>(*prot_, this->field175);
  xfer += prot_->serializedFieldSize("field176", apache::thrift::protocol::T_LIST, 176);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field176);
  xfer += prot_->serializedFieldSize("field177", apache::thrift::protocol::T_STRUCT, 177);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSizeZC(prot_, &this->field177);
  xfer += prot_->serializedFieldSize("field178", apache::thrift::protocol::T_STRUCT, 178);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::serializedSizeZC(prot_, &this->field178);
  xfer += prot_->serializedFieldSize("field179", apache::thrift::protocol::T_SET, 179);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field179);
  xfer += prot_->serializedFieldSize("field180", apache::thrift::protocol::T_LIST, 180);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field180);
  xfer += prot_->serializedFieldSize("field181", apache::thrift::protocol::T_BYTE, 181);
  xfer += prot_->serializedSizeByte(this->field181);
  xfer += prot_->serializedFieldSize("field182", apache::thrift::protocol::T_STRUCT, 182);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSizeZC(prot_, &this->field182);
  xfer += prot_->serializedFieldSize("field183", apache::thrift::protocol::T_BYTE, 183);
  xfer += prot_->serializedSizeByte(this->field183);
  xfer += prot_->serializedFieldSize("field184", apache::thrift::protocol::T_STRING, 184);
  xfer += prot_->serializedSizeZCBinary(this->field184);
  xfer += prot_->serializedFieldSize("field185", apache::thrift::protocol::T_DOUBLE, 185);
  xfer += prot_->serializedSizeDouble(this->field185);
  xfer += prot_->serializedFieldSize("field186", apache::thrift::protocol::T_SET, 186);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field186);
  xfer += prot_->serializedFieldSize("field187", apache::thrift::protocol::T_I32, 187);
  xfer += prot_->serializedSizeI32(this->field187);
  xfer += prot_->serializedFieldSize("field188", apache::thrift::protocol::T_STRUCT, 188);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field188);
  xfer += prot_->serializedFieldSize("field189", apache::thrift::protocol::T_I16, 189);
  xfer += prot_->serializedSizeI16(this->field189);
  xfer += prot_->serializedFieldSize("field190", apache::thrift::protocol::T_FLOAT, 190);
  xfer += prot_->serializedSizeFloat(this->field190);
  xfer += prot_->serializedFieldSize("field191", apache::thrift::protocol::T_STRUCT, 191);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field191);
  xfer += prot_->serializedFieldSize("field192", apache::thrift::protocol::T_MAP, 192);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<int16_t>, int8_t>>::serializedSize<false>(*prot_, this->field192);
  xfer += prot_->serializedFieldSize("field193", apache::thrift::protocol::T_STRING, 193);
  xfer += prot_->serializedSizeString(this->field193);
  xfer += prot_->serializedFieldSize("field194", apache::thrift::protocol::T_STRING, 194);
  xfer += prot_->serializedSizeString(this->field194);
  xfer += prot_->serializedFieldSize("field195", apache::thrift::protocol::T_STRUCT, 195);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field195);
  xfer += prot_->serializedFieldSize("field196", apache::thrift::protocol::T_MAP, 196);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<bool,  ::cpp2::Struct3>>::serializedSize<false>(*prot_, this->field196);
  xfer += prot_->serializedFieldSize("field197", apache::thrift::protocol::T_BOOL, 197);
  xfer += prot_->serializedSizeBool(this->field197);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct14::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct14");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_I64, 1);
  xfer += prot_->writeI64(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_I16, 3);
  xfer += prot_->writeI16(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->writeByte(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_DOUBLE, 5);
  xfer += prot_->writeDouble(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_STRING, 6);
  xfer += prot_->writeBinary(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_SET, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_DOUBLE, 8);
  xfer += prot_->writeDouble(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_STRING, 9);
  xfer += prot_->writeBinary(this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_STRUCT, 10);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_FLOAT, 11);
  xfer += prot_->writeFloat(this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_I32, 12);
  xfer += prot_->writeI32(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_FLOAT, 13);
  xfer += prot_->writeFloat(this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_DOUBLE, 14);
  xfer += prot_->writeDouble(this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_BOOL, 15);
  xfer += prot_->writeBool(this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_I64, 16);
  xfer += prot_->writeI64(this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_I16, 17);
  xfer += prot_->writeI16(this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_I64, 18);
  xfer += prot_->writeI64(this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_STRING, 19);
  xfer += prot_->writeString(this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_BOOL, 20);
  xfer += prot_->writeBool(this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_I16, 21);
  xfer += prot_->writeI16(this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_FLOAT, 22);
  xfer += prot_->writeFloat(this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_MAP, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::floating_point>>, std::map<int64_t, std::map<std::string, float>>>::write(*prot_, this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_STRING, 24);
  xfer += prot_->writeBinary(this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_STRUCT, 25);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_MAP, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int16_t, double>>::write(*prot_, this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_STRING, 27);
  xfer += prot_->writeString(this->field27);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_MAP, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::string>, ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>, ::apache::thrift::type_class::string>, std::map<std::map<std::vector<std::string>, std::set<std::string>>, std::string>>::write(*prot_, this->field28);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field29", apache::thrift::protocol::T_FLOAT, 29);
  xfer += prot_->writeFloat(this->field29);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field30", apache::thrift::protocol::T_STRING, 30);
  xfer += prot_->writeString(this->field30);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field31", apache::thrift::protocol::T_DOUBLE, 31);
  xfer += prot_->writeDouble(this->field31);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field32", apache::thrift::protocol::T_LIST, 32);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<bool>>>::write(*prot_, this->field32);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field33", apache::thrift::protocol::T_LIST, 33);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field33);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field34", apache::thrift::protocol::T_STRING, 34);
  xfer += prot_->writeBinary(this->field34);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field35", apache::thrift::protocol::T_STRUCT, 35);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field35);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field36", apache::thrift::protocol::T_I32, 36);
  xfer += prot_->writeI32(this->field36);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field37", apache::thrift::protocol::T_STRUCT, 37);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field37);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field38", apache::thrift::protocol::T_STRING, 38);
  xfer += prot_->writeBinary(this->field38);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field39", apache::thrift::protocol::T_I32, 39);
  xfer += prot_->writeI32(this->field39);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field40", apache::thrift::protocol::T_STRUCT, 40);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::write(prot_, &this->field40);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field41", apache::thrift::protocol::T_STRUCT, 41);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field41);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field42", apache::thrift::protocol::T_MAP, 42);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int16_t>>::write(*prot_, this->field42);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field43", apache::thrift::protocol::T_STRING, 43);
  xfer += prot_->writeBinary(this->field43);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field44", apache::thrift::protocol::T_SET, 44);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, ::apache::thrift::type_class::integral>>, std::set<std::map<std::map<int64_t,  ::cpp2::Struct8>, int32_t>>>::write(*prot_, this->field44);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field45", apache::thrift::protocol::T_I32, 45);
  xfer += prot_->writeI32(this->field45);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field46", apache::thrift::protocol::T_BYTE, 46);
  xfer += prot_->writeByte(this->field46);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field47", apache::thrift::protocol::T_STRUCT, 47);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::write(prot_, &this->field47);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field48", apache::thrift::protocol::T_SET, 48);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field48);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field49", apache::thrift::protocol::T_STRUCT, 49);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field49);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field50", apache::thrift::protocol::T_MAP, 50);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::structure>, std::map<float,  ::cpp2::Struct3>>::write(*prot_, this->field50);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field51", apache::thrift::protocol::T_I32, 51);
  xfer += prot_->writeI32(this->field51);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field52", apache::thrift::protocol::T_LIST, 52);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field52);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field53", apache::thrift::protocol::T_MAP, 53);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::string>, std::map<std::string, std::string>>::write(*prot_, this->field53);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field54", apache::thrift::protocol::T_MAP, 54);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct2, int32_t>>::write(*prot_, this->field54);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field55", apache::thrift::protocol::T_STRUCT, 55);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field55);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field56", apache::thrift::protocol::T_DOUBLE, 56);
  xfer += prot_->writeDouble(this->field56);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field57", apache::thrift::protocol::T_BOOL, 57);
  xfer += prot_->writeBool(this->field57);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field58", apache::thrift::protocol::T_LIST, 58);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field58);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field59", apache::thrift::protocol::T_STRUCT, 59);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::write(prot_, &this->field59);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field60", apache::thrift::protocol::T_STRING, 60);
  xfer += prot_->writeBinary(this->field60);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field61", apache::thrift::protocol::T_BOOL, 61);
  xfer += prot_->writeBool(this->field61);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field62", apache::thrift::protocol::T_I16, 62);
  xfer += prot_->writeI16(this->field62);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field63", apache::thrift::protocol::T_LIST, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field63);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field64", apache::thrift::protocol::T_STRING, 64);
  xfer += prot_->writeString(this->field64);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field65", apache::thrift::protocol::T_STRUCT, 65);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field65);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field66", apache::thrift::protocol::T_STRUCT, 66);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::write(prot_, &this->field66);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field67", apache::thrift::protocol::T_BYTE, 67);
  xfer += prot_->writeByte(this->field67);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field68", apache::thrift::protocol::T_I64, 68);
  xfer += prot_->writeI64(this->field68);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field69", apache::thrift::protocol::T_SET, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field69);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field70", apache::thrift::protocol::T_LIST, 70);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field70);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field71", apache::thrift::protocol::T_STRING, 71);
  xfer += prot_->writeString(this->field71);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field72", apache::thrift::protocol::T_LIST, 72);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field72);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field73", apache::thrift::protocol::T_SET, 73);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct5>>::write(*prot_, this->field73);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field74", apache::thrift::protocol::T_STRUCT, 74);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::write(prot_, &this->field74);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field75", apache::thrift::protocol::T_MAP, 75);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int8_t>>::write(*prot_, this->field75);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field76", apache::thrift::protocol::T_BOOL, 76);
  xfer += prot_->writeBool(this->field76);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field77", apache::thrift::protocol::T_SET, 77);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field77);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field78", apache::thrift::protocol::T_BYTE, 78);
  xfer += prot_->writeByte(this->field78);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field79", apache::thrift::protocol::T_STRING, 79);
  xfer += prot_->writeBinary(this->field79);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field80", apache::thrift::protocol::T_DOUBLE, 80);
  xfer += prot_->writeDouble(this->field80);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field81", apache::thrift::protocol::T_BOOL, 81);
  xfer += prot_->writeBool(this->field81);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field82", apache::thrift::protocol::T_I64, 82);
  xfer += prot_->writeI64(this->field82);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field83", apache::thrift::protocol::T_SET, 83);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field83);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field84", apache::thrift::protocol::T_STRUCT, 84);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::write(prot_, &this->field84);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field85", apache::thrift::protocol::T_BOOL, 85);
  xfer += prot_->writeBool(this->field85);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field86", apache::thrift::protocol::T_FLOAT, 86);
  xfer += prot_->writeFloat(this->field86);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field87", apache::thrift::protocol::T_SET, 87);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field87);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field88", apache::thrift::protocol::T_MAP, 88);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<double, float>>::write(*prot_, this->field88);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field89", apache::thrift::protocol::T_MAP, 89);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, ::apache::thrift::type_class::binary>, std::map<std::set<std::string>, std::string>>::write(*prot_, this->field89);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field90", apache::thrift::protocol::T_I64, 90);
  xfer += prot_->writeI64(this->field90);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field91", apache::thrift::protocol::T_I16, 91);
  xfer += prot_->writeI16(this->field91);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field92", apache::thrift::protocol::T_MAP, 92);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::integral>, std::map<std::set<double>, int8_t>>::write(*prot_, this->field92);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field93", apache::thrift::protocol::T_BOOL, 93);
  xfer += prot_->writeBool(this->field93);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field94", apache::thrift::protocol::T_I64, 94);
  xfer += prot_->writeI64(this->field94);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field95", apache::thrift::protocol::T_LIST, 95);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->field95);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field96", apache::thrift::protocol::T_MAP, 96);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct6, int64_t>>::write(*prot_, this->field96);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field97", apache::thrift::protocol::T_STRING, 97);
  xfer += prot_->writeString(this->field97);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field98", apache::thrift::protocol::T_STRUCT, 98);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field98);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field99", apache::thrift::protocol::T_SET, 99);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field99);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field100", apache::thrift::protocol::T_I64, 100);
  xfer += prot_->writeI64(this->field100);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field101", apache::thrift::protocol::T_LIST, 101);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field101);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field102", apache::thrift::protocol::T_LIST, 102);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field102);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field103", apache::thrift::protocol::T_I64, 103);
  xfer += prot_->writeI64(this->field103);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field104", apache::thrift::protocol::T_MAP, 104);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<int8_t, std::set<float>>>::write(*prot_, this->field104);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field105", apache::thrift::protocol::T_STRUCT, 105);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::write(prot_, &this->field105);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field106", apache::thrift::protocol::T_BYTE, 106);
  xfer += prot_->writeByte(this->field106);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field107", apache::thrift::protocol::T_SET, 107);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field107);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field108", apache::thrift::protocol::T_FLOAT, 108);
  xfer += prot_->writeFloat(this->field108);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field109", apache::thrift::protocol::T_STRING, 109);
  xfer += prot_->writeBinary(this->field109);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field110", apache::thrift::protocol::T_LIST, 110);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field110);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field111", apache::thrift::protocol::T_SET, 111);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::set<std::map<float, int16_t>>>::write(*prot_, this->field111);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field112", apache::thrift::protocol::T_LIST, 112);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field112);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field113", apache::thrift::protocol::T_LIST, 113);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field113);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field114", apache::thrift::protocol::T_STRUCT, 114);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::write(prot_, &this->field114);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field115", apache::thrift::protocol::T_BOOL, 115);
  xfer += prot_->writeBool(this->field115);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field116", apache::thrift::protocol::T_I16, 116);
  xfer += prot_->writeI16(this->field116);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field117", apache::thrift::protocol::T_MAP, 117);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, float>>::write(*prot_, this->field117);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field118", apache::thrift::protocol::T_SET, 118);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field118);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field119", apache::thrift::protocol::T_SET, 119);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field119);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field120", apache::thrift::protocol::T_SET, 120);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field120);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field121", apache::thrift::protocol::T_MAP, 121);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct0, int32_t>>::write(*prot_, this->field121);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field122", apache::thrift::protocol::T_SET, 122);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field122);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field123", apache::thrift::protocol::T_STRUCT, 123);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::write(prot_, &this->field123);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field124", apache::thrift::protocol::T_FLOAT, 124);
  xfer += prot_->writeFloat(this->field124);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field125", apache::thrift::protocol::T_STRING, 125);
  xfer += prot_->writeString(this->field125);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field126", apache::thrift::protocol::T_BOOL, 126);
  xfer += prot_->writeBool(this->field126);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field127", apache::thrift::protocol::T_LIST, 127);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>>, std::vector<std::map<std::string, bool>>>::write(*prot_, this->field127);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field128", apache::thrift::protocol::T_LIST, 128);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field128);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field129", apache::thrift::protocol::T_LIST, 129);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field129);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field130", apache::thrift::protocol::T_BYTE, 130);
  xfer += prot_->writeByte(this->field130);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field131", apache::thrift::protocol::T_STRING, 131);
  xfer += prot_->writeString(this->field131);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field132", apache::thrift::protocol::T_MAP, 132);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::floating_point>, std::map< ::cpp2::Struct2, float>>::write(*prot_, this->field132);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field133", apache::thrift::protocol::T_LIST, 133);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field133);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field134", apache::thrift::protocol::T_I64, 134);
  xfer += prot_->writeI64(this->field134);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field135", apache::thrift::protocol::T_STRING, 135);
  xfer += prot_->writeString(this->field135);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field136", apache::thrift::protocol::T_FLOAT, 136);
  xfer += prot_->writeFloat(this->field136);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field137", apache::thrift::protocol::T_SET, 137);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field137);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field138", apache::thrift::protocol::T_MAP, 138);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int32_t>>::write(*prot_, this->field138);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field139", apache::thrift::protocol::T_DOUBLE, 139);
  xfer += prot_->writeDouble(this->field139);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field140", apache::thrift::protocol::T_STRING, 140);
  xfer += prot_->writeString(this->field140);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field141", apache::thrift::protocol::T_STRING, 141);
  xfer += prot_->writeBinary(this->field141);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field142", apache::thrift::protocol::T_BYTE, 142);
  xfer += prot_->writeByte(this->field142);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field143", apache::thrift::protocol::T_SET, 143);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field143);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field144", apache::thrift::protocol::T_MAP, 144);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int64_t>>::write(*prot_, this->field144);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field145", apache::thrift::protocol::T_I32, 145);
  xfer += prot_->writeI32(this->field145);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field146", apache::thrift::protocol::T_I16, 146);
  xfer += prot_->writeI16(this->field146);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field147", apache::thrift::protocol::T_SET, 147);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int32_t>>>::write(*prot_, this->field147);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field148", apache::thrift::protocol::T_MAP, 148);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<float, std::vector<int32_t>>>::write(*prot_, this->field148);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field149", apache::thrift::protocol::T_STRUCT, 149);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::write(prot_, &this->field149);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field150", apache::thrift::protocol::T_BYTE, 150);
  xfer += prot_->writeByte(this->field150);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field151", apache::thrift::protocol::T_BOOL, 151);
  xfer += prot_->writeBool(this->field151);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field152", apache::thrift::protocol::T_MAP, 152);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int32_t>>::write(*prot_, this->field152);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field153", apache::thrift::protocol::T_BYTE, 153);
  xfer += prot_->writeByte(this->field153);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field154", apache::thrift::protocol::T_STRING, 154);
  xfer += prot_->writeString(this->field154);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field155", apache::thrift::protocol::T_STRING, 155);
  xfer += prot_->writeString(this->field155);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field156", apache::thrift::protocol::T_STRUCT, 156);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field156);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field157", apache::thrift::protocol::T_LIST, 157);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field157);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field158", apache::thrift::protocol::T_STRUCT, 158);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::write(prot_, &this->field158);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field159", apache::thrift::protocol::T_BOOL, 159);
  xfer += prot_->writeBool(this->field159);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field160", apache::thrift::protocol::T_LIST, 160);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field160);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field161", apache::thrift::protocol::T_LIST, 161);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->field161);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field162", apache::thrift::protocol::T_I64, 162);
  xfer += prot_->writeI64(this->field162);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field163", apache::thrift::protocol::T_STRING, 163);
  xfer += prot_->writeBinary(this->field163);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field164", apache::thrift::protocol::T_STRING, 164);
  xfer += prot_->writeBinary(this->field164);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field165", apache::thrift::protocol::T_I64, 165);
  xfer += prot_->writeI64(this->field165);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field166", apache::thrift::protocol::T_LIST, 166);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field166);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field167", apache::thrift::protocol::T_STRUCT, 167);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::write(prot_, &this->field167);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field168", apache::thrift::protocol::T_MAP, 168);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct3, int64_t>>::write(*prot_, this->field168);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field169", apache::thrift::protocol::T_MAP, 169);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::write(*prot_, this->field169);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field170", apache::thrift::protocol::T_LIST, 170);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field170);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field171", apache::thrift::protocol::T_SET, 171);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field171);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field172", apache::thrift::protocol::T_LIST, 172);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field172);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field173", apache::thrift::protocol::T_I32, 173);
  xfer += prot_->writeI32(this->field173);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field174", apache::thrift::protocol::T_SET, 174);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field174);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field175", apache::thrift::protocol::T_MAP, 175);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::write(*prot_, this->field175);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field176", apache::thrift::protocol::T_LIST, 176);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field176);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field177", apache::thrift::protocol::T_STRUCT, 177);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::write(prot_, &this->field177);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field178", apache::thrift::protocol::T_STRUCT, 178);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::write(prot_, &this->field178);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field179", apache::thrift::protocol::T_SET, 179);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field179);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field180", apache::thrift::protocol::T_LIST, 180);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field180);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field181", apache::thrift::protocol::T_BYTE, 181);
  xfer += prot_->writeByte(this->field181);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field182", apache::thrift::protocol::T_STRUCT, 182);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::write(prot_, &this->field182);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field183", apache::thrift::protocol::T_BYTE, 183);
  xfer += prot_->writeByte(this->field183);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field184", apache::thrift::protocol::T_STRING, 184);
  xfer += prot_->writeBinary(this->field184);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field185", apache::thrift::protocol::T_DOUBLE, 185);
  xfer += prot_->writeDouble(this->field185);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field186", apache::thrift::protocol::T_SET, 186);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field186);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field187", apache::thrift::protocol::T_I32, 187);
  xfer += prot_->writeI32(this->field187);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field188", apache::thrift::protocol::T_STRUCT, 188);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field188);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field189", apache::thrift::protocol::T_I16, 189);
  xfer += prot_->writeI16(this->field189);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field190", apache::thrift::protocol::T_FLOAT, 190);
  xfer += prot_->writeFloat(this->field190);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field191", apache::thrift::protocol::T_STRUCT, 191);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field191);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field192", apache::thrift::protocol::T_MAP, 192);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<int16_t>, int8_t>>::write(*prot_, this->field192);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field193", apache::thrift::protocol::T_STRING, 193);
  xfer += prot_->writeString(this->field193);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field194", apache::thrift::protocol::T_STRING, 194);
  xfer += prot_->writeString(this->field194);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field195", apache::thrift::protocol::T_STRUCT, 195);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field195);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field196", apache::thrift::protocol::T_MAP, 196);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<bool,  ::cpp2::Struct3>>::write(*prot_, this->field196);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field197", apache::thrift::protocol::T_BOOL, 197);
  xfer += prot_->writeBool(this->field197);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace cpp2 {

template <class Protocol_>
uint32_t Struct15::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::read(iprot, &this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field2 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field6 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field9 = std::vector<std::map<std::set<int8_t>, int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>>, std::vector<std::map<std::set<int8_t>, int32_t>>>::read(*iprot, this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field11 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field14 = std::set<std::vector<int16_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int16_t>>>::read(*iprot, this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field15 = std::map<int64_t, std::map<std::set<std::string>, float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::string>, ::apache::thrift::type_class::floating_point>>, std::map<int64_t, std::map<std::set<std::string>, float>>>::read(*iprot, this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field16 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field17 = std::map<bool, std::map<int64_t, float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::map<bool, std::map<int64_t, float>>>::read(*iprot, this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field18 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field20 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field26 = std::vector<std::map<std::set<int32_t>, std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>>, std::vector<std::map<std::set<int32_t>, std::string>>>::read(*iprot, this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field27 = std::set<std::map<int8_t, int64_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int8_t, int64_t>>>::read(*iprot, this->field27);
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field28);
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field29);
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 30:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field30);
          this->__isset.field30 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 31:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field31);
          this->__isset.field31 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 32:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field32);
          this->__isset.field32 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 33:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field33);
          this->__isset.field33 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 34:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field34 = std::map<std::string, std::vector<int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<std::string, std::vector<int32_t>>>::read(*iprot, this->field34);
          this->__isset.field34 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 35:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field35);
          this->__isset.field35 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 36:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field36);
          this->__isset.field36 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 37:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field37 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field37);
          this->__isset.field37 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 38:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field38);
          this->__isset.field38 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 39:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field39);
          this->__isset.field39 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 40:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field40);
          this->__isset.field40 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 41:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field41);
          this->__isset.field41 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 42:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::read(iprot, &this->field42);
          this->__isset.field42 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 43:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field43);
          this->__isset.field43 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 44:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field44);
          this->__isset.field44 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 45:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field45 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field45);
          this->__isset.field45 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 46:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field46 = std::vector< ::cpp2::Struct0>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct0>>::read(*iprot, this->field46);
          this->__isset.field46 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 47:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field47);
          this->__isset.field47 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 48:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field48);
          this->__isset.field48 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 49:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field49);
          this->__isset.field49 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 50:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field50 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field50);
          this->__isset.field50 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 51:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field51 = std::set<std::set<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::set<std::set<std::string>>>::read(*iprot, this->field51);
          this->__isset.field51 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 52:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field52);
          this->__isset.field52 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 53:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field53);
          this->__isset.field53 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 54:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::read(iprot, &this->field54);
          this->__isset.field54 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 55:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field55);
          this->__isset.field55 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 56:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field56);
          this->__isset.field56 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 57:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field57 = std::map<int32_t, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int32_t, float>>::read(*iprot, this->field57);
          this->__isset.field57 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 58:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field58);
          this->__isset.field58 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 59:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field59 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field59);
          this->__isset.field59 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 60:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::read(iprot, &this->field60);
          this->__isset.field60 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 61:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field61);
          this->__isset.field61 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 62:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field62);
          this->__isset.field62 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 63:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field63 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field63);
          this->__isset.field63 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 64:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field64 = std::map<std::map<int8_t, int32_t>, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::map<int8_t, int32_t>, int16_t>>::read(*iprot, this->field64);
          this->__isset.field64 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 65:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::read(iprot, &this->field65);
          this->__isset.field65 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 66:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::read(iprot, &this->field66);
          this->__isset.field66 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 67:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field67);
          this->__isset.field67 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 68:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field68);
          this->__isset.field68 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 69:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field69);
          this->__isset.field69 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct15::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct15");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSize(prot_, &this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRING, 5);
  xfer += prot_->serializedSizeBinary(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_I16, 7);
  xfer += prot_->serializedSizeI16(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_BOOL, 8);
  xfer += prot_->serializedSizeBool(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>>, std::vector<std::map<std::set<int8_t>, int32_t>>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_I32, 10);
  xfer += prot_->serializedSizeI32(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_BOOL, 12);
  xfer += prot_->serializedSizeBool(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_FLOAT, 13);
  xfer += prot_->serializedSizeFloat(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_SET, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int16_t>>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_MAP, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::string>, ::apache::thrift::type_class::floating_point>>, std::map<int64_t, std::map<std::set<std::string>, float>>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_SET, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::map<bool, std::map<int64_t, float>>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_SET, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_STRUCT, 19);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_SET, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_STRING, 21);
  xfer += prot_->serializedSizeString(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_STRING, 22);
  xfer += prot_->serializedSizeString(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_I64, 23);
  xfer += prot_->serializedSizeI64(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_STRING, 24);
  xfer += prot_->serializedSizeBinary(this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_I16, 25);
  xfer += prot_->serializedSizeI16(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_LIST, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>>, std::vector<std::map<std::set<int32_t>, std::string>>>::serializedSize<false>(*prot_, this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_SET, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int8_t, int64_t>>>::serializedSize<false>(*prot_, this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_DOUBLE, 28);
  xfer += prot_->serializedSizeDouble(this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_STRUCT, 29);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_STRUCT, 30);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_I32, 31);
  xfer += prot_->serializedSizeI32(this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_FLOAT, 32);
  xfer += prot_->serializedSizeFloat(this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_I16, 33);
  xfer += prot_->serializedSizeI16(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_MAP, 34);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<std::string, std::vector<int32_t>>>::serializedSize<false>(*prot_, this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_I64, 35);
  xfer += prot_->serializedSizeI64(this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_BOOL, 36);
  xfer += prot_->serializedSizeBool(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_LIST, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_DOUBLE, 38);
  xfer += prot_->serializedSizeDouble(this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_FLOAT, 39);
  xfer += prot_->serializedSizeFloat(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_STRING, 40);
  xfer += prot_->serializedSizeString(this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_DOUBLE, 41);
  xfer += prot_->serializedSizeDouble(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_STRUCT, 42);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSize(prot_, &this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_STRING, 43);
  xfer += prot_->serializedSizeString(this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_BYTE, 44);
  xfer += prot_->serializedSizeByte(this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_SET, 45);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_LIST, 46);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct0>>::serializedSize<false>(*prot_, this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_BYTE, 47);
  xfer += prot_->serializedSizeByte(this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_I16, 48);
  xfer += prot_->serializedSizeI16(this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_BYTE, 49);
  xfer += prot_->serializedSizeByte(this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_LIST, 50);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_SET, 51);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::set<std::set<std::string>>>::serializedSize<false>(*prot_, this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_BOOL, 52);
  xfer += prot_->serializedSizeBool(this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_STRING, 53);
  xfer += prot_->serializedSizeBinary(this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_STRUCT, 54);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSize(prot_, &this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_STRING, 55);
  xfer += prot_->serializedSizeBinary(this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_DOUBLE, 56);
  xfer += prot_->serializedSizeDouble(this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_MAP, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int32_t, float>>::serializedSize<false>(*prot_, this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_I16, 58);
  xfer += prot_->serializedSizeI16(this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_LIST, 59);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_STRUCT, 60);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSize(prot_, &this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_I16, 61);
  xfer += prot_->serializedSizeI16(this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_I32, 62);
  xfer += prot_->serializedSizeI32(this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_LIST, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_MAP, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::map<int8_t, int32_t>, int16_t>>::serializedSize<false>(*prot_, this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_STRUCT, 65);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSize(prot_, &this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_STRUCT, 66);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSize(prot_, &this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_STRING, 67);
  xfer += prot_->serializedSizeString(this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_BOOL, 68);
  xfer += prot_->serializedSizeBool(this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_BOOL, 69);
  xfer += prot_->serializedSizeBool(this->field69);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct15::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct15");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSizeZC(prot_, &this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRING, 5);
  xfer += prot_->serializedSizeZCBinary(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_I16, 7);
  xfer += prot_->serializedSizeI16(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_BOOL, 8);
  xfer += prot_->serializedSizeBool(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>>, std::vector<std::map<std::set<int8_t>, int32_t>>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_I32, 10);
  xfer += prot_->serializedSizeI32(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_BOOL, 12);
  xfer += prot_->serializedSizeBool(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_FLOAT, 13);
  xfer += prot_->serializedSizeFloat(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_SET, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int16_t>>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_MAP, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::string>, ::apache::thrift::type_class::floating_point>>, std::map<int64_t, std::map<std::set<std::string>, float>>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_SET, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::map<bool, std::map<int64_t, float>>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_SET, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_STRUCT, 19);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_SET, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_STRING, 21);
  xfer += prot_->serializedSizeString(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_STRING, 22);
  xfer += prot_->serializedSizeString(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_I64, 23);
  xfer += prot_->serializedSizeI64(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_STRING, 24);
  xfer += prot_->serializedSizeZCBinary(this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_I16, 25);
  xfer += prot_->serializedSizeI16(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_LIST, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>>, std::vector<std::map<std::set<int32_t>, std::string>>>::serializedSize<false>(*prot_, this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_SET, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int8_t, int64_t>>>::serializedSize<false>(*prot_, this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_DOUBLE, 28);
  xfer += prot_->serializedSizeDouble(this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_STRUCT, 29);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_STRUCT, 30);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_I32, 31);
  xfer += prot_->serializedSizeI32(this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_FLOAT, 32);
  xfer += prot_->serializedSizeFloat(this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_I16, 33);
  xfer += prot_->serializedSizeI16(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_MAP, 34);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<std::string, std::vector<int32_t>>>::serializedSize<false>(*prot_, this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_I64, 35);
  xfer += prot_->serializedSizeI64(this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_BOOL, 36);
  xfer += prot_->serializedSizeBool(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_LIST, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_DOUBLE, 38);
  xfer += prot_->serializedSizeDouble(this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_FLOAT, 39);
  xfer += prot_->serializedSizeFloat(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_STRING, 40);
  xfer += prot_->serializedSizeString(this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_DOUBLE, 41);
  xfer += prot_->serializedSizeDouble(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_STRUCT, 42);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSizeZC(prot_, &this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_STRING, 43);
  xfer += prot_->serializedSizeString(this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_BYTE, 44);
  xfer += prot_->serializedSizeByte(this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_SET, 45);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_LIST, 46);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct0>>::serializedSize<false>(*prot_, this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_BYTE, 47);
  xfer += prot_->serializedSizeByte(this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_I16, 48);
  xfer += prot_->serializedSizeI16(this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_BYTE, 49);
  xfer += prot_->serializedSizeByte(this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_LIST, 50);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_SET, 51);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::set<std::set<std::string>>>::serializedSize<false>(*prot_, this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_BOOL, 52);
  xfer += prot_->serializedSizeBool(this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_STRING, 53);
  xfer += prot_->serializedSizeZCBinary(this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_STRUCT, 54);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSizeZC(prot_, &this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_STRING, 55);
  xfer += prot_->serializedSizeZCBinary(this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_DOUBLE, 56);
  xfer += prot_->serializedSizeDouble(this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_MAP, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int32_t, float>>::serializedSize<false>(*prot_, this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_I16, 58);
  xfer += prot_->serializedSizeI16(this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_LIST, 59);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_STRUCT, 60);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSizeZC(prot_, &this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_I16, 61);
  xfer += prot_->serializedSizeI16(this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_I32, 62);
  xfer += prot_->serializedSizeI32(this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_LIST, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_MAP, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::map<int8_t, int32_t>, int16_t>>::serializedSize<false>(*prot_, this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_STRUCT, 65);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSizeZC(prot_, &this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_STRUCT, 66);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSizeZC(prot_, &this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_STRING, 67);
  xfer += prot_->serializedSizeString(this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_BOOL, 68);
  xfer += prot_->serializedSizeBool(this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_BOOL, 69);
  xfer += prot_->serializedSizeBool(this->field69);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct15::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct15");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::write(prot_, &this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->writeI32(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->writeI32(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_STRING, 5);
  xfer += prot_->writeBinary(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_I16, 7);
  xfer += prot_->writeI16(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_BOOL, 8);
  xfer += prot_->writeBool(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_LIST, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>>, std::vector<std::map<std::set<int8_t>, int32_t>>>::write(*prot_, this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_I32, 10);
  xfer += prot_->writeI32(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_LIST, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_BOOL, 12);
  xfer += prot_->writeBool(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_FLOAT, 13);
  xfer += prot_->writeFloat(this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_SET, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int16_t>>>::write(*prot_, this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_MAP, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::string>, ::apache::thrift::type_class::floating_point>>, std::map<int64_t, std::map<std::set<std::string>, float>>>::write(*prot_, this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_SET, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::map<bool, std::map<int64_t, float>>>::write(*prot_, this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_SET, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_STRUCT, 19);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_SET, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_STRING, 21);
  xfer += prot_->writeString(this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_STRING, 22);
  xfer += prot_->writeString(this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_I64, 23);
  xfer += prot_->writeI64(this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_STRING, 24);
  xfer += prot_->writeBinary(this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_I16, 25);
  xfer += prot_->writeI16(this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_LIST, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>>, std::vector<std::map<std::set<int32_t>, std::string>>>::write(*prot_, this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_SET, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int8_t, int64_t>>>::write(*prot_, this->field27);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_DOUBLE, 28);
  xfer += prot_->writeDouble(this->field28);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field29", apache::thrift::protocol::T_STRUCT, 29);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field29);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field30", apache::thrift::protocol::T_STRUCT, 30);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field30);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field31", apache::thrift::protocol::T_I32, 31);
  xfer += prot_->writeI32(this->field31);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field32", apache::thrift::protocol::T_FLOAT, 32);
  xfer += prot_->writeFloat(this->field32);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field33", apache::thrift::protocol::T_I16, 33);
  xfer += prot_->writeI16(this->field33);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field34", apache::thrift::protocol::T_MAP, 34);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<std::string, std::vector<int32_t>>>::write(*prot_, this->field34);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field35", apache::thrift::protocol::T_I64, 35);
  xfer += prot_->writeI64(this->field35);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field36", apache::thrift::protocol::T_BOOL, 36);
  xfer += prot_->writeBool(this->field36);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field37", apache::thrift::protocol::T_LIST, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field37);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field38", apache::thrift::protocol::T_DOUBLE, 38);
  xfer += prot_->writeDouble(this->field38);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field39", apache::thrift::protocol::T_FLOAT, 39);
  xfer += prot_->writeFloat(this->field39);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field40", apache::thrift::protocol::T_STRING, 40);
  xfer += prot_->writeString(this->field40);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field41", apache::thrift::protocol::T_DOUBLE, 41);
  xfer += prot_->writeDouble(this->field41);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field42", apache::thrift::protocol::T_STRUCT, 42);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::write(prot_, &this->field42);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field43", apache::thrift::protocol::T_STRING, 43);
  xfer += prot_->writeString(this->field43);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field44", apache::thrift::protocol::T_BYTE, 44);
  xfer += prot_->writeByte(this->field44);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field45", apache::thrift::protocol::T_SET, 45);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field45);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field46", apache::thrift::protocol::T_LIST, 46);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct0>>::write(*prot_, this->field46);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field47", apache::thrift::protocol::T_BYTE, 47);
  xfer += prot_->writeByte(this->field47);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field48", apache::thrift::protocol::T_I16, 48);
  xfer += prot_->writeI16(this->field48);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field49", apache::thrift::protocol::T_BYTE, 49);
  xfer += prot_->writeByte(this->field49);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field50", apache::thrift::protocol::T_LIST, 50);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field50);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field51", apache::thrift::protocol::T_SET, 51);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::set<std::set<std::string>>>::write(*prot_, this->field51);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field52", apache::thrift::protocol::T_BOOL, 52);
  xfer += prot_->writeBool(this->field52);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field53", apache::thrift::protocol::T_STRING, 53);
  xfer += prot_->writeBinary(this->field53);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field54", apache::thrift::protocol::T_STRUCT, 54);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::write(prot_, &this->field54);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field55", apache::thrift::protocol::T_STRING, 55);
  xfer += prot_->writeBinary(this->field55);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field56", apache::thrift::protocol::T_DOUBLE, 56);
  xfer += prot_->writeDouble(this->field56);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field57", apache::thrift::protocol::T_MAP, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int32_t, float>>::write(*prot_, this->field57);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field58", apache::thrift::protocol::T_I16, 58);
  xfer += prot_->writeI16(this->field58);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field59", apache::thrift::protocol::T_LIST, 59);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field59);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field60", apache::thrift::protocol::T_STRUCT, 60);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::write(prot_, &this->field60);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field61", apache::thrift::protocol::T_I16, 61);
  xfer += prot_->writeI16(this->field61);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field62", apache::thrift::protocol::T_I32, 62);
  xfer += prot_->writeI32(this->field62);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field63", apache::thrift::protocol::T_LIST, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field63);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field64", apache::thrift::protocol::T_MAP, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::map<int8_t, int32_t>, int16_t>>::write(*prot_, this->field64);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field65", apache::thrift::protocol::T_STRUCT, 65);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::write(prot_, &this->field65);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field66", apache::thrift::protocol::T_STRUCT, 66);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::write(prot_, &this->field66);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field67", apache::thrift::protocol::T_STRING, 67);
  xfer += prot_->writeString(this->field67);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field68", apache::thrift::protocol::T_BOOL, 68);
  xfer += prot_->writeBool(this->field68);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field69", apache::thrift::protocol::T_BOOL, 69);
  xfer += prot_->writeBool(this->field69);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace cpp2 {

template <class Protocol_>
uint32_t Struct16::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::read(iprot, &this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field2 = std::map<std::vector<int32_t>, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<int32_t>, bool>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::read(iprot, &this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field4 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field6 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field9 = std::set<std::map<int32_t, int64_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int32_t, int64_t>>>::read(*iprot, this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field15 = std::map<std::set<bool>, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::floating_point>, std::map<std::set<bool>, float>>::read(*iprot, this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field19 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field21 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::read(iprot, &this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::read(iprot, &this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field26 = std::set<std::set<bool>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<bool>>>::read(*iprot, this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field27);
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct16::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct16");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::serializedSize(prot_, &this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<int32_t>, bool>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSize(prot_, &this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->serializedSizeI16(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->serializedSizeByte(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_I16, 8);
  xfer += prot_->serializedSizeI16(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_SET, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int32_t, int64_t>>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_BYTE, 10);
  xfer += prot_->serializedSizeByte(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_STRING, 11);
  xfer += prot_->serializedSizeString(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_I64, 12);
  xfer += prot_->serializedSizeI64(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_I32, 13);
  xfer += prot_->serializedSizeI32(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_STRING, 14);
  xfer += prot_->serializedSizeString(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_MAP, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::floating_point>, std::map<std::set<bool>, float>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_BYTE, 16);
  xfer += prot_->serializedSizeByte(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_FLOAT, 17);
  xfer += prot_->serializedSizeFloat(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_I32, 18);
  xfer += prot_->serializedSizeI32(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_LIST, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_I16, 20);
  xfer += prot_->serializedSizeI16(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_LIST, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_STRUCT, 22);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSize(prot_, &this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_I16, 23);
  xfer += prot_->serializedSizeI16(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_BOOL, 24);
  xfer += prot_->serializedSizeBool(this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_STRUCT, 25);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSize(prot_, &this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_SET, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<bool>>>::serializedSize<false>(*prot_, this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_I32, 27);
  xfer += prot_->serializedSizeI32(this->field27);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct16::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct16");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::serializedSizeZC(prot_, &this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<int32_t>, bool>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSizeZC(prot_, &this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->serializedSizeI16(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->serializedSizeByte(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_I16, 8);
  xfer += prot_->serializedSizeI16(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_SET, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int32_t, int64_t>>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_BYTE, 10);
  xfer += prot_->serializedSizeByte(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_STRING, 11);
  xfer += prot_->serializedSizeString(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_I64, 12);
  xfer += prot_->serializedSizeI64(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_I32, 13);
  xfer += prot_->serializedSizeI32(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_STRING, 14);
  xfer += prot_->serializedSizeString(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_MAP, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::floating_point>, std::map<std::set<bool>, float>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_BYTE, 16);
  xfer += prot_->serializedSizeByte(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_FLOAT, 17);
  xfer += prot_->serializedSizeFloat(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_I32, 18);
  xfer += prot_->serializedSizeI32(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_LIST, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_I16, 20);
  xfer += prot_->serializedSizeI16(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_LIST, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_STRUCT, 22);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSizeZC(prot_, &this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_I16, 23);
  xfer += prot_->serializedSizeI16(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_BOOL, 24);
  xfer += prot_->serializedSizeBool(this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_STRUCT, 25);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSizeZC(prot_, &this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_SET, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<bool>>>::serializedSize<false>(*prot_, this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_I32, 27);
  xfer += prot_->serializedSizeI32(this->field27);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct16::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct16");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::write(prot_, &this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::vector<int32_t>, bool>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::write(prot_, &this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_LIST, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->writeI16(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_BYTE, 7);
  xfer += prot_->writeByte(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_I16, 8);
  xfer += prot_->writeI16(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_SET, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int32_t, int64_t>>>::write(*prot_, this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_BYTE, 10);
  xfer += prot_->writeByte(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_STRING, 11);
  xfer += prot_->writeString(this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_I64, 12);
  xfer += prot_->writeI64(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_I32, 13);
  xfer += prot_->writeI32(this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_STRING, 14);
  xfer += prot_->writeString(this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_MAP, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::floating_point>, std::map<std::set<bool>, float>>::write(*prot_, this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_BYTE, 16);
  xfer += prot_->writeByte(this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_FLOAT, 17);
  xfer += prot_->writeFloat(this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_I32, 18);
  xfer += prot_->writeI32(this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_LIST, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_I16, 20);
  xfer += prot_->writeI16(this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_LIST, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_STRUCT, 22);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::write(prot_, &this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_I16, 23);
  xfer += prot_->writeI16(this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_BOOL, 24);
  xfer += prot_->writeBool(this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_STRUCT, 25);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::write(prot_, &this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_SET, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<bool>>>::write(*prot_, this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_I32, 27);
  xfer += prot_->writeI32(this->field27);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace cpp2 {

template <class Protocol_>
uint32_t Struct17::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field2 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field7 = std::map<bool, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int32_t>>::read(*iprot, this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field10 = std::map<bool, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, bool>>::read(*iprot, this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field11 = std::map< ::cpp2::Struct3, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::string>, std::map< ::cpp2::Struct3, std::string>>::read(*iprot, this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field12 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field14 = std::map<int16_t, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int64_t>>::read(*iprot, this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field17 = std::map<std::vector<bool>,  ::cpp2::Struct5>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::structure>, std::map<std::vector<bool>,  ::cpp2::Struct5>>::read(*iprot, this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field18 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field20 = std::map<double, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int8_t>>::read(*iprot, this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field23 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field24 = std::vector<std::vector<int8_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int8_t>>>::read(*iprot, this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field27 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field27);
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field28);
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field29 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field29);
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 30:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field30 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field30);
          this->__isset.field30 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 31:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field31);
          this->__isset.field31 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 32:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field32);
          this->__isset.field32 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 33:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::read(iprot, &this->field33);
          this->__isset.field33 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 34:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field34 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field34);
          this->__isset.field34 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 35:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field35);
          this->__isset.field35 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 36:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field36);
          this->__isset.field36 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 37:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field37);
          this->__isset.field37 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 38:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field38);
          this->__isset.field38 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 39:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field39);
          this->__isset.field39 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 40:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field40 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field40);
          this->__isset.field40 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 41:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field41);
          this->__isset.field41 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 42:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field42 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field42);
          this->__isset.field42 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 43:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field43);
          this->__isset.field43 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 44:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field44);
          this->__isset.field44 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 45:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field45);
          this->__isset.field45 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 46:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field46);
          this->__isset.field46 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 47:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field47);
          this->__isset.field47 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 48:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field48);
          this->__isset.field48 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 49:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field49);
          this->__isset.field49 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 50:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field50);
          this->__isset.field50 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 51:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field51);
          this->__isset.field51 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 52:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field52 = std::set< ::cpp2::Struct10>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct10>>::read(*iprot, this->field52);
          this->__isset.field52 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 53:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field53 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field53);
          this->__isset.field53 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 54:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field54);
          this->__isset.field54 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 55:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field55);
          this->__isset.field55 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 56:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::read(iprot, &this->field56);
          this->__isset.field56 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 57:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field57 = std::set<std::map<float, std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>>, std::set<std::map<float, std::string>>>::read(*iprot, this->field57);
          this->__isset.field57 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 58:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field58 = std::map<bool, std::set<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::map<bool, std::set<std::string>>>::read(*iprot, this->field58);
          this->__isset.field58 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 59:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field59);
          this->__isset.field59 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 60:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field60);
          this->__isset.field60 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 61:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::read(iprot, &this->field61);
          this->__isset.field61 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 62:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field62);
          this->__isset.field62 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 63:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field63);
          this->__isset.field63 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 64:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field64);
          this->__isset.field64 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 65:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field65 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field65);
          this->__isset.field65 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 66:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field66);
          this->__isset.field66 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 67:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field67 = std::map<int16_t, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int16_t, std::string>>::read(*iprot, this->field67);
          this->__isset.field67 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 68:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field68 = std::map<std::map<std::vector<int16_t>, std::string>, std::vector<int8_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<std::map<std::vector<int16_t>, std::string>, std::vector<int8_t>>>::read(*iprot, this->field68);
          this->__isset.field68 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 69:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field69);
          this->__isset.field69 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 70:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field70);
          this->__isset.field70 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 71:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field71);
          this->__isset.field71 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 72:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field72);
          this->__isset.field72 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 73:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field73);
          this->__isset.field73 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 74:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field74);
          this->__isset.field74 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 75:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field75 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field75);
          this->__isset.field75 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 76:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field76);
          this->__isset.field76 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 77:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field77 = std::map<std::string, std::set<float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<std::string, std::set<float>>>::read(*iprot, this->field77);
          this->__isset.field77 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 78:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field78 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field78);
          this->__isset.field78 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 79:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::read(iprot, &this->field79);
          this->__isset.field79 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 80:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field80);
          this->__isset.field80 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 81:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field81 = std::map< ::cpp2::Struct0, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::binary>, std::map< ::cpp2::Struct0, std::string>>::read(*iprot, this->field81);
          this->__isset.field81 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 82:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field82);
          this->__isset.field82 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 83:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::read(iprot, &this->field83);
          this->__isset.field83 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 84:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field84 = std::map<double, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int16_t>>::read(*iprot, this->field84);
          this->__isset.field84 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 85:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field85);
          this->__isset.field85 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 86:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::read(iprot, &this->field86);
          this->__isset.field86 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 87:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field87 = std::set<std::vector<int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int32_t>>>::read(*iprot, this->field87);
          this->__isset.field87 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 88:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field88 = std::vector<std::set<int64_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int64_t>>>::read(*iprot, this->field88);
          this->__isset.field88 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 89:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field89);
          this->__isset.field89 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 90:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field90 = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->field90);
          this->__isset.field90 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 91:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field91 = std::map<int8_t, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, bool>>::read(*iprot, this->field91);
          this->__isset.field91 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 92:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field92);
          this->__isset.field92 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 93:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field93 = std::map<int16_t, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int32_t>>::read(*iprot, this->field93);
          this->__isset.field93 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 94:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field94);
          this->__isset.field94 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 95:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field95);
          this->__isset.field95 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 96:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field96);
          this->__isset.field96 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 97:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field97);
          this->__isset.field97 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 98:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field98);
          this->__isset.field98 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 99:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field99);
          this->__isset.field99 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 100:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field100);
          this->__isset.field100 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 101:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field101 = std::vector< ::cpp2::Struct9>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct9>>::read(*iprot, this->field101);
          this->__isset.field101 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 102:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::read(iprot, &this->field102);
          this->__isset.field102 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 103:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field103);
          this->__isset.field103 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 104:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field104 = std::map<int8_t, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int16_t>>::read(*iprot, this->field104);
          this->__isset.field104 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 105:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field105);
          this->__isset.field105 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 106:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field106);
          this->__isset.field106 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 107:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field107 = std::map<double, std::vector<std::map<float, int8_t>>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>>, std::map<double, std::vector<std::map<float, int8_t>>>>::read(*iprot, this->field107);
          this->__isset.field107 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 108:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field108);
          this->__isset.field108 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 109:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::read(iprot, &this->field109);
          this->__isset.field109 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 110:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field110);
          this->__isset.field110 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 111:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field111);
          this->__isset.field111 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 112:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field112);
          this->__isset.field112 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 113:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field113);
          this->__isset.field113 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 114:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field114);
          this->__isset.field114 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 115:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field115);
          this->__isset.field115 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 116:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field116);
          this->__isset.field116 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 117:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field117 = std::set<std::map<std::map<std::string, std::string>, int64_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::binary>, ::apache::thrift::type_class::integral>>, std::set<std::map<std::map<std::string, std::string>, int64_t>>>::read(*iprot, this->field117);
          this->__isset.field117 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 118:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field118 = std::map<int64_t, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int64_t, std::string>>::read(*iprot, this->field118);
          this->__isset.field118 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 119:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field119);
          this->__isset.field119 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 120:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field120);
          this->__isset.field120 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 121:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field121);
          this->__isset.field121 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 122:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field122);
          this->__isset.field122 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 123:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field123);
          this->__isset.field123 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 124:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field124 = std::set<std::set<double>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<double>>>::read(*iprot, this->field124);
          this->__isset.field124 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 125:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field125);
          this->__isset.field125 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 126:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field126 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field126);
          this->__isset.field126 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 127:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field127);
          this->__isset.field127 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 128:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field128 = std::map<int32_t, double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int32_t, double>>::read(*iprot, this->field128);
          this->__isset.field128 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct17::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct17");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_BYTE, 1);
  xfer += prot_->serializedSizeByte(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeBinary(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I64, 4);
  xfer += prot_->serializedSizeI64(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->serializedSizeI16(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_BOOL, 6);
  xfer += prot_->serializedSizeBool(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int32_t>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_BYTE, 8);
  xfer += prot_->serializedSizeByte(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, bool>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_MAP, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::string>, std::map< ::cpp2::Struct3, std::string>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_SET, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_DOUBLE, 13);
  xfer += prot_->serializedSizeDouble(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_MAP, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int64_t>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_STRING, 15);
  xfer += prot_->serializedSizeString(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_BOOL, 16);
  xfer += prot_->serializedSizeBool(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::structure>, std::map<std::vector<bool>,  ::cpp2::Struct5>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_SET, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_DOUBLE, 19);
  xfer += prot_->serializedSizeDouble(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_MAP, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int8_t>>::serializedSize<false>(*prot_, this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_I32, 21);
  xfer += prot_->serializedSizeI32(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_STRING, 22);
  xfer += prot_->serializedSizeString(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_LIST, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_LIST, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int8_t>>>::serializedSize<false>(*prot_, this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_I32, 25);
  xfer += prot_->serializedSizeI32(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_BOOL, 26);
  xfer += prot_->serializedSizeBool(this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_SET, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_I64, 28);
  xfer += prot_->serializedSizeI64(this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_LIST, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_LIST, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_FLOAT, 31);
  xfer += prot_->serializedSizeFloat(this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_I16, 32);
  xfer += prot_->serializedSizeI16(this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_STRUCT, 33);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::serializedSize(prot_, &this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_SET, 34);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_STRUCT, 35);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_I64, 36);
  xfer += prot_->serializedSizeI64(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_DOUBLE, 37);
  xfer += prot_->serializedSizeDouble(this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_FLOAT, 38);
  xfer += prot_->serializedSizeFloat(this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_I64, 39);
  xfer += prot_->serializedSizeI64(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_LIST, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_STRING, 41);
  xfer += prot_->serializedSizeString(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_SET, 42);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_I16, 43);
  xfer += prot_->serializedSizeI16(this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_STRUCT, 44);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_I16, 45);
  xfer += prot_->serializedSizeI16(this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_I16, 46);
  xfer += prot_->serializedSizeI16(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_STRING, 47);
  xfer += prot_->serializedSizeString(this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_FLOAT, 48);
  xfer += prot_->serializedSizeFloat(this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_I64, 49);
  xfer += prot_->serializedSizeI64(this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_I64, 50);
  xfer += prot_->serializedSizeI64(this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_DOUBLE, 51);
  xfer += prot_->serializedSizeDouble(this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_SET, 52);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct10>>::serializedSize<false>(*prot_, this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_SET, 53);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_BOOL, 54);
  xfer += prot_->serializedSizeBool(this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_I64, 55);
  xfer += prot_->serializedSizeI64(this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_STRUCT, 56);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::serializedSize(prot_, &this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_SET, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>>, std::set<std::map<float, std::string>>>::serializedSize<false>(*prot_, this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_MAP, 58);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::map<bool, std::set<std::string>>>::serializedSize<false>(*prot_, this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_I32, 59);
  xfer += prot_->serializedSizeI32(this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_BOOL, 60);
  xfer += prot_->serializedSizeBool(this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_STRUCT, 61);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::serializedSize(prot_, &this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_I16, 62);
  xfer += prot_->serializedSizeI16(this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_I32, 63);
  xfer += prot_->serializedSizeI32(this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_STRING, 64);
  xfer += prot_->serializedSizeBinary(this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_SET, 65);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_I32, 66);
  xfer += prot_->serializedSizeI32(this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_MAP, 67);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int16_t, std::string>>::serializedSize<false>(*prot_, this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_MAP, 68);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<std::map<std::vector<int16_t>, std::string>, std::vector<int8_t>>>::serializedSize<false>(*prot_, this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_STRING, 69);
  xfer += prot_->serializedSizeString(this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_FLOAT, 70);
  xfer += prot_->serializedSizeFloat(this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_FLOAT, 71);
  xfer += prot_->serializedSizeFloat(this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_I16, 72);
  xfer += prot_->serializedSizeI16(this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_DOUBLE, 73);
  xfer += prot_->serializedSizeDouble(this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_STRING, 74);
  xfer += prot_->serializedSizeString(this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_SET, 75);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_I64, 76);
  xfer += prot_->serializedSizeI64(this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_MAP, 77);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<std::string, std::set<float>>>::serializedSize<false>(*prot_, this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_LIST, 78);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_STRUCT, 79);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSize(prot_, &this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_I64, 80);
  xfer += prot_->serializedSizeI64(this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_MAP, 81);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::binary>, std::map< ::cpp2::Struct0, std::string>>::serializedSize<false>(*prot_, this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_STRUCT, 82);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_STRUCT, 83);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::serializedSize(prot_, &this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_MAP, 84);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int16_t>>::serializedSize<false>(*prot_, this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_I64, 85);
  xfer += prot_->serializedSizeI64(this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_STRUCT, 86);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSize(prot_, &this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_SET, 87);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int32_t>>>::serializedSize<false>(*prot_, this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_LIST, 88);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int64_t>>>::serializedSize<false>(*prot_, this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_DOUBLE, 89);
  xfer += prot_->serializedSizeDouble(this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_LIST, 90);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_MAP, 91);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, bool>>::serializedSize<false>(*prot_, this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_DOUBLE, 92);
  xfer += prot_->serializedSizeDouble(this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_MAP, 93);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int32_t>>::serializedSize<false>(*prot_, this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_STRUCT, 94);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_STRING, 95);
  xfer += prot_->serializedSizeString(this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_BYTE, 96);
  xfer += prot_->serializedSizeByte(this->field96);
  xfer += prot_->serializedFieldSize("field97", apache::thrift::protocol::T_STRUCT, 97);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field97);
  xfer += prot_->serializedFieldSize("field98", apache::thrift::protocol::T_DOUBLE, 98);
  xfer += prot_->serializedSizeDouble(this->field98);
  xfer += prot_->serializedFieldSize("field99", apache::thrift::protocol::T_I64, 99);
  xfer += prot_->serializedSizeI64(this->field99);
  xfer += prot_->serializedFieldSize("field100", apache::thrift::protocol::T_STRUCT, 100);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field100);
  xfer += prot_->serializedFieldSize("field101", apache::thrift::protocol::T_LIST, 101);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct9>>::serializedSize<false>(*prot_, this->field101);
  xfer += prot_->serializedFieldSize("field102", apache::thrift::protocol::T_STRUCT, 102);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSize(prot_, &this->field102);
  xfer += prot_->serializedFieldSize("field103", apache::thrift::protocol::T_BYTE, 103);
  xfer += prot_->serializedSizeByte(this->field103);
  xfer += prot_->serializedFieldSize("field104", apache::thrift::protocol::T_MAP, 104);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int16_t>>::serializedSize<false>(*prot_, this->field104);
  xfer += prot_->serializedFieldSize("field105", apache::thrift::protocol::T_I32, 105);
  xfer += prot_->serializedSizeI32(this->field105);
  xfer += prot_->serializedFieldSize("field106", apache::thrift::protocol::T_BYTE, 106);
  xfer += prot_->serializedSizeByte(this->field106);
  xfer += prot_->serializedFieldSize("field107", apache::thrift::protocol::T_MAP, 107);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>>, std::map<double, std::vector<std::map<float, int8_t>>>>::serializedSize<false>(*prot_, this->field107);
  xfer += prot_->serializedFieldSize("field108", apache::thrift::protocol::T_DOUBLE, 108);
  xfer += prot_->serializedSizeDouble(this->field108);
  xfer += prot_->serializedFieldSize("field109", apache::thrift::protocol::T_STRUCT, 109);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSize(prot_, &this->field109);
  xfer += prot_->serializedFieldSize("field110", apache::thrift::protocol::T_DOUBLE, 110);
  xfer += prot_->serializedSizeDouble(this->field110);
  xfer += prot_->serializedFieldSize("field111", apache::thrift::protocol::T_I16, 111);
  xfer += prot_->serializedSizeI16(this->field111);
  xfer += prot_->serializedFieldSize("field112", apache::thrift::protocol::T_I32, 112);
  xfer += prot_->serializedSizeI32(this->field112);
  xfer += prot_->serializedFieldSize("field113", apache::thrift::protocol::T_I32, 113);
  xfer += prot_->serializedSizeI32(this->field113);
  xfer += prot_->serializedFieldSize("field114", apache::thrift::protocol::T_I64, 114);
  xfer += prot_->serializedSizeI64(this->field114);
  xfer += prot_->serializedFieldSize("field115", apache::thrift::protocol::T_BYTE, 115);
  xfer += prot_->serializedSizeByte(this->field115);
  xfer += prot_->serializedFieldSize("field116", apache::thrift::protocol::T_STRING, 116);
  xfer += prot_->serializedSizeBinary(this->field116);
  xfer += prot_->serializedFieldSize("field117", apache::thrift::protocol::T_SET, 117);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::binary>, ::apache::thrift::type_class::integral>>, std::set<std::map<std::map<std::string, std::string>, int64_t>>>::serializedSize<false>(*prot_, this->field117);
  xfer += prot_->serializedFieldSize("field118", apache::thrift::protocol::T_MAP, 118);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int64_t, std::string>>::serializedSize<false>(*prot_, this->field118);
  xfer += prot_->serializedFieldSize("field119", apache::thrift::protocol::T_BOOL, 119);
  xfer += prot_->serializedSizeBool(this->field119);
  xfer += prot_->serializedFieldSize("field120", apache::thrift::protocol::T_STRING, 120);
  xfer += prot_->serializedSizeBinary(this->field120);
  xfer += prot_->serializedFieldSize("field121", apache::thrift::protocol::T_FLOAT, 121);
  xfer += prot_->serializedSizeFloat(this->field121);
  xfer += prot_->serializedFieldSize("field122", apache::thrift::protocol::T_I32, 122);
  xfer += prot_->serializedSizeI32(this->field122);
  xfer += prot_->serializedFieldSize("field123", apache::thrift::protocol::T_I32, 123);
  xfer += prot_->serializedSizeI32(this->field123);
  xfer += prot_->serializedFieldSize("field124", apache::thrift::protocol::T_SET, 124);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<double>>>::serializedSize<false>(*prot_, this->field124);
  xfer += prot_->serializedFieldSize("field125", apache::thrift::protocol::T_BYTE, 125);
  xfer += prot_->serializedSizeByte(this->field125);
  xfer += prot_->serializedFieldSize("field126", apache::thrift::protocol::T_LIST, 126);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field126);
  xfer += prot_->serializedFieldSize("field127", apache::thrift::protocol::T_I16, 127);
  xfer += prot_->serializedSizeI16(this->field127);
  xfer += prot_->serializedFieldSize("field128", apache::thrift::protocol::T_MAP, 128);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int32_t, double>>::serializedSize<false>(*prot_, this->field128);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct17::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct17");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_BYTE, 1);
  xfer += prot_->serializedSizeByte(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeZCBinary(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I64, 4);
  xfer += prot_->serializedSizeI64(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->serializedSizeI16(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_BOOL, 6);
  xfer += prot_->serializedSizeBool(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int32_t>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_BYTE, 8);
  xfer += prot_->serializedSizeByte(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, bool>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_MAP, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::string>, std::map< ::cpp2::Struct3, std::string>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_SET, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_DOUBLE, 13);
  xfer += prot_->serializedSizeDouble(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_MAP, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int64_t>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_STRING, 15);
  xfer += prot_->serializedSizeString(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_BOOL, 16);
  xfer += prot_->serializedSizeBool(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::structure>, std::map<std::vector<bool>,  ::cpp2::Struct5>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_SET, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_DOUBLE, 19);
  xfer += prot_->serializedSizeDouble(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_MAP, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int8_t>>::serializedSize<false>(*prot_, this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_I32, 21);
  xfer += prot_->serializedSizeI32(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_STRING, 22);
  xfer += prot_->serializedSizeString(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_LIST, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_LIST, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int8_t>>>::serializedSize<false>(*prot_, this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_I32, 25);
  xfer += prot_->serializedSizeI32(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_BOOL, 26);
  xfer += prot_->serializedSizeBool(this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_SET, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_I64, 28);
  xfer += prot_->serializedSizeI64(this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_LIST, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_LIST, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_FLOAT, 31);
  xfer += prot_->serializedSizeFloat(this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_I16, 32);
  xfer += prot_->serializedSizeI16(this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_STRUCT, 33);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::serializedSizeZC(prot_, &this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_SET, 34);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_STRUCT, 35);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_I64, 36);
  xfer += prot_->serializedSizeI64(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_DOUBLE, 37);
  xfer += prot_->serializedSizeDouble(this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_FLOAT, 38);
  xfer += prot_->serializedSizeFloat(this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_I64, 39);
  xfer += prot_->serializedSizeI64(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_LIST, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_STRING, 41);
  xfer += prot_->serializedSizeString(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_SET, 42);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_I16, 43);
  xfer += prot_->serializedSizeI16(this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_STRUCT, 44);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_I16, 45);
  xfer += prot_->serializedSizeI16(this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_I16, 46);
  xfer += prot_->serializedSizeI16(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_STRING, 47);
  xfer += prot_->serializedSizeString(this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_FLOAT, 48);
  xfer += prot_->serializedSizeFloat(this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_I64, 49);
  xfer += prot_->serializedSizeI64(this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_I64, 50);
  xfer += prot_->serializedSizeI64(this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_DOUBLE, 51);
  xfer += prot_->serializedSizeDouble(this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_SET, 52);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct10>>::serializedSize<false>(*prot_, this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_SET, 53);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_BOOL, 54);
  xfer += prot_->serializedSizeBool(this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_I64, 55);
  xfer += prot_->serializedSizeI64(this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_STRUCT, 56);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::serializedSizeZC(prot_, &this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_SET, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>>, std::set<std::map<float, std::string>>>::serializedSize<false>(*prot_, this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_MAP, 58);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::map<bool, std::set<std::string>>>::serializedSize<false>(*prot_, this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_I32, 59);
  xfer += prot_->serializedSizeI32(this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_BOOL, 60);
  xfer += prot_->serializedSizeBool(this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_STRUCT, 61);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::serializedSizeZC(prot_, &this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_I16, 62);
  xfer += prot_->serializedSizeI16(this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_I32, 63);
  xfer += prot_->serializedSizeI32(this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_STRING, 64);
  xfer += prot_->serializedSizeZCBinary(this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_SET, 65);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_I32, 66);
  xfer += prot_->serializedSizeI32(this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_MAP, 67);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int16_t, std::string>>::serializedSize<false>(*prot_, this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_MAP, 68);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<std::map<std::vector<int16_t>, std::string>, std::vector<int8_t>>>::serializedSize<false>(*prot_, this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_STRING, 69);
  xfer += prot_->serializedSizeString(this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_FLOAT, 70);
  xfer += prot_->serializedSizeFloat(this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_FLOAT, 71);
  xfer += prot_->serializedSizeFloat(this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_I16, 72);
  xfer += prot_->serializedSizeI16(this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_DOUBLE, 73);
  xfer += prot_->serializedSizeDouble(this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_STRING, 74);
  xfer += prot_->serializedSizeString(this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_SET, 75);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_I64, 76);
  xfer += prot_->serializedSizeI64(this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_MAP, 77);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<std::string, std::set<float>>>::serializedSize<false>(*prot_, this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_LIST, 78);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_STRUCT, 79);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSizeZC(prot_, &this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_I64, 80);
  xfer += prot_->serializedSizeI64(this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_MAP, 81);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::binary>, std::map< ::cpp2::Struct0, std::string>>::serializedSize<false>(*prot_, this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_STRUCT, 82);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_STRUCT, 83);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::serializedSizeZC(prot_, &this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_MAP, 84);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int16_t>>::serializedSize<false>(*prot_, this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_I64, 85);
  xfer += prot_->serializedSizeI64(this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_STRUCT, 86);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSizeZC(prot_, &this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_SET, 87);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int32_t>>>::serializedSize<false>(*prot_, this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_LIST, 88);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int64_t>>>::serializedSize<false>(*prot_, this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_DOUBLE, 89);
  xfer += prot_->serializedSizeDouble(this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_LIST, 90);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_MAP, 91);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, bool>>::serializedSize<false>(*prot_, this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_DOUBLE, 92);
  xfer += prot_->serializedSizeDouble(this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_MAP, 93);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int32_t>>::serializedSize<false>(*prot_, this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_STRUCT, 94);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_STRING, 95);
  xfer += prot_->serializedSizeString(this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_BYTE, 96);
  xfer += prot_->serializedSizeByte(this->field96);
  xfer += prot_->serializedFieldSize("field97", apache::thrift::protocol::T_STRUCT, 97);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field97);
  xfer += prot_->serializedFieldSize("field98", apache::thrift::protocol::T_DOUBLE, 98);
  xfer += prot_->serializedSizeDouble(this->field98);
  xfer += prot_->serializedFieldSize("field99", apache::thrift::protocol::T_I64, 99);
  xfer += prot_->serializedSizeI64(this->field99);
  xfer += prot_->serializedFieldSize("field100", apache::thrift::protocol::T_STRUCT, 100);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field100);
  xfer += prot_->serializedFieldSize("field101", apache::thrift::protocol::T_LIST, 101);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct9>>::serializedSize<false>(*prot_, this->field101);
  xfer += prot_->serializedFieldSize("field102", apache::thrift::protocol::T_STRUCT, 102);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSizeZC(prot_, &this->field102);
  xfer += prot_->serializedFieldSize("field103", apache::thrift::protocol::T_BYTE, 103);
  xfer += prot_->serializedSizeByte(this->field103);
  xfer += prot_->serializedFieldSize("field104", apache::thrift::protocol::T_MAP, 104);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int16_t>>::serializedSize<false>(*prot_, this->field104);
  xfer += prot_->serializedFieldSize("field105", apache::thrift::protocol::T_I32, 105);
  xfer += prot_->serializedSizeI32(this->field105);
  xfer += prot_->serializedFieldSize("field106", apache::thrift::protocol::T_BYTE, 106);
  xfer += prot_->serializedSizeByte(this->field106);
  xfer += prot_->serializedFieldSize("field107", apache::thrift::protocol::T_MAP, 107);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>>, std::map<double, std::vector<std::map<float, int8_t>>>>::serializedSize<false>(*prot_, this->field107);
  xfer += prot_->serializedFieldSize("field108", apache::thrift::protocol::T_DOUBLE, 108);
  xfer += prot_->serializedSizeDouble(this->field108);
  xfer += prot_->serializedFieldSize("field109", apache::thrift::protocol::T_STRUCT, 109);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSizeZC(prot_, &this->field109);
  xfer += prot_->serializedFieldSize("field110", apache::thrift::protocol::T_DOUBLE, 110);
  xfer += prot_->serializedSizeDouble(this->field110);
  xfer += prot_->serializedFieldSize("field111", apache::thrift::protocol::T_I16, 111);
  xfer += prot_->serializedSizeI16(this->field111);
  xfer += prot_->serializedFieldSize("field112", apache::thrift::protocol::T_I32, 112);
  xfer += prot_->serializedSizeI32(this->field112);
  xfer += prot_->serializedFieldSize("field113", apache::thrift::protocol::T_I32, 113);
  xfer += prot_->serializedSizeI32(this->field113);
  xfer += prot_->serializedFieldSize("field114", apache::thrift::protocol::T_I64, 114);
  xfer += prot_->serializedSizeI64(this->field114);
  xfer += prot_->serializedFieldSize("field115", apache::thrift::protocol::T_BYTE, 115);
  xfer += prot_->serializedSizeByte(this->field115);
  xfer += prot_->serializedFieldSize("field116", apache::thrift::protocol::T_STRING, 116);
  xfer += prot_->serializedSizeZCBinary(this->field116);
  xfer += prot_->serializedFieldSize("field117", apache::thrift::protocol::T_SET, 117);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::binary>, ::apache::thrift::type_class::integral>>, std::set<std::map<std::map<std::string, std::string>, int64_t>>>::serializedSize<false>(*prot_, this->field117);
  xfer += prot_->serializedFieldSize("field118", apache::thrift::protocol::T_MAP, 118);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int64_t, std::string>>::serializedSize<false>(*prot_, this->field118);
  xfer += prot_->serializedFieldSize("field119", apache::thrift::protocol::T_BOOL, 119);
  xfer += prot_->serializedSizeBool(this->field119);
  xfer += prot_->serializedFieldSize("field120", apache::thrift::protocol::T_STRING, 120);
  xfer += prot_->serializedSizeZCBinary(this->field120);
  xfer += prot_->serializedFieldSize("field121", apache::thrift::protocol::T_FLOAT, 121);
  xfer += prot_->serializedSizeFloat(this->field121);
  xfer += prot_->serializedFieldSize("field122", apache::thrift::protocol::T_I32, 122);
  xfer += prot_->serializedSizeI32(this->field122);
  xfer += prot_->serializedFieldSize("field123", apache::thrift::protocol::T_I32, 123);
  xfer += prot_->serializedSizeI32(this->field123);
  xfer += prot_->serializedFieldSize("field124", apache::thrift::protocol::T_SET, 124);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<double>>>::serializedSize<false>(*prot_, this->field124);
  xfer += prot_->serializedFieldSize("field125", apache::thrift::protocol::T_BYTE, 125);
  xfer += prot_->serializedSizeByte(this->field125);
  xfer += prot_->serializedFieldSize("field126", apache::thrift::protocol::T_LIST, 126);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field126);
  xfer += prot_->serializedFieldSize("field127", apache::thrift::protocol::T_I16, 127);
  xfer += prot_->serializedSizeI16(this->field127);
  xfer += prot_->serializedFieldSize("field128", apache::thrift::protocol::T_MAP, 128);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int32_t, double>>::serializedSize<false>(*prot_, this->field128);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct17::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct17");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_BYTE, 1);
  xfer += prot_->writeByte(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_LIST, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->writeBinary(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_I64, 4);
  xfer += prot_->writeI64(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->writeI16(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_BOOL, 6);
  xfer += prot_->writeBool(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int32_t>>::write(*prot_, this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_BYTE, 8);
  xfer += prot_->writeByte(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, bool>>::write(*prot_, this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_MAP, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::string>, std::map< ::cpp2::Struct3, std::string>>::write(*prot_, this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_SET, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_DOUBLE, 13);
  xfer += prot_->writeDouble(this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_MAP, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int64_t>>::write(*prot_, this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_STRING, 15);
  xfer += prot_->writeString(this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_BOOL, 16);
  xfer += prot_->writeBool(this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::structure>, std::map<std::vector<bool>,  ::cpp2::Struct5>>::write(*prot_, this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_SET, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_DOUBLE, 19);
  xfer += prot_->writeDouble(this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_MAP, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int8_t>>::write(*prot_, this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_I32, 21);
  xfer += prot_->writeI32(this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_STRING, 22);
  xfer += prot_->writeString(this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_LIST, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_LIST, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int8_t>>>::write(*prot_, this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_I32, 25);
  xfer += prot_->writeI32(this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_BOOL, 26);
  xfer += prot_->writeBool(this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_SET, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field27);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_I64, 28);
  xfer += prot_->writeI64(this->field28);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field29", apache::thrift::protocol::T_LIST, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field29);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field30", apache::thrift::protocol::T_LIST, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field30);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field31", apache::thrift::protocol::T_FLOAT, 31);
  xfer += prot_->writeFloat(this->field31);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field32", apache::thrift::protocol::T_I16, 32);
  xfer += prot_->writeI16(this->field32);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field33", apache::thrift::protocol::T_STRUCT, 33);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::write(prot_, &this->field33);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field34", apache::thrift::protocol::T_SET, 34);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field34);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field35", apache::thrift::protocol::T_STRUCT, 35);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field35);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field36", apache::thrift::protocol::T_I64, 36);
  xfer += prot_->writeI64(this->field36);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field37", apache::thrift::protocol::T_DOUBLE, 37);
  xfer += prot_->writeDouble(this->field37);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field38", apache::thrift::protocol::T_FLOAT, 38);
  xfer += prot_->writeFloat(this->field38);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field39", apache::thrift::protocol::T_I64, 39);
  xfer += prot_->writeI64(this->field39);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field40", apache::thrift::protocol::T_LIST, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field40);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field41", apache::thrift::protocol::T_STRING, 41);
  xfer += prot_->writeString(this->field41);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field42", apache::thrift::protocol::T_SET, 42);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field42);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field43", apache::thrift::protocol::T_I16, 43);
  xfer += prot_->writeI16(this->field43);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field44", apache::thrift::protocol::T_STRUCT, 44);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field44);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field45", apache::thrift::protocol::T_I16, 45);
  xfer += prot_->writeI16(this->field45);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field46", apache::thrift::protocol::T_I16, 46);
  xfer += prot_->writeI16(this->field46);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field47", apache::thrift::protocol::T_STRING, 47);
  xfer += prot_->writeString(this->field47);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field48", apache::thrift::protocol::T_FLOAT, 48);
  xfer += prot_->writeFloat(this->field48);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field49", apache::thrift::protocol::T_I64, 49);
  xfer += prot_->writeI64(this->field49);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field50", apache::thrift::protocol::T_I64, 50);
  xfer += prot_->writeI64(this->field50);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field51", apache::thrift::protocol::T_DOUBLE, 51);
  xfer += prot_->writeDouble(this->field51);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field52", apache::thrift::protocol::T_SET, 52);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct10>>::write(*prot_, this->field52);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field53", apache::thrift::protocol::T_SET, 53);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field53);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field54", apache::thrift::protocol::T_BOOL, 54);
  xfer += prot_->writeBool(this->field54);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field55", apache::thrift::protocol::T_I64, 55);
  xfer += prot_->writeI64(this->field55);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field56", apache::thrift::protocol::T_STRUCT, 56);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::write(prot_, &this->field56);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field57", apache::thrift::protocol::T_SET, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>>, std::set<std::map<float, std::string>>>::write(*prot_, this->field57);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field58", apache::thrift::protocol::T_MAP, 58);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::map<bool, std::set<std::string>>>::write(*prot_, this->field58);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field59", apache::thrift::protocol::T_I32, 59);
  xfer += prot_->writeI32(this->field59);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field60", apache::thrift::protocol::T_BOOL, 60);
  xfer += prot_->writeBool(this->field60);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field61", apache::thrift::protocol::T_STRUCT, 61);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::write(prot_, &this->field61);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field62", apache::thrift::protocol::T_I16, 62);
  xfer += prot_->writeI16(this->field62);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field63", apache::thrift::protocol::T_I32, 63);
  xfer += prot_->writeI32(this->field63);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field64", apache::thrift::protocol::T_STRING, 64);
  xfer += prot_->writeBinary(this->field64);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field65", apache::thrift::protocol::T_SET, 65);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field65);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field66", apache::thrift::protocol::T_I32, 66);
  xfer += prot_->writeI32(this->field66);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field67", apache::thrift::protocol::T_MAP, 67);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int16_t, std::string>>::write(*prot_, this->field67);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field68", apache::thrift::protocol::T_MAP, 68);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<std::map<std::vector<int16_t>, std::string>, std::vector<int8_t>>>::write(*prot_, this->field68);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field69", apache::thrift::protocol::T_STRING, 69);
  xfer += prot_->writeString(this->field69);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field70", apache::thrift::protocol::T_FLOAT, 70);
  xfer += prot_->writeFloat(this->field70);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field71", apache::thrift::protocol::T_FLOAT, 71);
  xfer += prot_->writeFloat(this->field71);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field72", apache::thrift::protocol::T_I16, 72);
  xfer += prot_->writeI16(this->field72);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field73", apache::thrift::protocol::T_DOUBLE, 73);
  xfer += prot_->writeDouble(this->field73);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field74", apache::thrift::protocol::T_STRING, 74);
  xfer += prot_->writeString(this->field74);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field75", apache::thrift::protocol::T_SET, 75);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field75);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field76", apache::thrift::protocol::T_I64, 76);
  xfer += prot_->writeI64(this->field76);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field77", apache::thrift::protocol::T_MAP, 77);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<std::string, std::set<float>>>::write(*prot_, this->field77);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field78", apache::thrift::protocol::T_LIST, 78);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field78);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field79", apache::thrift::protocol::T_STRUCT, 79);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::write(prot_, &this->field79);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field80", apache::thrift::protocol::T_I64, 80);
  xfer += prot_->writeI64(this->field80);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field81", apache::thrift::protocol::T_MAP, 81);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::binary>, std::map< ::cpp2::Struct0, std::string>>::write(*prot_, this->field81);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field82", apache::thrift::protocol::T_STRUCT, 82);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field82);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field83", apache::thrift::protocol::T_STRUCT, 83);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::write(prot_, &this->field83);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field84", apache::thrift::protocol::T_MAP, 84);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int16_t>>::write(*prot_, this->field84);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field85", apache::thrift::protocol::T_I64, 85);
  xfer += prot_->writeI64(this->field85);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field86", apache::thrift::protocol::T_STRUCT, 86);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::write(prot_, &this->field86);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field87", apache::thrift::protocol::T_SET, 87);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int32_t>>>::write(*prot_, this->field87);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field88", apache::thrift::protocol::T_LIST, 88);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::vector<std::set<int64_t>>>::write(*prot_, this->field88);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field89", apache::thrift::protocol::T_DOUBLE, 89);
  xfer += prot_->writeDouble(this->field89);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field90", apache::thrift::protocol::T_LIST, 90);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->field90);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field91", apache::thrift::protocol::T_MAP, 91);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, bool>>::write(*prot_, this->field91);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field92", apache::thrift::protocol::T_DOUBLE, 92);
  xfer += prot_->writeDouble(this->field92);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field93", apache::thrift::protocol::T_MAP, 93);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int32_t>>::write(*prot_, this->field93);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field94", apache::thrift::protocol::T_STRUCT, 94);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field94);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field95", apache::thrift::protocol::T_STRING, 95);
  xfer += prot_->writeString(this->field95);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field96", apache::thrift::protocol::T_BYTE, 96);
  xfer += prot_->writeByte(this->field96);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field97", apache::thrift::protocol::T_STRUCT, 97);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field97);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field98", apache::thrift::protocol::T_DOUBLE, 98);
  xfer += prot_->writeDouble(this->field98);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field99", apache::thrift::protocol::T_I64, 99);
  xfer += prot_->writeI64(this->field99);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field100", apache::thrift::protocol::T_STRUCT, 100);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field100);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field101", apache::thrift::protocol::T_LIST, 101);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct9>>::write(*prot_, this->field101);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field102", apache::thrift::protocol::T_STRUCT, 102);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::write(prot_, &this->field102);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field103", apache::thrift::protocol::T_BYTE, 103);
  xfer += prot_->writeByte(this->field103);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field104", apache::thrift::protocol::T_MAP, 104);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int16_t>>::write(*prot_, this->field104);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field105", apache::thrift::protocol::T_I32, 105);
  xfer += prot_->writeI32(this->field105);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field106", apache::thrift::protocol::T_BYTE, 106);
  xfer += prot_->writeByte(this->field106);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field107", apache::thrift::protocol::T_MAP, 107);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>>, std::map<double, std::vector<std::map<float, int8_t>>>>::write(*prot_, this->field107);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field108", apache::thrift::protocol::T_DOUBLE, 108);
  xfer += prot_->writeDouble(this->field108);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field109", apache::thrift::protocol::T_STRUCT, 109);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::write(prot_, &this->field109);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field110", apache::thrift::protocol::T_DOUBLE, 110);
  xfer += prot_->writeDouble(this->field110);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field111", apache::thrift::protocol::T_I16, 111);
  xfer += prot_->writeI16(this->field111);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field112", apache::thrift::protocol::T_I32, 112);
  xfer += prot_->writeI32(this->field112);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field113", apache::thrift::protocol::T_I32, 113);
  xfer += prot_->writeI32(this->field113);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field114", apache::thrift::protocol::T_I64, 114);
  xfer += prot_->writeI64(this->field114);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field115", apache::thrift::protocol::T_BYTE, 115);
  xfer += prot_->writeByte(this->field115);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field116", apache::thrift::protocol::T_STRING, 116);
  xfer += prot_->writeBinary(this->field116);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field117", apache::thrift::protocol::T_SET, 117);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::binary>, ::apache::thrift::type_class::integral>>, std::set<std::map<std::map<std::string, std::string>, int64_t>>>::write(*prot_, this->field117);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field118", apache::thrift::protocol::T_MAP, 118);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int64_t, std::string>>::write(*prot_, this->field118);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field119", apache::thrift::protocol::T_BOOL, 119);
  xfer += prot_->writeBool(this->field119);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field120", apache::thrift::protocol::T_STRING, 120);
  xfer += prot_->writeBinary(this->field120);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field121", apache::thrift::protocol::T_FLOAT, 121);
  xfer += prot_->writeFloat(this->field121);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field122", apache::thrift::protocol::T_I32, 122);
  xfer += prot_->writeI32(this->field122);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field123", apache::thrift::protocol::T_I32, 123);
  xfer += prot_->writeI32(this->field123);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field124", apache::thrift::protocol::T_SET, 124);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<double>>>::write(*prot_, this->field124);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field125", apache::thrift::protocol::T_BYTE, 125);
  xfer += prot_->writeByte(this->field125);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field126", apache::thrift::protocol::T_LIST, 126);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field126);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field127", apache::thrift::protocol::T_I16, 127);
  xfer += prot_->writeI16(this->field127);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field128", apache::thrift::protocol::T_MAP, 128);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int32_t, double>>::write(*prot_, this->field128);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace cpp2 {

template <class Protocol_>
uint32_t Struct18::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::read(iprot, &this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field4 = std::map< ::cpp2::Struct3,  ::cpp2::Struct0>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::structure>, std::map< ::cpp2::Struct3,  ::cpp2::Struct0>>::read(*iprot, this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field6 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field7 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field13 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field17 = std::map<bool, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<bool, std::string>>::read(*iprot, this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field21 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field26 = std::map<int8_t, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int16_t>>::read(*iprot, this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field27);
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field28);
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field29);
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 30:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field30);
          this->__isset.field30 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 31:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field31);
          this->__isset.field31 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 32:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field32 = std::map<int32_t, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, bool>>::read(*iprot, this->field32);
          this->__isset.field32 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 33:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field33);
          this->__isset.field33 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 34:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field34);
          this->__isset.field34 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 35:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field35);
          this->__isset.field35 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 36:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field36);
          this->__isset.field36 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 37:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field37);
          this->__isset.field37 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 38:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field38 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field38);
          this->__isset.field38 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 39:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field39);
          this->__isset.field39 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 40:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field40 = std::map<std::vector<std::map<int8_t, int64_t>>, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, ::apache::thrift::type_class::string>, std::map<std::vector<std::map<int8_t, int64_t>>, std::string>>::read(*iprot, this->field40);
          this->__isset.field40 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 41:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field41);
          this->__isset.field41 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 42:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::read(iprot, &this->field42);
          this->__isset.field42 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 43:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field43);
          this->__isset.field43 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 44:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field44 = std::map<std::string, std::vector<std::vector<std::string>>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::string>>>, std::map<std::string, std::vector<std::vector<std::string>>>>::read(*iprot, this->field44);
          this->__isset.field44 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 45:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field45);
          this->__isset.field45 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 46:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field46 = std::map<int16_t, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int32_t>>::read(*iprot, this->field46);
          this->__isset.field46 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 47:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field47 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field47);
          this->__isset.field47 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 48:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field48 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field48);
          this->__isset.field48 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 49:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field49);
          this->__isset.field49 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 50:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field50 = std::vector< ::cpp2::Struct3>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct3>>::read(*iprot, this->field50);
          this->__isset.field50 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 51:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field51 = std::map<int64_t, std::vector<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::map<int64_t, std::vector<std::string>>>::read(*iprot, this->field51);
          this->__isset.field51 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 52:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field52);
          this->__isset.field52 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 53:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field53);
          this->__isset.field53 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 54:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field54 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field54);
          this->__isset.field54 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 55:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field55);
          this->__isset.field55 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 56:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field56 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field56);
          this->__isset.field56 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 57:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field57);
          this->__isset.field57 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 58:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field58);
          this->__isset.field58 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 59:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field59);
          this->__isset.field59 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 60:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field60 = std::set< ::cpp2::Struct1>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct1>>::read(*iprot, this->field60);
          this->__isset.field60 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 61:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field61 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field61);
          this->__isset.field61 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 62:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field62 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field62);
          this->__isset.field62 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 63:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field63 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field63);
          this->__isset.field63 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 64:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::read(iprot, &this->field64);
          this->__isset.field64 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 65:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::read(iprot, &this->field65);
          this->__isset.field65 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 66:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field66);
          this->__isset.field66 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 67:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field67);
          this->__isset.field67 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 68:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field68 = std::map<std::vector<int8_t>, std::set<float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<std::vector<int8_t>, std::set<float>>>::read(*iprot, this->field68);
          this->__isset.field68 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 69:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field69 = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->field69);
          this->__isset.field69 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 70:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field70);
          this->__isset.field70 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 71:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field71 = std::vector<std::map<int16_t, std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>>, std::vector<std::map<int16_t, std::string>>>::read(*iprot, this->field71);
          this->__isset.field71 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 72:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field72 = std::vector<std::map<std::string, int8_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>>, std::vector<std::map<std::string, int8_t>>>::read(*iprot, this->field72);
          this->__isset.field72 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 73:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field73);
          this->__isset.field73 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 74:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field74 = std::vector<std::set<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::vector<std::set<std::string>>>::read(*iprot, this->field74);
          this->__isset.field74 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 75:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field75 = std::vector<std::vector<double>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<double>>>::read(*iprot, this->field75);
          this->__isset.field75 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 76:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field76 = std::map<double, std::vector<int64_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<double, std::vector<int64_t>>>::read(*iprot, this->field76);
          this->__isset.field76 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 77:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field77);
          this->__isset.field77 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 78:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field78);
          this->__isset.field78 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 79:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field79);
          this->__isset.field79 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 80:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field80 = std::set<std::set<int64_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int64_t>>>::read(*iprot, this->field80);
          this->__isset.field80 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 81:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field81);
          this->__isset.field81 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 82:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field82);
          this->__isset.field82 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 83:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::read(iprot, &this->field83);
          this->__isset.field83 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 84:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::read(iprot, &this->field84);
          this->__isset.field84 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 85:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field85);
          this->__isset.field85 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 86:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field86);
          this->__isset.field86 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 87:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field87);
          this->__isset.field87 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 88:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field88);
          this->__isset.field88 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 89:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field89 = std::map<int8_t, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int8_t>>::read(*iprot, this->field89);
          this->__isset.field89 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 90:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field90 = std::map<int16_t, std::vector<float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<int16_t, std::vector<float>>>::read(*iprot, this->field90);
          this->__isset.field90 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 91:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field91);
          this->__isset.field91 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 92:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field92);
          this->__isset.field92 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 93:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field93);
          this->__isset.field93 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 94:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field94 = std::map<float,  ::cpp2::Struct5>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::structure>, std::map<float,  ::cpp2::Struct5>>::read(*iprot, this->field94);
          this->__isset.field94 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 95:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field95 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field95);
          this->__isset.field95 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 96:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field96);
          this->__isset.field96 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 97:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::read(iprot, &this->field97);
          this->__isset.field97 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 98:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field98 = std::map<int8_t, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::read(*iprot, this->field98);
          this->__isset.field98 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 99:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field99);
          this->__isset.field99 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 100:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field100 = std::map<int8_t, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::read(*iprot, this->field100);
          this->__isset.field100 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 101:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field101 = std::map<bool, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int64_t>>::read(*iprot, this->field101);
          this->__isset.field101 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 102:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field102);
          this->__isset.field102 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 103:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field103);
          this->__isset.field103 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 104:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field104 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field104);
          this->__isset.field104 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 105:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field105);
          this->__isset.field105 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 106:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field106 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field106);
          this->__isset.field106 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 107:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field107);
          this->__isset.field107 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 108:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::read(iprot, &this->field108);
          this->__isset.field108 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 109:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field109);
          this->__isset.field109 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 110:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field110 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field110);
          this->__isset.field110 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 111:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field111);
          this->__isset.field111 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 112:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field112);
          this->__isset.field112 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 113:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field113 = std::set<std::map<std::string, int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>>, std::set<std::map<std::string, int32_t>>>::read(*iprot, this->field113);
          this->__isset.field113 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 114:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field114);
          this->__isset.field114 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 115:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field115);
          this->__isset.field115 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 116:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field116 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field116);
          this->__isset.field116 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 117:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field117);
          this->__isset.field117 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 118:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field118 = std::vector<std::map<int8_t, double>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::vector<std::map<int8_t, double>>>::read(*iprot, this->field118);
          this->__isset.field118 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 119:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field119);
          this->__isset.field119 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 120:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field120);
          this->__isset.field120 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 121:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field121);
          this->__isset.field121 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 122:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field122 = std::set<std::vector<std::map<float, double>>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>>>, std::set<std::vector<std::map<float, double>>>>::read(*iprot, this->field122);
          this->__isset.field122 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 123:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field123 = std::vector<std::map<std::string, int8_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>>, std::vector<std::map<std::string, int8_t>>>::read(*iprot, this->field123);
          this->__isset.field123 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 124:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field124 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field124);
          this->__isset.field124 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 125:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field125);
          this->__isset.field125 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 126:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field126 = std::map<std::string, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::read(*iprot, this->field126);
          this->__isset.field126 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 127:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field127);
          this->__isset.field127 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 128:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field128);
          this->__isset.field128 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 129:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::read(iprot, &this->field129);
          this->__isset.field129 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 130:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field130);
          this->__isset.field130 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 131:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field131);
          this->__isset.field131 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 132:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::read(iprot, &this->field132);
          this->__isset.field132 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 133:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field133);
          this->__isset.field133 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 134:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field134);
          this->__isset.field134 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 135:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field135);
          this->__isset.field135 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 136:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field136);
          this->__isset.field136 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 137:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field137);
          this->__isset.field137 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 138:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field138);
          this->__isset.field138 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 139:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field139);
          this->__isset.field139 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 140:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field140);
          this->__isset.field140 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 141:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field141);
          this->__isset.field141 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 142:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field142);
          this->__isset.field142 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 143:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field143);
          this->__isset.field143 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 144:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field144 = std::map< ::cpp2::Struct4, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct4, int64_t>>::read(*iprot, this->field144);
          this->__isset.field144 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 145:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field145 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field145);
          this->__isset.field145 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 146:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field146);
          this->__isset.field146 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 147:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::read(iprot, &this->field147);
          this->__isset.field147 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 148:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field148 = std::map< ::cpp2::Struct0, double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::floating_point>, std::map< ::cpp2::Struct0, double>>::read(*iprot, this->field148);
          this->__isset.field148 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 149:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field149);
          this->__isset.field149 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 150:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field150);
          this->__isset.field150 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 151:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field151 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field151);
          this->__isset.field151 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 152:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field152 = std::map<int64_t, std::vector<int64_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<int64_t, std::vector<int64_t>>>::read(*iprot, this->field152);
          this->__isset.field152 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 153:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field153);
          this->__isset.field153 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 154:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field154);
          this->__isset.field154 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 155:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field155);
          this->__isset.field155 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 156:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field156);
          this->__isset.field156 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 157:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field157);
          this->__isset.field157 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 158:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field158);
          this->__isset.field158 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 159:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field159);
          this->__isset.field159 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 160:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field160 = std::map<double, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int8_t>>::read(*iprot, this->field160);
          this->__isset.field160 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 161:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field161);
          this->__isset.field161 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 162:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field162);
          this->__isset.field162 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 163:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field163);
          this->__isset.field163 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 164:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field164);
          this->__isset.field164 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 165:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field165);
          this->__isset.field165 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 166:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field166 = std::set< ::cpp2::Struct6>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct6>>::read(*iprot, this->field166);
          this->__isset.field166 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 167:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field167 = std::map<int16_t, std::set<float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<int16_t, std::set<float>>>::read(*iprot, this->field167);
          this->__isset.field167 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 168:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field168 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field168);
          this->__isset.field168 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 169:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field169 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field169);
          this->__isset.field169 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 170:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field170 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field170);
          this->__isset.field170 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 171:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field171 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field171);
          this->__isset.field171 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 172:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field172);
          this->__isset.field172 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 173:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field173 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field173);
          this->__isset.field173 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 174:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field174 = std::map<int32_t,  ::cpp2::Struct8>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int32_t,  ::cpp2::Struct8>>::read(*iprot, this->field174);
          this->__isset.field174 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 175:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field175);
          this->__isset.field175 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 176:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field176 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field176);
          this->__isset.field176 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 177:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field177);
          this->__isset.field177 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 178:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field178);
          this->__isset.field178 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 179:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field179);
          this->__isset.field179 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 180:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field180 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field180);
          this->__isset.field180 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 181:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field181);
          this->__isset.field181 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 182:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field182);
          this->__isset.field182 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 183:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field183 = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->field183);
          this->__isset.field183 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 184:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field184);
          this->__isset.field184 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 185:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field185 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field185);
          this->__isset.field185 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 186:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field186);
          this->__isset.field186 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 187:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field187 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field187);
          this->__isset.field187 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 188:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::read(iprot, &this->field188);
          this->__isset.field188 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 189:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field189);
          this->__isset.field189 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 190:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::read(iprot, &this->field190);
          this->__isset.field190 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 191:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field191);
          this->__isset.field191 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 192:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field192);
          this->__isset.field192 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 193:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field193);
          this->__isset.field193 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 194:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field194);
          this->__isset.field194 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 195:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field195 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field195);
          this->__isset.field195 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 196:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field196);
          this->__isset.field196 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 197:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::read(iprot, &this->field197);
          this->__isset.field197 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 198:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field198);
          this->__isset.field198 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 199:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct14>::read(iprot, &this->field199);
          this->__isset.field199 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 200:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field200 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field200);
          this->__isset.field200 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 201:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field201 = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->field201);
          this->__isset.field201 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 202:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field202 = std::map<bool, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int32_t>>::read(*iprot, this->field202);
          this->__isset.field202 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 203:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field203);
          this->__isset.field203 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 204:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field204 = std::map<int64_t, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int32_t>>::read(*iprot, this->field204);
          this->__isset.field204 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 205:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field205 = std::map<std::string, std::vector<int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<std::string, std::vector<int32_t>>>::read(*iprot, this->field205);
          this->__isset.field205 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 206:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field206);
          this->__isset.field206 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 207:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field207 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field207);
          this->__isset.field207 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 208:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::read(iprot, &this->field208);
          this->__isset.field208 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 209:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field209);
          this->__isset.field209 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 210:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field210 = std::map<std::string, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::read(*iprot, this->field210);
          this->__isset.field210 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 211:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field211 = std::map<bool, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int16_t>>::read(*iprot, this->field211);
          this->__isset.field211 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 212:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field212);
          this->__isset.field212 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 213:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field213);
          this->__isset.field213 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 214:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::read(iprot, &this->field214);
          this->__isset.field214 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 215:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field215);
          this->__isset.field215 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 216:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field216);
          this->__isset.field216 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 217:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field217);
          this->__isset.field217 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 218:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field218);
          this->__isset.field218 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 219:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field219 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field219);
          this->__isset.field219 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 220:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct13>::read(iprot, &this->field220);
          this->__isset.field220 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 221:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field221);
          this->__isset.field221 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 222:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::read(iprot, &this->field222);
          this->__isset.field222 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 223:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field223 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field223);
          this->__isset.field223 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 224:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field224);
          this->__isset.field224 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 225:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field225 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field225);
          this->__isset.field225 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 226:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field226 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field226);
          this->__isset.field226 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 227:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field227 = std::vector<std::map<int64_t, int16_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::vector<std::map<int64_t, int16_t>>>::read(*iprot, this->field227);
          this->__isset.field227 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 228:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field228);
          this->__isset.field228 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 229:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field229);
          this->__isset.field229 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 230:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field230);
          this->__isset.field230 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct18::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct18");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::serializedSize(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->serializedSizeI64(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::structure>, std::map< ::cpp2::Struct3,  ::cpp2::Struct0>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->serializedSizeI16(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_LIST, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_I32, 8);
  xfer += prot_->serializedSizeI32(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_I16, 9);
  xfer += prot_->serializedSizeI16(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_STRUCT, 10);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_FLOAT, 11);
  xfer += prot_->serializedSizeFloat(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_BYTE, 12);
  xfer += prot_->serializedSizeByte(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_SET, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_I64, 14);
  xfer += prot_->serializedSizeI64(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_I16, 15);
  xfer += prot_->serializedSizeI16(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_I16, 16);
  xfer += prot_->serializedSizeI16(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<bool, std::string>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_I32, 18);
  xfer += prot_->serializedSizeI32(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_I32, 19);
  xfer += prot_->serializedSizeI32(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_STRING, 20);
  xfer += prot_->serializedSizeBinary(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_SET, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_I16, 22);
  xfer += prot_->serializedSizeI16(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_STRING, 23);
  xfer += prot_->serializedSizeString(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_I32, 24);
  xfer += prot_->serializedSizeI32(this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_STRUCT, 25);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_MAP, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int16_t>>::serializedSize<false>(*prot_, this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_STRING, 27);
  xfer += prot_->serializedSizeBinary(this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_STRING, 28);
  xfer += prot_->serializedSizeBinary(this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_I32, 29);
  xfer += prot_->serializedSizeI32(this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_STRING, 30);
  xfer += prot_->serializedSizeString(this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_I64, 31);
  xfer += prot_->serializedSizeI64(this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_MAP, 32);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, bool>>::serializedSize<false>(*prot_, this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_BYTE, 33);
  xfer += prot_->serializedSizeByte(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_STRING, 34);
  xfer += prot_->serializedSizeString(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_I64, 35);
  xfer += prot_->serializedSizeI64(this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_I64, 36);
  xfer += prot_->serializedSizeI64(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_STRUCT, 37);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_LIST, 38);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_STRING, 39);
  xfer += prot_->serializedSizeBinary(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_MAP, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, ::apache::thrift::type_class::string>, std::map<std::vector<std::map<int8_t, int64_t>>, std::string>>::serializedSize<false>(*prot_, this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_BOOL, 41);
  xfer += prot_->serializedSizeBool(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_STRUCT, 42);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSize(prot_, &this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_STRING, 43);
  xfer += prot_->serializedSizeString(this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_MAP, 44);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::string>>>, std::map<std::string, std::vector<std::vector<std::string>>>>::serializedSize<false>(*prot_, this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_I64, 45);
  xfer += prot_->serializedSizeI64(this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_MAP, 46);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int32_t>>::serializedSize<false>(*prot_, this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_SET, 47);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_SET, 48);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_STRUCT, 49);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_LIST, 50);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct3>>::serializedSize<false>(*prot_, this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_MAP, 51);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::map<int64_t, std::vector<std::string>>>::serializedSize<false>(*prot_, this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_I64, 52);
  xfer += prot_->serializedSizeI64(this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_BOOL, 53);
  xfer += prot_->serializedSizeBool(this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_SET, 54);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_STRING, 55);
  xfer += prot_->serializedSizeString(this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_SET, 56);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_STRING, 57);
  xfer += prot_->serializedSizeString(this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_DOUBLE, 58);
  xfer += prot_->serializedSizeDouble(this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_BOOL, 59);
  xfer += prot_->serializedSizeBool(this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_SET, 60);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct1>>::serializedSize<false>(*prot_, this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_SET, 61);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_SET, 62);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_SET, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_STRUCT, 64);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSize(prot_, &this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_STRUCT, 65);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSize(prot_, &this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_I16, 66);
  xfer += prot_->serializedSizeI16(this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_DOUBLE, 67);
  xfer += prot_->serializedSizeDouble(this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_MAP, 68);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<std::vector<int8_t>, std::set<float>>>::serializedSize<false>(*prot_, this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_LIST, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_I64, 70);
  xfer += prot_->serializedSizeI64(this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_LIST, 71);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>>, std::vector<std::map<int16_t, std::string>>>::serializedSize<false>(*prot_, this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_LIST, 72);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>>, std::vector<std::map<std::string, int8_t>>>::serializedSize<false>(*prot_, this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_BYTE, 73);
  xfer += prot_->serializedSizeByte(this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_LIST, 74);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::vector<std::set<std::string>>>::serializedSize<false>(*prot_, this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_LIST, 75);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<double>>>::serializedSize<false>(*prot_, this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_MAP, 76);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<double, std::vector<int64_t>>>::serializedSize<false>(*prot_, this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_I32, 77);
  xfer += prot_->serializedSizeI32(this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_STRING, 78);
  xfer += prot_->serializedSizeString(this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_BOOL, 79);
  xfer += prot_->serializedSizeBool(this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_SET, 80);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int64_t>>>::serializedSize<false>(*prot_, this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_DOUBLE, 81);
  xfer += prot_->serializedSizeDouble(this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_FLOAT, 82);
  xfer += prot_->serializedSizeFloat(this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_STRUCT, 83);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSize(prot_, &this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_STRUCT, 84);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSize(prot_, &this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_I64, 85);
  xfer += prot_->serializedSizeI64(this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_STRING, 86);
  xfer += prot_->serializedSizeBinary(this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_I32, 87);
  xfer += prot_->serializedSizeI32(this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_FLOAT, 88);
  xfer += prot_->serializedSizeFloat(this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_MAP, 89);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int8_t>>::serializedSize<false>(*prot_, this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_MAP, 90);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<int16_t, std::vector<float>>>::serializedSize<false>(*prot_, this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_I16, 91);
  xfer += prot_->serializedSizeI16(this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_I64, 92);
  xfer += prot_->serializedSizeI64(this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_I64, 93);
  xfer += prot_->serializedSizeI64(this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_MAP, 94);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::structure>, std::map<float,  ::cpp2::Struct5>>::serializedSize<false>(*prot_, this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_LIST, 95);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_FLOAT, 96);
  xfer += prot_->serializedSizeFloat(this->field96);
  xfer += prot_->serializedFieldSize("field97", apache::thrift::protocol::T_STRUCT, 97);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSize(prot_, &this->field97);
  xfer += prot_->serializedFieldSize("field98", apache::thrift::protocol::T_MAP, 98);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::serializedSize<false>(*prot_, this->field98);
  xfer += prot_->serializedFieldSize("field99", apache::thrift::protocol::T_I16, 99);
  xfer += prot_->serializedSizeI16(this->field99);
  xfer += prot_->serializedFieldSize("field100", apache::thrift::protocol::T_MAP, 100);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::serializedSize<false>(*prot_, this->field100);
  xfer += prot_->serializedFieldSize("field101", apache::thrift::protocol::T_MAP, 101);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int64_t>>::serializedSize<false>(*prot_, this->field101);
  xfer += prot_->serializedFieldSize("field102", apache::thrift::protocol::T_I16, 102);
  xfer += prot_->serializedSizeI16(this->field102);
  xfer += prot_->serializedFieldSize("field103", apache::thrift::protocol::T_BYTE, 103);
  xfer += prot_->serializedSizeByte(this->field103);
  xfer += prot_->serializedFieldSize("field104", apache::thrift::protocol::T_SET, 104);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field104);
  xfer += prot_->serializedFieldSize("field105", apache::thrift::protocol::T_STRING, 105);
  xfer += prot_->serializedSizeString(this->field105);
  xfer += prot_->serializedFieldSize("field106", apache::thrift::protocol::T_SET, 106);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field106);
  xfer += prot_->serializedFieldSize("field107", apache::thrift::protocol::T_STRING, 107);
  xfer += prot_->serializedSizeBinary(this->field107);
  xfer += prot_->serializedFieldSize("field108", apache::thrift::protocol::T_STRUCT, 108);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSize(prot_, &this->field108);
  xfer += prot_->serializedFieldSize("field109", apache::thrift::protocol::T_BYTE, 109);
  xfer += prot_->serializedSizeByte(this->field109);
  xfer += prot_->serializedFieldSize("field110", apache::thrift::protocol::T_SET, 110);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field110);
  xfer += prot_->serializedFieldSize("field111", apache::thrift::protocol::T_STRUCT, 111);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field111);
  xfer += prot_->serializedFieldSize("field112", apache::thrift::protocol::T_STRING, 112);
  xfer += prot_->serializedSizeString(this->field112);
  xfer += prot_->serializedFieldSize("field113", apache::thrift::protocol::T_SET, 113);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>>, std::set<std::map<std::string, int32_t>>>::serializedSize<false>(*prot_, this->field113);
  xfer += prot_->serializedFieldSize("field114", apache::thrift::protocol::T_I64, 114);
  xfer += prot_->serializedSizeI64(this->field114);
  xfer += prot_->serializedFieldSize("field115", apache::thrift::protocol::T_STRUCT, 115);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field115);
  xfer += prot_->serializedFieldSize("field116", apache::thrift::protocol::T_SET, 116);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field116);
  xfer += prot_->serializedFieldSize("field117", apache::thrift::protocol::T_FLOAT, 117);
  xfer += prot_->serializedSizeFloat(this->field117);
  xfer += prot_->serializedFieldSize("field118", apache::thrift::protocol::T_LIST, 118);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::vector<std::map<int8_t, double>>>::serializedSize<false>(*prot_, this->field118);
  xfer += prot_->serializedFieldSize("field119", apache::thrift::protocol::T_STRING, 119);
  xfer += prot_->serializedSizeString(this->field119);
  xfer += prot_->serializedFieldSize("field120", apache::thrift::protocol::T_STRING, 120);
  xfer += prot_->serializedSizeBinary(this->field120);
  xfer += prot_->serializedFieldSize("field121", apache::thrift::protocol::T_I64, 121);
  xfer += prot_->serializedSizeI64(this->field121);
  xfer += prot_->serializedFieldSize("field122", apache::thrift::protocol::T_SET, 122);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>>>, std::set<std::vector<std::map<float, double>>>>::serializedSize<false>(*prot_, this->field122);
  xfer += prot_->serializedFieldSize("field123", apache::thrift::protocol::T_LIST, 123);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>>, std::vector<std::map<std::string, int8_t>>>::serializedSize<false>(*prot_, this->field123);
  xfer += prot_->serializedFieldSize("field124", apache::thrift::protocol::T_SET, 124);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field124);
  xfer += prot_->serializedFieldSize("field125", apache::thrift::protocol::T_I16, 125);
  xfer += prot_->serializedSizeI16(this->field125);
  xfer += prot_->serializedFieldSize("field126", apache::thrift::protocol::T_MAP, 126);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::serializedSize<false>(*prot_, this->field126);
  xfer += prot_->serializedFieldSize("field127", apache::thrift::protocol::T_BYTE, 127);
  xfer += prot_->serializedSizeByte(this->field127);
  xfer += prot_->serializedFieldSize("field128", apache::thrift::protocol::T_I32, 128);
  xfer += prot_->serializedSizeI32(this->field128);
  xfer += prot_->serializedFieldSize("field129", apache::thrift::protocol::T_STRUCT, 129);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::serializedSize(prot_, &this->field129);
  xfer += prot_->serializedFieldSize("field130", apache::thrift::protocol::T_DOUBLE, 130);
  xfer += prot_->serializedSizeDouble(this->field130);
  xfer += prot_->serializedFieldSize("field131", apache::thrift::protocol::T_BYTE, 131);
  xfer += prot_->serializedSizeByte(this->field131);
  xfer += prot_->serializedFieldSize("field132", apache::thrift::protocol::T_STRUCT, 132);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSize(prot_, &this->field132);
  xfer += prot_->serializedFieldSize("field133", apache::thrift::protocol::T_I32, 133);
  xfer += prot_->serializedSizeI32(this->field133);
  xfer += prot_->serializedFieldSize("field134", apache::thrift::protocol::T_DOUBLE, 134);
  xfer += prot_->serializedSizeDouble(this->field134);
  xfer += prot_->serializedFieldSize("field135", apache::thrift::protocol::T_BYTE, 135);
  xfer += prot_->serializedSizeByte(this->field135);
  xfer += prot_->serializedFieldSize("field136", apache::thrift::protocol::T_DOUBLE, 136);
  xfer += prot_->serializedSizeDouble(this->field136);
  xfer += prot_->serializedFieldSize("field137", apache::thrift::protocol::T_STRING, 137);
  xfer += prot_->serializedSizeBinary(this->field137);
  xfer += prot_->serializedFieldSize("field138", apache::thrift::protocol::T_I64, 138);
  xfer += prot_->serializedSizeI64(this->field138);
  xfer += prot_->serializedFieldSize("field139", apache::thrift::protocol::T_STRING, 139);
  xfer += prot_->serializedSizeBinary(this->field139);
  xfer += prot_->serializedFieldSize("field140", apache::thrift::protocol::T_I64, 140);
  xfer += prot_->serializedSizeI64(this->field140);
  xfer += prot_->serializedFieldSize("field141", apache::thrift::protocol::T_FLOAT, 141);
  xfer += prot_->serializedSizeFloat(this->field141);
  xfer += prot_->serializedFieldSize("field142", apache::thrift::protocol::T_BOOL, 142);
  xfer += prot_->serializedSizeBool(this->field142);
  xfer += prot_->serializedFieldSize("field143", apache::thrift::protocol::T_I16, 143);
  xfer += prot_->serializedSizeI16(this->field143);
  xfer += prot_->serializedFieldSize("field144", apache::thrift::protocol::T_MAP, 144);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct4, int64_t>>::serializedSize<false>(*prot_, this->field144);
  xfer += prot_->serializedFieldSize("field145", apache::thrift::protocol::T_LIST, 145);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field145);
  xfer += prot_->serializedFieldSize("field146", apache::thrift::protocol::T_I16, 146);
  xfer += prot_->serializedSizeI16(this->field146);
  xfer += prot_->serializedFieldSize("field147", apache::thrift::protocol::T_STRUCT, 147);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSize(prot_, &this->field147);
  xfer += prot_->serializedFieldSize("field148", apache::thrift::protocol::T_MAP, 148);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::floating_point>, std::map< ::cpp2::Struct0, double>>::serializedSize<false>(*prot_, this->field148);
  xfer += prot_->serializedFieldSize("field149", apache::thrift::protocol::T_FLOAT, 149);
  xfer += prot_->serializedSizeFloat(this->field149);
  xfer += prot_->serializedFieldSize("field150", apache::thrift::protocol::T_BOOL, 150);
  xfer += prot_->serializedSizeBool(this->field150);
  xfer += prot_->serializedFieldSize("field151", apache::thrift::protocol::T_SET, 151);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field151);
  xfer += prot_->serializedFieldSize("field152", apache::thrift::protocol::T_MAP, 152);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<int64_t, std::vector<int64_t>>>::serializedSize<false>(*prot_, this->field152);
  xfer += prot_->serializedFieldSize("field153", apache::thrift::protocol::T_BOOL, 153);
  xfer += prot_->serializedSizeBool(this->field153);
  xfer += prot_->serializedFieldSize("field154", apache::thrift::protocol::T_BYTE, 154);
  xfer += prot_->serializedSizeByte(this->field154);
  xfer += prot_->serializedFieldSize("field155", apache::thrift::protocol::T_I32, 155);
  xfer += prot_->serializedSizeI32(this->field155);
  xfer += prot_->serializedFieldSize("field156", apache::thrift::protocol::T_I16, 156);
  xfer += prot_->serializedSizeI16(this->field156);
  xfer += prot_->serializedFieldSize("field157", apache::thrift::protocol::T_STRING, 157);
  xfer += prot_->serializedSizeString(this->field157);
  xfer += prot_->serializedFieldSize("field158", apache::thrift::protocol::T_STRING, 158);
  xfer += prot_->serializedSizeBinary(this->field158);
  xfer += prot_->serializedFieldSize("field159", apache::thrift::protocol::T_I64, 159);
  xfer += prot_->serializedSizeI64(this->field159);
  xfer += prot_->serializedFieldSize("field160", apache::thrift::protocol::T_MAP, 160);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int8_t>>::serializedSize<false>(*prot_, this->field160);
  xfer += prot_->serializedFieldSize("field161", apache::thrift::protocol::T_STRING, 161);
  xfer += prot_->serializedSizeString(this->field161);
  xfer += prot_->serializedFieldSize("field162", apache::thrift::protocol::T_STRUCT, 162);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field162);
  xfer += prot_->serializedFieldSize("field163", apache::thrift::protocol::T_BOOL, 163);
  xfer += prot_->serializedSizeBool(this->field163);
  xfer += prot_->serializedFieldSize("field164", apache::thrift::protocol::T_I64, 164);
  xfer += prot_->serializedSizeI64(this->field164);
  xfer += prot_->serializedFieldSize("field165", apache::thrift::protocol::T_BOOL, 165);
  xfer += prot_->serializedSizeBool(this->field165);
  xfer += prot_->serializedFieldSize("field166", apache::thrift::protocol::T_SET, 166);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct6>>::serializedSize<false>(*prot_, this->field166);
  xfer += prot_->serializedFieldSize("field167", apache::thrift::protocol::T_MAP, 167);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<int16_t, std::set<float>>>::serializedSize<false>(*prot_, this->field167);
  xfer += prot_->serializedFieldSize("field168", apache::thrift::protocol::T_LIST, 168);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field168);
  xfer += prot_->serializedFieldSize("field169", apache::thrift::protocol::T_SET, 169);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field169);
  xfer += prot_->serializedFieldSize("field170", apache::thrift::protocol::T_SET, 170);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field170);
  xfer += prot_->serializedFieldSize("field171", apache::thrift::protocol::T_LIST, 171);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field171);
  xfer += prot_->serializedFieldSize("field172", apache::thrift::protocol::T_STRUCT, 172);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field172);
  xfer += prot_->serializedFieldSize("field173", apache::thrift::protocol::T_LIST, 173);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field173);
  xfer += prot_->serializedFieldSize("field174", apache::thrift::protocol::T_MAP, 174);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int32_t,  ::cpp2::Struct8>>::serializedSize<false>(*prot_, this->field174);
  xfer += prot_->serializedFieldSize("field175", apache::thrift::protocol::T_STRUCT, 175);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field175);
  xfer += prot_->serializedFieldSize("field176", apache::thrift::protocol::T_SET, 176);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field176);
  xfer += prot_->serializedFieldSize("field177", apache::thrift::protocol::T_I32, 177);
  xfer += prot_->serializedSizeI32(this->field177);
  xfer += prot_->serializedFieldSize("field178", apache::thrift::protocol::T_BYTE, 178);
  xfer += prot_->serializedSizeByte(this->field178);
  xfer += prot_->serializedFieldSize("field179", apache::thrift::protocol::T_I16, 179);
  xfer += prot_->serializedSizeI16(this->field179);
  xfer += prot_->serializedFieldSize("field180", apache::thrift::protocol::T_SET, 180);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field180);
  xfer += prot_->serializedFieldSize("field181", apache::thrift::protocol::T_STRING, 181);
  xfer += prot_->serializedSizeString(this->field181);
  xfer += prot_->serializedFieldSize("field182", apache::thrift::protocol::T_FLOAT, 182);
  xfer += prot_->serializedSizeFloat(this->field182);
  xfer += prot_->serializedFieldSize("field183", apache::thrift::protocol::T_LIST, 183);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field183);
  xfer += prot_->serializedFieldSize("field184", apache::thrift::protocol::T_BYTE, 184);
  xfer += prot_->serializedSizeByte(this->field184);
  xfer += prot_->serializedFieldSize("field185", apache::thrift::protocol::T_SET, 185);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field185);
  xfer += prot_->serializedFieldSize("field186", apache::thrift::protocol::T_BOOL, 186);
  xfer += prot_->serializedSizeBool(this->field186);
  xfer += prot_->serializedFieldSize("field187", apache::thrift::protocol::T_SET, 187);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field187);
  xfer += prot_->serializedFieldSize("field188", apache::thrift::protocol::T_STRUCT, 188);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSize(prot_, &this->field188);
  xfer += prot_->serializedFieldSize("field189", apache::thrift::protocol::T_BOOL, 189);
  xfer += prot_->serializedSizeBool(this->field189);
  xfer += prot_->serializedFieldSize("field190", apache::thrift::protocol::T_STRUCT, 190);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSize(prot_, &this->field190);
  xfer += prot_->serializedFieldSize("field191", apache::thrift::protocol::T_STRING, 191);
  xfer += prot_->serializedSizeBinary(this->field191);
  xfer += prot_->serializedFieldSize("field192", apache::thrift::protocol::T_FLOAT, 192);
  xfer += prot_->serializedSizeFloat(this->field192);
  xfer += prot_->serializedFieldSize("field193", apache::thrift::protocol::T_I32, 193);
  xfer += prot_->serializedSizeI32(this->field193);
  xfer += prot_->serializedFieldSize("field194", apache::thrift::protocol::T_FLOAT, 194);
  xfer += prot_->serializedSizeFloat(this->field194);
  xfer += prot_->serializedFieldSize("field195", apache::thrift::protocol::T_SET, 195);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field195);
  xfer += prot_->serializedFieldSize("field196", apache::thrift::protocol::T_DOUBLE, 196);
  xfer += prot_->serializedSizeDouble(this->field196);
  xfer += prot_->serializedFieldSize("field197", apache::thrift::protocol::T_STRUCT, 197);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSize(prot_, &this->field197);
  xfer += prot_->serializedFieldSize("field198", apache::thrift::protocol::T_I32, 198);
  xfer += prot_->serializedSizeI32(this->field198);
  xfer += prot_->serializedFieldSize("field199", apache::thrift::protocol::T_STRUCT, 199);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct14>::serializedSize(prot_, &this->field199);
  xfer += prot_->serializedFieldSize("field200", apache::thrift::protocol::T_LIST, 200);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field200);
  xfer += prot_->serializedFieldSize("field201", apache::thrift::protocol::T_LIST, 201);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field201);
  xfer += prot_->serializedFieldSize("field202", apache::thrift::protocol::T_MAP, 202);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int32_t>>::serializedSize<false>(*prot_, this->field202);
  xfer += prot_->serializedFieldSize("field203", apache::thrift::protocol::T_STRING, 203);
  xfer += prot_->serializedSizeString(this->field203);
  xfer += prot_->serializedFieldSize("field204", apache::thrift::protocol::T_MAP, 204);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int32_t>>::serializedSize<false>(*prot_, this->field204);
  xfer += prot_->serializedFieldSize("field205", apache::thrift::protocol::T_MAP, 205);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<std::string, std::vector<int32_t>>>::serializedSize<false>(*prot_, this->field205);
  xfer += prot_->serializedFieldSize("field206", apache::thrift::protocol::T_BYTE, 206);
  xfer += prot_->serializedSizeByte(this->field206);
  xfer += prot_->serializedFieldSize("field207", apache::thrift::protocol::T_SET, 207);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field207);
  xfer += prot_->serializedFieldSize("field208", apache::thrift::protocol::T_STRUCT, 208);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSize(prot_, &this->field208);
  xfer += prot_->serializedFieldSize("field209", apache::thrift::protocol::T_STRING, 209);
  xfer += prot_->serializedSizeBinary(this->field209);
  xfer += prot_->serializedFieldSize("field210", apache::thrift::protocol::T_MAP, 210);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::serializedSize<false>(*prot_, this->field210);
  xfer += prot_->serializedFieldSize("field211", apache::thrift::protocol::T_MAP, 211);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int16_t>>::serializedSize<false>(*prot_, this->field211);
  xfer += prot_->serializedFieldSize("field212", apache::thrift::protocol::T_STRING, 212);
  xfer += prot_->serializedSizeBinary(this->field212);
  xfer += prot_->serializedFieldSize("field213", apache::thrift::protocol::T_BYTE, 213);
  xfer += prot_->serializedSizeByte(this->field213);
  xfer += prot_->serializedFieldSize("field214", apache::thrift::protocol::T_STRUCT, 214);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSize(prot_, &this->field214);
  xfer += prot_->serializedFieldSize("field215", apache::thrift::protocol::T_I64, 215);
  xfer += prot_->serializedSizeI64(this->field215);
  xfer += prot_->serializedFieldSize("field216", apache::thrift::protocol::T_I16, 216);
  xfer += prot_->serializedSizeI16(this->field216);
  xfer += prot_->serializedFieldSize("field217", apache::thrift::protocol::T_STRING, 217);
  xfer += prot_->serializedSizeString(this->field217);
  xfer += prot_->serializedFieldSize("field218", apache::thrift::protocol::T_FLOAT, 218);
  xfer += prot_->serializedSizeFloat(this->field218);
  xfer += prot_->serializedFieldSize("field219", apache::thrift::protocol::T_LIST, 219);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field219);
  xfer += prot_->serializedFieldSize("field220", apache::thrift::protocol::T_STRUCT, 220);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct13>::serializedSize(prot_, &this->field220);
  xfer += prot_->serializedFieldSize("field221", apache::thrift::protocol::T_STRING, 221);
  xfer += prot_->serializedSizeBinary(this->field221);
  xfer += prot_->serializedFieldSize("field222", apache::thrift::protocol::T_STRUCT, 222);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSize(prot_, &this->field222);
  xfer += prot_->serializedFieldSize("field223", apache::thrift::protocol::T_SET, 223);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field223);
  xfer += prot_->serializedFieldSize("field224", apache::thrift::protocol::T_I16, 224);
  xfer += prot_->serializedSizeI16(this->field224);
  xfer += prot_->serializedFieldSize("field225", apache::thrift::protocol::T_LIST, 225);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field225);
  xfer += prot_->serializedFieldSize("field226", apache::thrift::protocol::T_LIST, 226);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field226);
  xfer += prot_->serializedFieldSize("field227", apache::thrift::protocol::T_LIST, 227);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::vector<std::map<int64_t, int16_t>>>::serializedSize<false>(*prot_, this->field227);
  xfer += prot_->serializedFieldSize("field228", apache::thrift::protocol::T_I64, 228);
  xfer += prot_->serializedSizeI64(this->field228);
  xfer += prot_->serializedFieldSize("field229", apache::thrift::protocol::T_STRUCT, 229);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field229);
  xfer += prot_->serializedFieldSize("field230", apache::thrift::protocol::T_STRING, 230);
  xfer += prot_->serializedSizeBinary(this->field230);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct18::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct18");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::serializedSizeZC(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->serializedSizeI64(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::structure>, std::map< ::cpp2::Struct3,  ::cpp2::Struct0>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->serializedSizeI16(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_LIST, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_I32, 8);
  xfer += prot_->serializedSizeI32(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_I16, 9);
  xfer += prot_->serializedSizeI16(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_STRUCT, 10);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_FLOAT, 11);
  xfer += prot_->serializedSizeFloat(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_BYTE, 12);
  xfer += prot_->serializedSizeByte(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_SET, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_I64, 14);
  xfer += prot_->serializedSizeI64(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_I16, 15);
  xfer += prot_->serializedSizeI16(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_I16, 16);
  xfer += prot_->serializedSizeI16(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<bool, std::string>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_I32, 18);
  xfer += prot_->serializedSizeI32(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_I32, 19);
  xfer += prot_->serializedSizeI32(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_STRING, 20);
  xfer += prot_->serializedSizeZCBinary(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_SET, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_I16, 22);
  xfer += prot_->serializedSizeI16(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_STRING, 23);
  xfer += prot_->serializedSizeString(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_I32, 24);
  xfer += prot_->serializedSizeI32(this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_STRUCT, 25);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_MAP, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int16_t>>::serializedSize<false>(*prot_, this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_STRING, 27);
  xfer += prot_->serializedSizeZCBinary(this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_STRING, 28);
  xfer += prot_->serializedSizeZCBinary(this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_I32, 29);
  xfer += prot_->serializedSizeI32(this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_STRING, 30);
  xfer += prot_->serializedSizeString(this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_I64, 31);
  xfer += prot_->serializedSizeI64(this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_MAP, 32);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, bool>>::serializedSize<false>(*prot_, this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_BYTE, 33);
  xfer += prot_->serializedSizeByte(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_STRING, 34);
  xfer += prot_->serializedSizeString(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_I64, 35);
  xfer += prot_->serializedSizeI64(this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_I64, 36);
  xfer += prot_->serializedSizeI64(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_STRUCT, 37);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_LIST, 38);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_STRING, 39);
  xfer += prot_->serializedSizeZCBinary(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_MAP, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, ::apache::thrift::type_class::string>, std::map<std::vector<std::map<int8_t, int64_t>>, std::string>>::serializedSize<false>(*prot_, this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_BOOL, 41);
  xfer += prot_->serializedSizeBool(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_STRUCT, 42);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSizeZC(prot_, &this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_STRING, 43);
  xfer += prot_->serializedSizeString(this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_MAP, 44);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::string>>>, std::map<std::string, std::vector<std::vector<std::string>>>>::serializedSize<false>(*prot_, this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_I64, 45);
  xfer += prot_->serializedSizeI64(this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_MAP, 46);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int32_t>>::serializedSize<false>(*prot_, this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_SET, 47);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_SET, 48);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_STRUCT, 49);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_LIST, 50);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct3>>::serializedSize<false>(*prot_, this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_MAP, 51);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::map<int64_t, std::vector<std::string>>>::serializedSize<false>(*prot_, this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_I64, 52);
  xfer += prot_->serializedSizeI64(this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_BOOL, 53);
  xfer += prot_->serializedSizeBool(this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_SET, 54);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_STRING, 55);
  xfer += prot_->serializedSizeString(this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_SET, 56);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_STRING, 57);
  xfer += prot_->serializedSizeString(this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_DOUBLE, 58);
  xfer += prot_->serializedSizeDouble(this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_BOOL, 59);
  xfer += prot_->serializedSizeBool(this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_SET, 60);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct1>>::serializedSize<false>(*prot_, this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_SET, 61);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_SET, 62);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_SET, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_STRUCT, 64);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSizeZC(prot_, &this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_STRUCT, 65);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSizeZC(prot_, &this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_I16, 66);
  xfer += prot_->serializedSizeI16(this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_DOUBLE, 67);
  xfer += prot_->serializedSizeDouble(this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_MAP, 68);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<std::vector<int8_t>, std::set<float>>>::serializedSize<false>(*prot_, this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_LIST, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_I64, 70);
  xfer += prot_->serializedSizeI64(this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_LIST, 71);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>>, std::vector<std::map<int16_t, std::string>>>::serializedSize<false>(*prot_, this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_LIST, 72);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>>, std::vector<std::map<std::string, int8_t>>>::serializedSize<false>(*prot_, this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_BYTE, 73);
  xfer += prot_->serializedSizeByte(this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_LIST, 74);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::vector<std::set<std::string>>>::serializedSize<false>(*prot_, this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_LIST, 75);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<double>>>::serializedSize<false>(*prot_, this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_MAP, 76);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<double, std::vector<int64_t>>>::serializedSize<false>(*prot_, this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_I32, 77);
  xfer += prot_->serializedSizeI32(this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_STRING, 78);
  xfer += prot_->serializedSizeString(this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_BOOL, 79);
  xfer += prot_->serializedSizeBool(this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_SET, 80);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int64_t>>>::serializedSize<false>(*prot_, this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_DOUBLE, 81);
  xfer += prot_->serializedSizeDouble(this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_FLOAT, 82);
  xfer += prot_->serializedSizeFloat(this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_STRUCT, 83);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSizeZC(prot_, &this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_STRUCT, 84);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSizeZC(prot_, &this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_I64, 85);
  xfer += prot_->serializedSizeI64(this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_STRING, 86);
  xfer += prot_->serializedSizeZCBinary(this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_I32, 87);
  xfer += prot_->serializedSizeI32(this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_FLOAT, 88);
  xfer += prot_->serializedSizeFloat(this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_MAP, 89);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int8_t>>::serializedSize<false>(*prot_, this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_MAP, 90);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<int16_t, std::vector<float>>>::serializedSize<false>(*prot_, this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_I16, 91);
  xfer += prot_->serializedSizeI16(this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_I64, 92);
  xfer += prot_->serializedSizeI64(this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_I64, 93);
  xfer += prot_->serializedSizeI64(this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_MAP, 94);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::structure>, std::map<float,  ::cpp2::Struct5>>::serializedSize<false>(*prot_, this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_LIST, 95);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_FLOAT, 96);
  xfer += prot_->serializedSizeFloat(this->field96);
  xfer += prot_->serializedFieldSize("field97", apache::thrift::protocol::T_STRUCT, 97);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSizeZC(prot_, &this->field97);
  xfer += prot_->serializedFieldSize("field98", apache::thrift::protocol::T_MAP, 98);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::serializedSize<false>(*prot_, this->field98);
  xfer += prot_->serializedFieldSize("field99", apache::thrift::protocol::T_I16, 99);
  xfer += prot_->serializedSizeI16(this->field99);
  xfer += prot_->serializedFieldSize("field100", apache::thrift::protocol::T_MAP, 100);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::serializedSize<false>(*prot_, this->field100);
  xfer += prot_->serializedFieldSize("field101", apache::thrift::protocol::T_MAP, 101);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int64_t>>::serializedSize<false>(*prot_, this->field101);
  xfer += prot_->serializedFieldSize("field102", apache::thrift::protocol::T_I16, 102);
  xfer += prot_->serializedSizeI16(this->field102);
  xfer += prot_->serializedFieldSize("field103", apache::thrift::protocol::T_BYTE, 103);
  xfer += prot_->serializedSizeByte(this->field103);
  xfer += prot_->serializedFieldSize("field104", apache::thrift::protocol::T_SET, 104);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field104);
  xfer += prot_->serializedFieldSize("field105", apache::thrift::protocol::T_STRING, 105);
  xfer += prot_->serializedSizeString(this->field105);
  xfer += prot_->serializedFieldSize("field106", apache::thrift::protocol::T_SET, 106);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field106);
  xfer += prot_->serializedFieldSize("field107", apache::thrift::protocol::T_STRING, 107);
  xfer += prot_->serializedSizeZCBinary(this->field107);
  xfer += prot_->serializedFieldSize("field108", apache::thrift::protocol::T_STRUCT, 108);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSizeZC(prot_, &this->field108);
  xfer += prot_->serializedFieldSize("field109", apache::thrift::protocol::T_BYTE, 109);
  xfer += prot_->serializedSizeByte(this->field109);
  xfer += prot_->serializedFieldSize("field110", apache::thrift::protocol::T_SET, 110);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field110);
  xfer += prot_->serializedFieldSize("field111", apache::thrift::protocol::T_STRUCT, 111);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field111);
  xfer += prot_->serializedFieldSize("field112", apache::thrift::protocol::T_STRING, 112);
  xfer += prot_->serializedSizeString(this->field112);
  xfer += prot_->serializedFieldSize("field113", apache::thrift::protocol::T_SET, 113);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>>, std::set<std::map<std::string, int32_t>>>::serializedSize<false>(*prot_, this->field113);
  xfer += prot_->serializedFieldSize("field114", apache::thrift::protocol::T_I64, 114);
  xfer += prot_->serializedSizeI64(this->field114);
  xfer += prot_->serializedFieldSize("field115", apache::thrift::protocol::T_STRUCT, 115);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field115);
  xfer += prot_->serializedFieldSize("field116", apache::thrift::protocol::T_SET, 116);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field116);
  xfer += prot_->serializedFieldSize("field117", apache::thrift::protocol::T_FLOAT, 117);
  xfer += prot_->serializedSizeFloat(this->field117);
  xfer += prot_->serializedFieldSize("field118", apache::thrift::protocol::T_LIST, 118);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::vector<std::map<int8_t, double>>>::serializedSize<false>(*prot_, this->field118);
  xfer += prot_->serializedFieldSize("field119", apache::thrift::protocol::T_STRING, 119);
  xfer += prot_->serializedSizeString(this->field119);
  xfer += prot_->serializedFieldSize("field120", apache::thrift::protocol::T_STRING, 120);
  xfer += prot_->serializedSizeZCBinary(this->field120);
  xfer += prot_->serializedFieldSize("field121", apache::thrift::protocol::T_I64, 121);
  xfer += prot_->serializedSizeI64(this->field121);
  xfer += prot_->serializedFieldSize("field122", apache::thrift::protocol::T_SET, 122);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>>>, std::set<std::vector<std::map<float, double>>>>::serializedSize<false>(*prot_, this->field122);
  xfer += prot_->serializedFieldSize("field123", apache::thrift::protocol::T_LIST, 123);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>>, std::vector<std::map<std::string, int8_t>>>::serializedSize<false>(*prot_, this->field123);
  xfer += prot_->serializedFieldSize("field124", apache::thrift::protocol::T_SET, 124);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field124);
  xfer += prot_->serializedFieldSize("field125", apache::thrift::protocol::T_I16, 125);
  xfer += prot_->serializedSizeI16(this->field125);
  xfer += prot_->serializedFieldSize("field126", apache::thrift::protocol::T_MAP, 126);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::serializedSize<false>(*prot_, this->field126);
  xfer += prot_->serializedFieldSize("field127", apache::thrift::protocol::T_BYTE, 127);
  xfer += prot_->serializedSizeByte(this->field127);
  xfer += prot_->serializedFieldSize("field128", apache::thrift::protocol::T_I32, 128);
  xfer += prot_->serializedSizeI32(this->field128);
  xfer += prot_->serializedFieldSize("field129", apache::thrift::protocol::T_STRUCT, 129);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::serializedSizeZC(prot_, &this->field129);
  xfer += prot_->serializedFieldSize("field130", apache::thrift::protocol::T_DOUBLE, 130);
  xfer += prot_->serializedSizeDouble(this->field130);
  xfer += prot_->serializedFieldSize("field131", apache::thrift::protocol::T_BYTE, 131);
  xfer += prot_->serializedSizeByte(this->field131);
  xfer += prot_->serializedFieldSize("field132", apache::thrift::protocol::T_STRUCT, 132);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSizeZC(prot_, &this->field132);
  xfer += prot_->serializedFieldSize("field133", apache::thrift::protocol::T_I32, 133);
  xfer += prot_->serializedSizeI32(this->field133);
  xfer += prot_->serializedFieldSize("field134", apache::thrift::protocol::T_DOUBLE, 134);
  xfer += prot_->serializedSizeDouble(this->field134);
  xfer += prot_->serializedFieldSize("field135", apache::thrift::protocol::T_BYTE, 135);
  xfer += prot_->serializedSizeByte(this->field135);
  xfer += prot_->serializedFieldSize("field136", apache::thrift::protocol::T_DOUBLE, 136);
  xfer += prot_->serializedSizeDouble(this->field136);
  xfer += prot_->serializedFieldSize("field137", apache::thrift::protocol::T_STRING, 137);
  xfer += prot_->serializedSizeZCBinary(this->field137);
  xfer += prot_->serializedFieldSize("field138", apache::thrift::protocol::T_I64, 138);
  xfer += prot_->serializedSizeI64(this->field138);
  xfer += prot_->serializedFieldSize("field139", apache::thrift::protocol::T_STRING, 139);
  xfer += prot_->serializedSizeZCBinary(this->field139);
  xfer += prot_->serializedFieldSize("field140", apache::thrift::protocol::T_I64, 140);
  xfer += prot_->serializedSizeI64(this->field140);
  xfer += prot_->serializedFieldSize("field141", apache::thrift::protocol::T_FLOAT, 141);
  xfer += prot_->serializedSizeFloat(this->field141);
  xfer += prot_->serializedFieldSize("field142", apache::thrift::protocol::T_BOOL, 142);
  xfer += prot_->serializedSizeBool(this->field142);
  xfer += prot_->serializedFieldSize("field143", apache::thrift::protocol::T_I16, 143);
  xfer += prot_->serializedSizeI16(this->field143);
  xfer += prot_->serializedFieldSize("field144", apache::thrift::protocol::T_MAP, 144);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct4, int64_t>>::serializedSize<false>(*prot_, this->field144);
  xfer += prot_->serializedFieldSize("field145", apache::thrift::protocol::T_LIST, 145);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field145);
  xfer += prot_->serializedFieldSize("field146", apache::thrift::protocol::T_I16, 146);
  xfer += prot_->serializedSizeI16(this->field146);
  xfer += prot_->serializedFieldSize("field147", apache::thrift::protocol::T_STRUCT, 147);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSizeZC(prot_, &this->field147);
  xfer += prot_->serializedFieldSize("field148", apache::thrift::protocol::T_MAP, 148);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::floating_point>, std::map< ::cpp2::Struct0, double>>::serializedSize<false>(*prot_, this->field148);
  xfer += prot_->serializedFieldSize("field149", apache::thrift::protocol::T_FLOAT, 149);
  xfer += prot_->serializedSizeFloat(this->field149);
  xfer += prot_->serializedFieldSize("field150", apache::thrift::protocol::T_BOOL, 150);
  xfer += prot_->serializedSizeBool(this->field150);
  xfer += prot_->serializedFieldSize("field151", apache::thrift::protocol::T_SET, 151);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field151);
  xfer += prot_->serializedFieldSize("field152", apache::thrift::protocol::T_MAP, 152);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<int64_t, std::vector<int64_t>>>::serializedSize<false>(*prot_, this->field152);
  xfer += prot_->serializedFieldSize("field153", apache::thrift::protocol::T_BOOL, 153);
  xfer += prot_->serializedSizeBool(this->field153);
  xfer += prot_->serializedFieldSize("field154", apache::thrift::protocol::T_BYTE, 154);
  xfer += prot_->serializedSizeByte(this->field154);
  xfer += prot_->serializedFieldSize("field155", apache::thrift::protocol::T_I32, 155);
  xfer += prot_->serializedSizeI32(this->field155);
  xfer += prot_->serializedFieldSize("field156", apache::thrift::protocol::T_I16, 156);
  xfer += prot_->serializedSizeI16(this->field156);
  xfer += prot_->serializedFieldSize("field157", apache::thrift::protocol::T_STRING, 157);
  xfer += prot_->serializedSizeString(this->field157);
  xfer += prot_->serializedFieldSize("field158", apache::thrift::protocol::T_STRING, 158);
  xfer += prot_->serializedSizeZCBinary(this->field158);
  xfer += prot_->serializedFieldSize("field159", apache::thrift::protocol::T_I64, 159);
  xfer += prot_->serializedSizeI64(this->field159);
  xfer += prot_->serializedFieldSize("field160", apache::thrift::protocol::T_MAP, 160);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int8_t>>::serializedSize<false>(*prot_, this->field160);
  xfer += prot_->serializedFieldSize("field161", apache::thrift::protocol::T_STRING, 161);
  xfer += prot_->serializedSizeString(this->field161);
  xfer += prot_->serializedFieldSize("field162", apache::thrift::protocol::T_STRUCT, 162);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field162);
  xfer += prot_->serializedFieldSize("field163", apache::thrift::protocol::T_BOOL, 163);
  xfer += prot_->serializedSizeBool(this->field163);
  xfer += prot_->serializedFieldSize("field164", apache::thrift::protocol::T_I64, 164);
  xfer += prot_->serializedSizeI64(this->field164);
  xfer += prot_->serializedFieldSize("field165", apache::thrift::protocol::T_BOOL, 165);
  xfer += prot_->serializedSizeBool(this->field165);
  xfer += prot_->serializedFieldSize("field166", apache::thrift::protocol::T_SET, 166);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct6>>::serializedSize<false>(*prot_, this->field166);
  xfer += prot_->serializedFieldSize("field167", apache::thrift::protocol::T_MAP, 167);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<int16_t, std::set<float>>>::serializedSize<false>(*prot_, this->field167);
  xfer += prot_->serializedFieldSize("field168", apache::thrift::protocol::T_LIST, 168);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field168);
  xfer += prot_->serializedFieldSize("field169", apache::thrift::protocol::T_SET, 169);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field169);
  xfer += prot_->serializedFieldSize("field170", apache::thrift::protocol::T_SET, 170);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field170);
  xfer += prot_->serializedFieldSize("field171", apache::thrift::protocol::T_LIST, 171);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field171);
  xfer += prot_->serializedFieldSize("field172", apache::thrift::protocol::T_STRUCT, 172);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field172);
  xfer += prot_->serializedFieldSize("field173", apache::thrift::protocol::T_LIST, 173);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field173);
  xfer += prot_->serializedFieldSize("field174", apache::thrift::protocol::T_MAP, 174);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int32_t,  ::cpp2::Struct8>>::serializedSize<false>(*prot_, this->field174);
  xfer += prot_->serializedFieldSize("field175", apache::thrift::protocol::T_STRUCT, 175);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field175);
  xfer += prot_->serializedFieldSize("field176", apache::thrift::protocol::T_SET, 176);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field176);
  xfer += prot_->serializedFieldSize("field177", apache::thrift::protocol::T_I32, 177);
  xfer += prot_->serializedSizeI32(this->field177);
  xfer += prot_->serializedFieldSize("field178", apache::thrift::protocol::T_BYTE, 178);
  xfer += prot_->serializedSizeByte(this->field178);
  xfer += prot_->serializedFieldSize("field179", apache::thrift::protocol::T_I16, 179);
  xfer += prot_->serializedSizeI16(this->field179);
  xfer += prot_->serializedFieldSize("field180", apache::thrift::protocol::T_SET, 180);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field180);
  xfer += prot_->serializedFieldSize("field181", apache::thrift::protocol::T_STRING, 181);
  xfer += prot_->serializedSizeString(this->field181);
  xfer += prot_->serializedFieldSize("field182", apache::thrift::protocol::T_FLOAT, 182);
  xfer += prot_->serializedSizeFloat(this->field182);
  xfer += prot_->serializedFieldSize("field183", apache::thrift::protocol::T_LIST, 183);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field183);
  xfer += prot_->serializedFieldSize("field184", apache::thrift::protocol::T_BYTE, 184);
  xfer += prot_->serializedSizeByte(this->field184);
  xfer += prot_->serializedFieldSize("field185", apache::thrift::protocol::T_SET, 185);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field185);
  xfer += prot_->serializedFieldSize("field186", apache::thrift::protocol::T_BOOL, 186);
  xfer += prot_->serializedSizeBool(this->field186);
  xfer += prot_->serializedFieldSize("field187", apache::thrift::protocol::T_SET, 187);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field187);
  xfer += prot_->serializedFieldSize("field188", apache::thrift::protocol::T_STRUCT, 188);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSizeZC(prot_, &this->field188);
  xfer += prot_->serializedFieldSize("field189", apache::thrift::protocol::T_BOOL, 189);
  xfer += prot_->serializedSizeBool(this->field189);
  xfer += prot_->serializedFieldSize("field190", apache::thrift::protocol::T_STRUCT, 190);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSizeZC(prot_, &this->field190);
  xfer += prot_->serializedFieldSize("field191", apache::thrift::protocol::T_STRING, 191);
  xfer += prot_->serializedSizeZCBinary(this->field191);
  xfer += prot_->serializedFieldSize("field192", apache::thrift::protocol::T_FLOAT, 192);
  xfer += prot_->serializedSizeFloat(this->field192);
  xfer += prot_->serializedFieldSize("field193", apache::thrift::protocol::T_I32, 193);
  xfer += prot_->serializedSizeI32(this->field193);
  xfer += prot_->serializedFieldSize("field194", apache::thrift::protocol::T_FLOAT, 194);
  xfer += prot_->serializedSizeFloat(this->field194);
  xfer += prot_->serializedFieldSize("field195", apache::thrift::protocol::T_SET, 195);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field195);
  xfer += prot_->serializedFieldSize("field196", apache::thrift::protocol::T_DOUBLE, 196);
  xfer += prot_->serializedSizeDouble(this->field196);
  xfer += prot_->serializedFieldSize("field197", apache::thrift::protocol::T_STRUCT, 197);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSizeZC(prot_, &this->field197);
  xfer += prot_->serializedFieldSize("field198", apache::thrift::protocol::T_I32, 198);
  xfer += prot_->serializedSizeI32(this->field198);
  xfer += prot_->serializedFieldSize("field199", apache::thrift::protocol::T_STRUCT, 199);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct14>::serializedSizeZC(prot_, &this->field199);
  xfer += prot_->serializedFieldSize("field200", apache::thrift::protocol::T_LIST, 200);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field200);
  xfer += prot_->serializedFieldSize("field201", apache::thrift::protocol::T_LIST, 201);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field201);
  xfer += prot_->serializedFieldSize("field202", apache::thrift::protocol::T_MAP, 202);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int32_t>>::serializedSize<false>(*prot_, this->field202);
  xfer += prot_->serializedFieldSize("field203", apache::thrift::protocol::T_STRING, 203);
  xfer += prot_->serializedSizeString(this->field203);
  xfer += prot_->serializedFieldSize("field204", apache::thrift::protocol::T_MAP, 204);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int32_t>>::serializedSize<false>(*prot_, this->field204);
  xfer += prot_->serializedFieldSize("field205", apache::thrift::protocol::T_MAP, 205);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<std::string, std::vector<int32_t>>>::serializedSize<false>(*prot_, this->field205);
  xfer += prot_->serializedFieldSize("field206", apache::thrift::protocol::T_BYTE, 206);
  xfer += prot_->serializedSizeByte(this->field206);
  xfer += prot_->serializedFieldSize("field207", apache::thrift::protocol::T_SET, 207);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field207);
  xfer += prot_->serializedFieldSize("field208", apache::thrift::protocol::T_STRUCT, 208);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSizeZC(prot_, &this->field208);
  xfer += prot_->serializedFieldSize("field209", apache::thrift::protocol::T_STRING, 209);
  xfer += prot_->serializedSizeZCBinary(this->field209);
  xfer += prot_->serializedFieldSize("field210", apache::thrift::protocol::T_MAP, 210);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::serializedSize<false>(*prot_, this->field210);
  xfer += prot_->serializedFieldSize("field211", apache::thrift::protocol::T_MAP, 211);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int16_t>>::serializedSize<false>(*prot_, this->field211);
  xfer += prot_->serializedFieldSize("field212", apache::thrift::protocol::T_STRING, 212);
  xfer += prot_->serializedSizeZCBinary(this->field212);
  xfer += prot_->serializedFieldSize("field213", apache::thrift::protocol::T_BYTE, 213);
  xfer += prot_->serializedSizeByte(this->field213);
  xfer += prot_->serializedFieldSize("field214", apache::thrift::protocol::T_STRUCT, 214);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSizeZC(prot_, &this->field214);
  xfer += prot_->serializedFieldSize("field215", apache::thrift::protocol::T_I64, 215);
  xfer += prot_->serializedSizeI64(this->field215);
  xfer += prot_->serializedFieldSize("field216", apache::thrift::protocol::T_I16, 216);
  xfer += prot_->serializedSizeI16(this->field216);
  xfer += prot_->serializedFieldSize("field217", apache::thrift::protocol::T_STRING, 217);
  xfer += prot_->serializedSizeString(this->field217);
  xfer += prot_->serializedFieldSize("field218", apache::thrift::protocol::T_FLOAT, 218);
  xfer += prot_->serializedSizeFloat(this->field218);
  xfer += prot_->serializedFieldSize("field219", apache::thrift::protocol::T_LIST, 219);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field219);
  xfer += prot_->serializedFieldSize("field220", apache::thrift::protocol::T_STRUCT, 220);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct13>::serializedSizeZC(prot_, &this->field220);
  xfer += prot_->serializedFieldSize("field221", apache::thrift::protocol::T_STRING, 221);
  xfer += prot_->serializedSizeZCBinary(this->field221);
  xfer += prot_->serializedFieldSize("field222", apache::thrift::protocol::T_STRUCT, 222);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSizeZC(prot_, &this->field222);
  xfer += prot_->serializedFieldSize("field223", apache::thrift::protocol::T_SET, 223);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field223);
  xfer += prot_->serializedFieldSize("field224", apache::thrift::protocol::T_I16, 224);
  xfer += prot_->serializedSizeI16(this->field224);
  xfer += prot_->serializedFieldSize("field225", apache::thrift::protocol::T_LIST, 225);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field225);
  xfer += prot_->serializedFieldSize("field226", apache::thrift::protocol::T_LIST, 226);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field226);
  xfer += prot_->serializedFieldSize("field227", apache::thrift::protocol::T_LIST, 227);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::vector<std::map<int64_t, int16_t>>>::serializedSize<false>(*prot_, this->field227);
  xfer += prot_->serializedFieldSize("field228", apache::thrift::protocol::T_I64, 228);
  xfer += prot_->serializedSizeI64(this->field228);
  xfer += prot_->serializedFieldSize("field229", apache::thrift::protocol::T_STRUCT, 229);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field229);
  xfer += prot_->serializedFieldSize("field230", apache::thrift::protocol::T_STRING, 230);
  xfer += prot_->serializedSizeZCBinary(this->field230);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct18::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct18");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::write(prot_, &this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->writeI64(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::structure>, std::map< ::cpp2::Struct3,  ::cpp2::Struct0>>::write(*prot_, this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->writeI16(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_LIST, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_I32, 8);
  xfer += prot_->writeI32(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_I16, 9);
  xfer += prot_->writeI16(this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_STRUCT, 10);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_FLOAT, 11);
  xfer += prot_->writeFloat(this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_BYTE, 12);
  xfer += prot_->writeByte(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_SET, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_I64, 14);
  xfer += prot_->writeI64(this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_I16, 15);
  xfer += prot_->writeI16(this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_I16, 16);
  xfer += prot_->writeI16(this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<bool, std::string>>::write(*prot_, this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_I32, 18);
  xfer += prot_->writeI32(this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_I32, 19);
  xfer += prot_->writeI32(this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_STRING, 20);
  xfer += prot_->writeBinary(this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_SET, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_I16, 22);
  xfer += prot_->writeI16(this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_STRING, 23);
  xfer += prot_->writeString(this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_I32, 24);
  xfer += prot_->writeI32(this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_STRUCT, 25);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_MAP, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int16_t>>::write(*prot_, this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_STRING, 27);
  xfer += prot_->writeBinary(this->field27);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_STRING, 28);
  xfer += prot_->writeBinary(this->field28);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field29", apache::thrift::protocol::T_I32, 29);
  xfer += prot_->writeI32(this->field29);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field30", apache::thrift::protocol::T_STRING, 30);
  xfer += prot_->writeString(this->field30);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field31", apache::thrift::protocol::T_I64, 31);
  xfer += prot_->writeI64(this->field31);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field32", apache::thrift::protocol::T_MAP, 32);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, bool>>::write(*prot_, this->field32);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field33", apache::thrift::protocol::T_BYTE, 33);
  xfer += prot_->writeByte(this->field33);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field34", apache::thrift::protocol::T_STRING, 34);
  xfer += prot_->writeString(this->field34);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field35", apache::thrift::protocol::T_I64, 35);
  xfer += prot_->writeI64(this->field35);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field36", apache::thrift::protocol::T_I64, 36);
  xfer += prot_->writeI64(this->field36);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field37", apache::thrift::protocol::T_STRUCT, 37);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field37);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field38", apache::thrift::protocol::T_LIST, 38);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field38);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field39", apache::thrift::protocol::T_STRING, 39);
  xfer += prot_->writeBinary(this->field39);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field40", apache::thrift::protocol::T_MAP, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, ::apache::thrift::type_class::string>, std::map<std::vector<std::map<int8_t, int64_t>>, std::string>>::write(*prot_, this->field40);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field41", apache::thrift::protocol::T_BOOL, 41);
  xfer += prot_->writeBool(this->field41);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field42", apache::thrift::protocol::T_STRUCT, 42);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::write(prot_, &this->field42);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field43", apache::thrift::protocol::T_STRING, 43);
  xfer += prot_->writeString(this->field43);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field44", apache::thrift::protocol::T_MAP, 44);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::string>>>, std::map<std::string, std::vector<std::vector<std::string>>>>::write(*prot_, this->field44);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field45", apache::thrift::protocol::T_I64, 45);
  xfer += prot_->writeI64(this->field45);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field46", apache::thrift::protocol::T_MAP, 46);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int32_t>>::write(*prot_, this->field46);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field47", apache::thrift::protocol::T_SET, 47);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field47);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field48", apache::thrift::protocol::T_SET, 48);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field48);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field49", apache::thrift::protocol::T_STRUCT, 49);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field49);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field50", apache::thrift::protocol::T_LIST, 50);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct3>>::write(*prot_, this->field50);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field51", apache::thrift::protocol::T_MAP, 51);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::map<int64_t, std::vector<std::string>>>::write(*prot_, this->field51);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field52", apache::thrift::protocol::T_I64, 52);
  xfer += prot_->writeI64(this->field52);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field53", apache::thrift::protocol::T_BOOL, 53);
  xfer += prot_->writeBool(this->field53);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field54", apache::thrift::protocol::T_SET, 54);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field54);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field55", apache::thrift::protocol::T_STRING, 55);
  xfer += prot_->writeString(this->field55);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field56", apache::thrift::protocol::T_SET, 56);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field56);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field57", apache::thrift::protocol::T_STRING, 57);
  xfer += prot_->writeString(this->field57);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field58", apache::thrift::protocol::T_DOUBLE, 58);
  xfer += prot_->writeDouble(this->field58);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field59", apache::thrift::protocol::T_BOOL, 59);
  xfer += prot_->writeBool(this->field59);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field60", apache::thrift::protocol::T_SET, 60);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct1>>::write(*prot_, this->field60);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field61", apache::thrift::protocol::T_SET, 61);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field61);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field62", apache::thrift::protocol::T_SET, 62);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field62);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field63", apache::thrift::protocol::T_SET, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field63);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field64", apache::thrift::protocol::T_STRUCT, 64);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::write(prot_, &this->field64);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field65", apache::thrift::protocol::T_STRUCT, 65);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::write(prot_, &this->field65);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field66", apache::thrift::protocol::T_I16, 66);
  xfer += prot_->writeI16(this->field66);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field67", apache::thrift::protocol::T_DOUBLE, 67);
  xfer += prot_->writeDouble(this->field67);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field68", apache::thrift::protocol::T_MAP, 68);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<std::vector<int8_t>, std::set<float>>>::write(*prot_, this->field68);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field69", apache::thrift::protocol::T_LIST, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->field69);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field70", apache::thrift::protocol::T_I64, 70);
  xfer += prot_->writeI64(this->field70);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field71", apache::thrift::protocol::T_LIST, 71);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>>, std::vector<std::map<int16_t, std::string>>>::write(*prot_, this->field71);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field72", apache::thrift::protocol::T_LIST, 72);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>>, std::vector<std::map<std::string, int8_t>>>::write(*prot_, this->field72);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field73", apache::thrift::protocol::T_BYTE, 73);
  xfer += prot_->writeByte(this->field73);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field74", apache::thrift::protocol::T_LIST, 74);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::vector<std::set<std::string>>>::write(*prot_, this->field74);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field75", apache::thrift::protocol::T_LIST, 75);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<double>>>::write(*prot_, this->field75);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field76", apache::thrift::protocol::T_MAP, 76);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<double, std::vector<int64_t>>>::write(*prot_, this->field76);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field77", apache::thrift::protocol::T_I32, 77);
  xfer += prot_->writeI32(this->field77);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field78", apache::thrift::protocol::T_STRING, 78);
  xfer += prot_->writeString(this->field78);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field79", apache::thrift::protocol::T_BOOL, 79);
  xfer += prot_->writeBool(this->field79);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field80", apache::thrift::protocol::T_SET, 80);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int64_t>>>::write(*prot_, this->field80);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field81", apache::thrift::protocol::T_DOUBLE, 81);
  xfer += prot_->writeDouble(this->field81);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field82", apache::thrift::protocol::T_FLOAT, 82);
  xfer += prot_->writeFloat(this->field82);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field83", apache::thrift::protocol::T_STRUCT, 83);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::write(prot_, &this->field83);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field84", apache::thrift::protocol::T_STRUCT, 84);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::write(prot_, &this->field84);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field85", apache::thrift::protocol::T_I64, 85);
  xfer += prot_->writeI64(this->field85);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field86", apache::thrift::protocol::T_STRING, 86);
  xfer += prot_->writeBinary(this->field86);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field87", apache::thrift::protocol::T_I32, 87);
  xfer += prot_->writeI32(this->field87);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field88", apache::thrift::protocol::T_FLOAT, 88);
  xfer += prot_->writeFloat(this->field88);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field89", apache::thrift::protocol::T_MAP, 89);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int8_t>>::write(*prot_, this->field89);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field90", apache::thrift::protocol::T_MAP, 90);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<int16_t, std::vector<float>>>::write(*prot_, this->field90);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field91", apache::thrift::protocol::T_I16, 91);
  xfer += prot_->writeI16(this->field91);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field92", apache::thrift::protocol::T_I64, 92);
  xfer += prot_->writeI64(this->field92);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field93", apache::thrift::protocol::T_I64, 93);
  xfer += prot_->writeI64(this->field93);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field94", apache::thrift::protocol::T_MAP, 94);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::structure>, std::map<float,  ::cpp2::Struct5>>::write(*prot_, this->field94);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field95", apache::thrift::protocol::T_LIST, 95);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field95);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field96", apache::thrift::protocol::T_FLOAT, 96);
  xfer += prot_->writeFloat(this->field96);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field97", apache::thrift::protocol::T_STRUCT, 97);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::write(prot_, &this->field97);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field98", apache::thrift::protocol::T_MAP, 98);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::write(*prot_, this->field98);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field99", apache::thrift::protocol::T_I16, 99);
  xfer += prot_->writeI16(this->field99);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field100", apache::thrift::protocol::T_MAP, 100);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::write(*prot_, this->field100);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field101", apache::thrift::protocol::T_MAP, 101);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int64_t>>::write(*prot_, this->field101);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field102", apache::thrift::protocol::T_I16, 102);
  xfer += prot_->writeI16(this->field102);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field103", apache::thrift::protocol::T_BYTE, 103);
  xfer += prot_->writeByte(this->field103);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field104", apache::thrift::protocol::T_SET, 104);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field104);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field105", apache::thrift::protocol::T_STRING, 105);
  xfer += prot_->writeString(this->field105);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field106", apache::thrift::protocol::T_SET, 106);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field106);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field107", apache::thrift::protocol::T_STRING, 107);
  xfer += prot_->writeBinary(this->field107);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field108", apache::thrift::protocol::T_STRUCT, 108);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::write(prot_, &this->field108);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field109", apache::thrift::protocol::T_BYTE, 109);
  xfer += prot_->writeByte(this->field109);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field110", apache::thrift::protocol::T_SET, 110);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field110);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field111", apache::thrift::protocol::T_STRUCT, 111);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field111);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field112", apache::thrift::protocol::T_STRING, 112);
  xfer += prot_->writeString(this->field112);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field113", apache::thrift::protocol::T_SET, 113);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>>, std::set<std::map<std::string, int32_t>>>::write(*prot_, this->field113);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field114", apache::thrift::protocol::T_I64, 114);
  xfer += prot_->writeI64(this->field114);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field115", apache::thrift::protocol::T_STRUCT, 115);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field115);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field116", apache::thrift::protocol::T_SET, 116);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field116);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field117", apache::thrift::protocol::T_FLOAT, 117);
  xfer += prot_->writeFloat(this->field117);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field118", apache::thrift::protocol::T_LIST, 118);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::vector<std::map<int8_t, double>>>::write(*prot_, this->field118);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field119", apache::thrift::protocol::T_STRING, 119);
  xfer += prot_->writeString(this->field119);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field120", apache::thrift::protocol::T_STRING, 120);
  xfer += prot_->writeBinary(this->field120);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field121", apache::thrift::protocol::T_I64, 121);
  xfer += prot_->writeI64(this->field121);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field122", apache::thrift::protocol::T_SET, 122);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>>>, std::set<std::vector<std::map<float, double>>>>::write(*prot_, this->field122);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field123", apache::thrift::protocol::T_LIST, 123);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>>, std::vector<std::map<std::string, int8_t>>>::write(*prot_, this->field123);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field124", apache::thrift::protocol::T_SET, 124);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field124);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field125", apache::thrift::protocol::T_I16, 125);
  xfer += prot_->writeI16(this->field125);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field126", apache::thrift::protocol::T_MAP, 126);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::write(*prot_, this->field126);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field127", apache::thrift::protocol::T_BYTE, 127);
  xfer += prot_->writeByte(this->field127);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field128", apache::thrift::protocol::T_I32, 128);
  xfer += prot_->writeI32(this->field128);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field129", apache::thrift::protocol::T_STRUCT, 129);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::write(prot_, &this->field129);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field130", apache::thrift::protocol::T_DOUBLE, 130);
  xfer += prot_->writeDouble(this->field130);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field131", apache::thrift::protocol::T_BYTE, 131);
  xfer += prot_->writeByte(this->field131);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field132", apache::thrift::protocol::T_STRUCT, 132);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::write(prot_, &this->field132);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field133", apache::thrift::protocol::T_I32, 133);
  xfer += prot_->writeI32(this->field133);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field134", apache::thrift::protocol::T_DOUBLE, 134);
  xfer += prot_->writeDouble(this->field134);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field135", apache::thrift::protocol::T_BYTE, 135);
  xfer += prot_->writeByte(this->field135);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field136", apache::thrift::protocol::T_DOUBLE, 136);
  xfer += prot_->writeDouble(this->field136);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field137", apache::thrift::protocol::T_STRING, 137);
  xfer += prot_->writeBinary(this->field137);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field138", apache::thrift::protocol::T_I64, 138);
  xfer += prot_->writeI64(this->field138);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field139", apache::thrift::protocol::T_STRING, 139);
  xfer += prot_->writeBinary(this->field139);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field140", apache::thrift::protocol::T_I64, 140);
  xfer += prot_->writeI64(this->field140);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field141", apache::thrift::protocol::T_FLOAT, 141);
  xfer += prot_->writeFloat(this->field141);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field142", apache::thrift::protocol::T_BOOL, 142);
  xfer += prot_->writeBool(this->field142);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field143", apache::thrift::protocol::T_I16, 143);
  xfer += prot_->writeI16(this->field143);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field144", apache::thrift::protocol::T_MAP, 144);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct4, int64_t>>::write(*prot_, this->field144);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field145", apache::thrift::protocol::T_LIST, 145);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field145);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field146", apache::thrift::protocol::T_I16, 146);
  xfer += prot_->writeI16(this->field146);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field147", apache::thrift::protocol::T_STRUCT, 147);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::write(prot_, &this->field147);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field148", apache::thrift::protocol::T_MAP, 148);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::floating_point>, std::map< ::cpp2::Struct0, double>>::write(*prot_, this->field148);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field149", apache::thrift::protocol::T_FLOAT, 149);
  xfer += prot_->writeFloat(this->field149);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field150", apache::thrift::protocol::T_BOOL, 150);
  xfer += prot_->writeBool(this->field150);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field151", apache::thrift::protocol::T_SET, 151);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field151);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field152", apache::thrift::protocol::T_MAP, 152);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<int64_t, std::vector<int64_t>>>::write(*prot_, this->field152);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field153", apache::thrift::protocol::T_BOOL, 153);
  xfer += prot_->writeBool(this->field153);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field154", apache::thrift::protocol::T_BYTE, 154);
  xfer += prot_->writeByte(this->field154);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field155", apache::thrift::protocol::T_I32, 155);
  xfer += prot_->writeI32(this->field155);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field156", apache::thrift::protocol::T_I16, 156);
  xfer += prot_->writeI16(this->field156);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field157", apache::thrift::protocol::T_STRING, 157);
  xfer += prot_->writeString(this->field157);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field158", apache::thrift::protocol::T_STRING, 158);
  xfer += prot_->writeBinary(this->field158);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field159", apache::thrift::protocol::T_I64, 159);
  xfer += prot_->writeI64(this->field159);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field160", apache::thrift::protocol::T_MAP, 160);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int8_t>>::write(*prot_, this->field160);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field161", apache::thrift::protocol::T_STRING, 161);
  xfer += prot_->writeString(this->field161);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field162", apache::thrift::protocol::T_STRUCT, 162);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field162);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field163", apache::thrift::protocol::T_BOOL, 163);
  xfer += prot_->writeBool(this->field163);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field164", apache::thrift::protocol::T_I64, 164);
  xfer += prot_->writeI64(this->field164);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field165", apache::thrift::protocol::T_BOOL, 165);
  xfer += prot_->writeBool(this->field165);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field166", apache::thrift::protocol::T_SET, 166);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct6>>::write(*prot_, this->field166);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field167", apache::thrift::protocol::T_MAP, 167);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::map<int16_t, std::set<float>>>::write(*prot_, this->field167);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field168", apache::thrift::protocol::T_LIST, 168);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field168);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field169", apache::thrift::protocol::T_SET, 169);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field169);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field170", apache::thrift::protocol::T_SET, 170);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field170);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field171", apache::thrift::protocol::T_LIST, 171);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field171);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field172", apache::thrift::protocol::T_STRUCT, 172);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field172);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field173", apache::thrift::protocol::T_LIST, 173);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field173);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field174", apache::thrift::protocol::T_MAP, 174);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int32_t,  ::cpp2::Struct8>>::write(*prot_, this->field174);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field175", apache::thrift::protocol::T_STRUCT, 175);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field175);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field176", apache::thrift::protocol::T_SET, 176);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field176);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field177", apache::thrift::protocol::T_I32, 177);
  xfer += prot_->writeI32(this->field177);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field178", apache::thrift::protocol::T_BYTE, 178);
  xfer += prot_->writeByte(this->field178);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field179", apache::thrift::protocol::T_I16, 179);
  xfer += prot_->writeI16(this->field179);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field180", apache::thrift::protocol::T_SET, 180);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field180);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field181", apache::thrift::protocol::T_STRING, 181);
  xfer += prot_->writeString(this->field181);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field182", apache::thrift::protocol::T_FLOAT, 182);
  xfer += prot_->writeFloat(this->field182);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field183", apache::thrift::protocol::T_LIST, 183);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->field183);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field184", apache::thrift::protocol::T_BYTE, 184);
  xfer += prot_->writeByte(this->field184);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field185", apache::thrift::protocol::T_SET, 185);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field185);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field186", apache::thrift::protocol::T_BOOL, 186);
  xfer += prot_->writeBool(this->field186);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field187", apache::thrift::protocol::T_SET, 187);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field187);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field188", apache::thrift::protocol::T_STRUCT, 188);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::write(prot_, &this->field188);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field189", apache::thrift::protocol::T_BOOL, 189);
  xfer += prot_->writeBool(this->field189);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field190", apache::thrift::protocol::T_STRUCT, 190);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::write(prot_, &this->field190);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field191", apache::thrift::protocol::T_STRING, 191);
  xfer += prot_->writeBinary(this->field191);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field192", apache::thrift::protocol::T_FLOAT, 192);
  xfer += prot_->writeFloat(this->field192);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field193", apache::thrift::protocol::T_I32, 193);
  xfer += prot_->writeI32(this->field193);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field194", apache::thrift::protocol::T_FLOAT, 194);
  xfer += prot_->writeFloat(this->field194);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field195", apache::thrift::protocol::T_SET, 195);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field195);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field196", apache::thrift::protocol::T_DOUBLE, 196);
  xfer += prot_->writeDouble(this->field196);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field197", apache::thrift::protocol::T_STRUCT, 197);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::write(prot_, &this->field197);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field198", apache::thrift::protocol::T_I32, 198);
  xfer += prot_->writeI32(this->field198);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field199", apache::thrift::protocol::T_STRUCT, 199);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct14>::write(prot_, &this->field199);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field200", apache::thrift::protocol::T_LIST, 200);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field200);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field201", apache::thrift::protocol::T_LIST, 201);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->field201);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field202", apache::thrift::protocol::T_MAP, 202);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int32_t>>::write(*prot_, this->field202);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field203", apache::thrift::protocol::T_STRING, 203);
  xfer += prot_->writeString(this->field203);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field204", apache::thrift::protocol::T_MAP, 204);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int32_t>>::write(*prot_, this->field204);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field205", apache::thrift::protocol::T_MAP, 205);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<std::string, std::vector<int32_t>>>::write(*prot_, this->field205);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field206", apache::thrift::protocol::T_BYTE, 206);
  xfer += prot_->writeByte(this->field206);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field207", apache::thrift::protocol::T_SET, 207);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field207);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field208", apache::thrift::protocol::T_STRUCT, 208);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::write(prot_, &this->field208);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field209", apache::thrift::protocol::T_STRING, 209);
  xfer += prot_->writeBinary(this->field209);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field210", apache::thrift::protocol::T_MAP, 210);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::write(*prot_, this->field210);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field211", apache::thrift::protocol::T_MAP, 211);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<bool, int16_t>>::write(*prot_, this->field211);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field212", apache::thrift::protocol::T_STRING, 212);
  xfer += prot_->writeBinary(this->field212);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field213", apache::thrift::protocol::T_BYTE, 213);
  xfer += prot_->writeByte(this->field213);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field214", apache::thrift::protocol::T_STRUCT, 214);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::write(prot_, &this->field214);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field215", apache::thrift::protocol::T_I64, 215);
  xfer += prot_->writeI64(this->field215);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field216", apache::thrift::protocol::T_I16, 216);
  xfer += prot_->writeI16(this->field216);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field217", apache::thrift::protocol::T_STRING, 217);
  xfer += prot_->writeString(this->field217);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field218", apache::thrift::protocol::T_FLOAT, 218);
  xfer += prot_->writeFloat(this->field218);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field219", apache::thrift::protocol::T_LIST, 219);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field219);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field220", apache::thrift::protocol::T_STRUCT, 220);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct13>::write(prot_, &this->field220);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field221", apache::thrift::protocol::T_STRING, 221);
  xfer += prot_->writeBinary(this->field221);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field222", apache::thrift::protocol::T_STRUCT, 222);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::write(prot_, &this->field222);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field223", apache::thrift::protocol::T_SET, 223);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field223);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field224", apache::thrift::protocol::T_I16, 224);
  xfer += prot_->writeI16(this->field224);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field225", apache::thrift::protocol::T_LIST, 225);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field225);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field226", apache::thrift::protocol::T_LIST, 226);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field226);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field227", apache::thrift::protocol::T_LIST, 227);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::vector<std::map<int64_t, int16_t>>>::write(*prot_, this->field227);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field228", apache::thrift::protocol::T_I64, 228);
  xfer += prot_->writeI64(this->field228);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field229", apache::thrift::protocol::T_STRUCT, 229);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field229);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field230", apache::thrift::protocol::T_STRING, 230);
  xfer += prot_->writeBinary(this->field230);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace cpp2 {

template <class Protocol_>
uint32_t Struct19::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field2 = std::map<std::string, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field3 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field6 = std::map<double, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, bool>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field7 = std::map<std::string, std::set<int16_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<std::string, std::set<int16_t>>>::read(*iprot, this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field10 = std::vector<std::set<std::vector<int32_t>>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>>, std::vector<std::set<std::vector<int32_t>>>>::read(*iprot, this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field12 = std::map<int32_t, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, bool>>::read(*iprot, this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::read(iprot, &this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field16 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field17 = std::map<std::vector<std::vector<std::string>>, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, ::apache::thrift::type_class::integral>, std::map<std::vector<std::vector<std::string>>, int8_t>>::read(*iprot, this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field18 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field19 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field21 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field22 = std::set<std::set<double>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<double>>>::read(*iprot, this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field27);
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field28);
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field29);
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 30:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field30);
          this->__isset.field30 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 31:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field31);
          this->__isset.field31 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 32:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field32);
          this->__isset.field32 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 33:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field33 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field33);
          this->__isset.field33 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 34:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field34 = std::set<std::vector<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::set<std::vector<std::string>>>::read(*iprot, this->field34);
          this->__isset.field34 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 35:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field35);
          this->__isset.field35 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 36:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field36 = std::map<float, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int8_t>>::read(*iprot, this->field36);
          this->__isset.field36 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 37:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field37 = std::map<std::string, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::read(*iprot, this->field37);
          this->__isset.field37 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 38:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field38);
          this->__isset.field38 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 39:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field39 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field39);
          this->__isset.field39 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 40:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field40);
          this->__isset.field40 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 41:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field41 = std::vector<std::vector<int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int32_t>>>::read(*iprot, this->field41);
          this->__isset.field41 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 42:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field42);
          this->__isset.field42 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 43:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field43 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field43);
          this->__isset.field43 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 44:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field44);
          this->__isset.field44 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 45:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field45 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field45);
          this->__isset.field45 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 46:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field46);
          this->__isset.field46 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 47:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field47);
          this->__isset.field47 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 48:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field48);
          this->__isset.field48 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 49:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field49);
          this->__isset.field49 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 50:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field50 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field50);
          this->__isset.field50 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 51:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field51);
          this->__isset.field51 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 52:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field52);
          this->__isset.field52 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 53:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field53);
          this->__isset.field53 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 54:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field54);
          this->__isset.field54 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 55:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field55);
          this->__isset.field55 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 56:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field56 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field56);
          this->__isset.field56 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 57:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field57);
          this->__isset.field57 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 58:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field58 = std::set<std::vector<bool>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<bool>>>::read(*iprot, this->field58);
          this->__isset.field58 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 59:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field59 = std::vector<std::vector<bool>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<bool>>>::read(*iprot, this->field59);
          this->__isset.field59 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 60:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field60 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field60);
          this->__isset.field60 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 61:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field61 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field61);
          this->__isset.field61 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 62:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field62);
          this->__isset.field62 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 63:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field63);
          this->__isset.field63 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 64:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field64 = std::map<int8_t, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::read(*iprot, this->field64);
          this->__isset.field64 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 65:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field65);
          this->__isset.field65 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 66:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field66);
          this->__isset.field66 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 67:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field67);
          this->__isset.field67 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 68:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field68);
          this->__isset.field68 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 69:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field69);
          this->__isset.field69 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 70:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field70);
          this->__isset.field70 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 71:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::read(iprot, &this->field71);
          this->__isset.field71 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 72:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field72);
          this->__isset.field72 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 73:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field73 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field73);
          this->__isset.field73 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 74:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field74 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field74);
          this->__isset.field74 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 75:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field75 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field75);
          this->__isset.field75 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 76:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field76 = std::map<std::vector<double>,  ::cpp2::Struct2>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::structure>, std::map<std::vector<double>,  ::cpp2::Struct2>>::read(*iprot, this->field76);
          this->__isset.field76 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 77:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field77);
          this->__isset.field77 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 78:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field78);
          this->__isset.field78 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 79:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field79 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field79);
          this->__isset.field79 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 80:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field80);
          this->__isset.field80 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 81:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field81);
          this->__isset.field81 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 82:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field82);
          this->__isset.field82 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 83:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::read(iprot, &this->field83);
          this->__isset.field83 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 84:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field84);
          this->__isset.field84 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct19::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct19");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_BOOL, 1);
  xfer += prot_->serializedSizeBool(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I64, 4);
  xfer += prot_->serializedSizeI64(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_BOOL, 5);
  xfer += prot_->serializedSizeBool(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, bool>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<std::string, std::set<int16_t>>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_FLOAT, 9);
  xfer += prot_->serializedSizeFloat(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_LIST, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>>, std::vector<std::set<std::vector<int32_t>>>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_BOOL, 11);
  xfer += prot_->serializedSizeBool(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_MAP, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, bool>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_BOOL, 13);
  xfer += prot_->serializedSizeBool(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_BYTE, 14);
  xfer += prot_->serializedSizeByte(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_STRUCT, 15);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSize(prot_, &this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_LIST, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, ::apache::thrift::type_class::integral>, std::map<std::vector<std::vector<std::string>>, int8_t>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_SET, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_SET, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_STRING, 20);
  xfer += prot_->serializedSizeBinary(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_LIST, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_SET, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<double>>>::serializedSize<false>(*prot_, this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_STRING, 23);
  xfer += prot_->serializedSizeString(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_STRING, 24);
  xfer += prot_->serializedSizeString(this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_DOUBLE, 25);
  xfer += prot_->serializedSizeDouble(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_BOOL, 26);
  xfer += prot_->serializedSizeBool(this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_STRING, 27);
  xfer += prot_->serializedSizeString(this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_STRING, 28);
  xfer += prot_->serializedSizeString(this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_BOOL, 29);
  xfer += prot_->serializedSizeBool(this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_STRING, 30);
  xfer += prot_->serializedSizeBinary(this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_DOUBLE, 31);
  xfer += prot_->serializedSizeDouble(this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_BYTE, 32);
  xfer += prot_->serializedSizeByte(this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_LIST, 33);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_SET, 34);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::set<std::vector<std::string>>>::serializedSize<false>(*prot_, this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_I16, 35);
  xfer += prot_->serializedSizeI16(this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_MAP, 36);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int8_t>>::serializedSize<false>(*prot_, this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_MAP, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::serializedSize<false>(*prot_, this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_I16, 38);
  xfer += prot_->serializedSizeI16(this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_SET, 39);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_STRING, 40);
  xfer += prot_->serializedSizeString(this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_LIST, 41);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int32_t>>>::serializedSize<false>(*prot_, this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_BOOL, 42);
  xfer += prot_->serializedSizeBool(this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_SET, 43);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_STRING, 44);
  xfer += prot_->serializedSizeString(this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_SET, 45);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_I32, 46);
  xfer += prot_->serializedSizeI32(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_STRING, 47);
  xfer += prot_->serializedSizeString(this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_BOOL, 48);
  xfer += prot_->serializedSizeBool(this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_BOOL, 49);
  xfer += prot_->serializedSizeBool(this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_LIST, 50);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_STRING, 51);
  xfer += prot_->serializedSizeBinary(this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_I64, 52);
  xfer += prot_->serializedSizeI64(this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_BOOL, 53);
  xfer += prot_->serializedSizeBool(this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_BOOL, 54);
  xfer += prot_->serializedSizeBool(this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_BYTE, 55);
  xfer += prot_->serializedSizeByte(this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_SET, 56);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_BYTE, 57);
  xfer += prot_->serializedSizeByte(this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_SET, 58);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<bool>>>::serializedSize<false>(*prot_, this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_LIST, 59);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<bool>>>::serializedSize<false>(*prot_, this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_SET, 60);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_SET, 61);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_BOOL, 62);
  xfer += prot_->serializedSizeBool(this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_DOUBLE, 63);
  xfer += prot_->serializedSizeDouble(this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_MAP, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::serializedSize<false>(*prot_, this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_I64, 65);
  xfer += prot_->serializedSizeI64(this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_FLOAT, 66);
  xfer += prot_->serializedSizeFloat(this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_STRUCT, 67);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_I64, 68);
  xfer += prot_->serializedSizeI64(this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_I16, 69);
  xfer += prot_->serializedSizeI16(this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_DOUBLE, 70);
  xfer += prot_->serializedSizeDouble(this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_STRUCT, 71);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSize(prot_, &this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_I32, 72);
  xfer += prot_->serializedSizeI32(this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_SET, 73);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_SET, 74);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_SET, 75);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_MAP, 76);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::structure>, std::map<std::vector<double>,  ::cpp2::Struct2>>::serializedSize<false>(*prot_, this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_STRING, 77);
  xfer += prot_->serializedSizeString(this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_BYTE, 78);
  xfer += prot_->serializedSizeByte(this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_LIST, 79);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_STRING, 80);
  xfer += prot_->serializedSizeString(this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_DOUBLE, 81);
  xfer += prot_->serializedSizeDouble(this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_STRING, 82);
  xfer += prot_->serializedSizeString(this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_STRUCT, 83);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSize(prot_, &this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_I16, 84);
  xfer += prot_->serializedSizeI16(this->field84);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct19::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct19");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_BOOL, 1);
  xfer += prot_->serializedSizeBool(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I64, 4);
  xfer += prot_->serializedSizeI64(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_BOOL, 5);
  xfer += prot_->serializedSizeBool(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, bool>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<std::string, std::set<int16_t>>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_FLOAT, 9);
  xfer += prot_->serializedSizeFloat(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_LIST, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>>, std::vector<std::set<std::vector<int32_t>>>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_BOOL, 11);
  xfer += prot_->serializedSizeBool(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_MAP, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, bool>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_BOOL, 13);
  xfer += prot_->serializedSizeBool(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_BYTE, 14);
  xfer += prot_->serializedSizeByte(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_STRUCT, 15);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSizeZC(prot_, &this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_LIST, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, ::apache::thrift::type_class::integral>, std::map<std::vector<std::vector<std::string>>, int8_t>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_SET, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_SET, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_STRING, 20);
  xfer += prot_->serializedSizeZCBinary(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_LIST, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_SET, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<double>>>::serializedSize<false>(*prot_, this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_STRING, 23);
  xfer += prot_->serializedSizeString(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_STRING, 24);
  xfer += prot_->serializedSizeString(this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_DOUBLE, 25);
  xfer += prot_->serializedSizeDouble(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_BOOL, 26);
  xfer += prot_->serializedSizeBool(this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_STRING, 27);
  xfer += prot_->serializedSizeString(this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_STRING, 28);
  xfer += prot_->serializedSizeString(this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_BOOL, 29);
  xfer += prot_->serializedSizeBool(this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_STRING, 30);
  xfer += prot_->serializedSizeZCBinary(this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_DOUBLE, 31);
  xfer += prot_->serializedSizeDouble(this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_BYTE, 32);
  xfer += prot_->serializedSizeByte(this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_LIST, 33);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_SET, 34);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::set<std::vector<std::string>>>::serializedSize<false>(*prot_, this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_I16, 35);
  xfer += prot_->serializedSizeI16(this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_MAP, 36);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int8_t>>::serializedSize<false>(*prot_, this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_MAP, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::serializedSize<false>(*prot_, this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_I16, 38);
  xfer += prot_->serializedSizeI16(this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_SET, 39);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_STRING, 40);
  xfer += prot_->serializedSizeString(this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_LIST, 41);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int32_t>>>::serializedSize<false>(*prot_, this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_BOOL, 42);
  xfer += prot_->serializedSizeBool(this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_SET, 43);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_STRING, 44);
  xfer += prot_->serializedSizeString(this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_SET, 45);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_I32, 46);
  xfer += prot_->serializedSizeI32(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_STRING, 47);
  xfer += prot_->serializedSizeString(this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_BOOL, 48);
  xfer += prot_->serializedSizeBool(this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_BOOL, 49);
  xfer += prot_->serializedSizeBool(this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_LIST, 50);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_STRING, 51);
  xfer += prot_->serializedSizeZCBinary(this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_I64, 52);
  xfer += prot_->serializedSizeI64(this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_BOOL, 53);
  xfer += prot_->serializedSizeBool(this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_BOOL, 54);
  xfer += prot_->serializedSizeBool(this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_BYTE, 55);
  xfer += prot_->serializedSizeByte(this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_SET, 56);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_BYTE, 57);
  xfer += prot_->serializedSizeByte(this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_SET, 58);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<bool>>>::serializedSize<false>(*prot_, this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_LIST, 59);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<bool>>>::serializedSize<false>(*prot_, this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_SET, 60);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_SET, 61);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_BOOL, 62);
  xfer += prot_->serializedSizeBool(this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_DOUBLE, 63);
  xfer += prot_->serializedSizeDouble(this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_MAP, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::serializedSize<false>(*prot_, this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_I64, 65);
  xfer += prot_->serializedSizeI64(this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_FLOAT, 66);
  xfer += prot_->serializedSizeFloat(this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_STRUCT, 67);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_I64, 68);
  xfer += prot_->serializedSizeI64(this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_I16, 69);
  xfer += prot_->serializedSizeI16(this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_DOUBLE, 70);
  xfer += prot_->serializedSizeDouble(this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_STRUCT, 71);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSizeZC(prot_, &this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_I32, 72);
  xfer += prot_->serializedSizeI32(this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_SET, 73);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_SET, 74);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_SET, 75);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_MAP, 76);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::structure>, std::map<std::vector<double>,  ::cpp2::Struct2>>::serializedSize<false>(*prot_, this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_STRING, 77);
  xfer += prot_->serializedSizeString(this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_BYTE, 78);
  xfer += prot_->serializedSizeByte(this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_LIST, 79);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_STRING, 80);
  xfer += prot_->serializedSizeString(this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_DOUBLE, 81);
  xfer += prot_->serializedSizeDouble(this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_STRING, 82);
  xfer += prot_->serializedSizeString(this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_STRUCT, 83);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSizeZC(prot_, &this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_I16, 84);
  xfer += prot_->serializedSizeI16(this->field84);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct19::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct19");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_BOOL, 1);
  xfer += prot_->writeBool(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_I64, 4);
  xfer += prot_->writeI64(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_BOOL, 5);
  xfer += prot_->writeBool(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_MAP, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, bool>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<std::string, std::set<int16_t>>>::write(*prot_, this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_FLOAT, 9);
  xfer += prot_->writeFloat(this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_LIST, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>>, std::vector<std::set<std::vector<int32_t>>>>::write(*prot_, this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_BOOL, 11);
  xfer += prot_->writeBool(this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_MAP, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, bool>>::write(*prot_, this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_BOOL, 13);
  xfer += prot_->writeBool(this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_BYTE, 14);
  xfer += prot_->writeByte(this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_STRUCT, 15);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::write(prot_, &this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_LIST, 16);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, ::apache::thrift::type_class::integral>, std::map<std::vector<std::vector<std::string>>, int8_t>>::write(*prot_, this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_SET, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_SET, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_STRING, 20);
  xfer += prot_->writeBinary(this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_LIST, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_SET, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<double>>>::write(*prot_, this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_STRING, 23);
  xfer += prot_->writeString(this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_STRING, 24);
  xfer += prot_->writeString(this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_DOUBLE, 25);
  xfer += prot_->writeDouble(this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_BOOL, 26);
  xfer += prot_->writeBool(this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_STRING, 27);
  xfer += prot_->writeString(this->field27);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_STRING, 28);
  xfer += prot_->writeString(this->field28);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field29", apache::thrift::protocol::T_BOOL, 29);
  xfer += prot_->writeBool(this->field29);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field30", apache::thrift::protocol::T_STRING, 30);
  xfer += prot_->writeBinary(this->field30);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field31", apache::thrift::protocol::T_DOUBLE, 31);
  xfer += prot_->writeDouble(this->field31);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field32", apache::thrift::protocol::T_BYTE, 32);
  xfer += prot_->writeByte(this->field32);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field33", apache::thrift::protocol::T_LIST, 33);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field33);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field34", apache::thrift::protocol::T_SET, 34);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::set<std::vector<std::string>>>::write(*prot_, this->field34);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field35", apache::thrift::protocol::T_I16, 35);
  xfer += prot_->writeI16(this->field35);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field36", apache::thrift::protocol::T_MAP, 36);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int8_t>>::write(*prot_, this->field36);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field37", apache::thrift::protocol::T_MAP, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int32_t>>::write(*prot_, this->field37);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field38", apache::thrift::protocol::T_I16, 38);
  xfer += prot_->writeI16(this->field38);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field39", apache::thrift::protocol::T_SET, 39);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field39);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field40", apache::thrift::protocol::T_STRING, 40);
  xfer += prot_->writeString(this->field40);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field41", apache::thrift::protocol::T_LIST, 41);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int32_t>>>::write(*prot_, this->field41);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field42", apache::thrift::protocol::T_BOOL, 42);
  xfer += prot_->writeBool(this->field42);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field43", apache::thrift::protocol::T_SET, 43);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field43);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field44", apache::thrift::protocol::T_STRING, 44);
  xfer += prot_->writeString(this->field44);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field45", apache::thrift::protocol::T_SET, 45);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field45);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field46", apache::thrift::protocol::T_I32, 46);
  xfer += prot_->writeI32(this->field46);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field47", apache::thrift::protocol::T_STRING, 47);
  xfer += prot_->writeString(this->field47);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field48", apache::thrift::protocol::T_BOOL, 48);
  xfer += prot_->writeBool(this->field48);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field49", apache::thrift::protocol::T_BOOL, 49);
  xfer += prot_->writeBool(this->field49);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field50", apache::thrift::protocol::T_LIST, 50);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field50);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field51", apache::thrift::protocol::T_STRING, 51);
  xfer += prot_->writeBinary(this->field51);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field52", apache::thrift::protocol::T_I64, 52);
  xfer += prot_->writeI64(this->field52);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field53", apache::thrift::protocol::T_BOOL, 53);
  xfer += prot_->writeBool(this->field53);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field54", apache::thrift::protocol::T_BOOL, 54);
  xfer += prot_->writeBool(this->field54);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field55", apache::thrift::protocol::T_BYTE, 55);
  xfer += prot_->writeByte(this->field55);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field56", apache::thrift::protocol::T_SET, 56);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field56);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field57", apache::thrift::protocol::T_BYTE, 57);
  xfer += prot_->writeByte(this->field57);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field58", apache::thrift::protocol::T_SET, 58);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<bool>>>::write(*prot_, this->field58);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field59", apache::thrift::protocol::T_LIST, 59);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<bool>>>::write(*prot_, this->field59);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field60", apache::thrift::protocol::T_SET, 60);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field60);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field61", apache::thrift::protocol::T_SET, 61);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field61);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field62", apache::thrift::protocol::T_BOOL, 62);
  xfer += prot_->writeBool(this->field62);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field63", apache::thrift::protocol::T_DOUBLE, 63);
  xfer += prot_->writeDouble(this->field63);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field64", apache::thrift::protocol::T_MAP, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::write(*prot_, this->field64);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field65", apache::thrift::protocol::T_I64, 65);
  xfer += prot_->writeI64(this->field65);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field66", apache::thrift::protocol::T_FLOAT, 66);
  xfer += prot_->writeFloat(this->field66);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field67", apache::thrift::protocol::T_STRUCT, 67);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field67);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field68", apache::thrift::protocol::T_I64, 68);
  xfer += prot_->writeI64(this->field68);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field69", apache::thrift::protocol::T_I16, 69);
  xfer += prot_->writeI16(this->field69);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field70", apache::thrift::protocol::T_DOUBLE, 70);
  xfer += prot_->writeDouble(this->field70);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field71", apache::thrift::protocol::T_STRUCT, 71);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::write(prot_, &this->field71);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field72", apache::thrift::protocol::T_I32, 72);
  xfer += prot_->writeI32(this->field72);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field73", apache::thrift::protocol::T_SET, 73);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field73);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field74", apache::thrift::protocol::T_SET, 74);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field74);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field75", apache::thrift::protocol::T_SET, 75);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field75);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field76", apache::thrift::protocol::T_MAP, 76);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::structure>, std::map<std::vector<double>,  ::cpp2::Struct2>>::write(*prot_, this->field76);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field77", apache::thrift::protocol::T_STRING, 77);
  xfer += prot_->writeString(this->field77);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field78", apache::thrift::protocol::T_BYTE, 78);
  xfer += prot_->writeByte(this->field78);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field79", apache::thrift::protocol::T_LIST, 79);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field79);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field80", apache::thrift::protocol::T_STRING, 80);
  xfer += prot_->writeString(this->field80);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field81", apache::thrift::protocol::T_DOUBLE, 81);
  xfer += prot_->writeDouble(this->field81);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field82", apache::thrift::protocol::T_STRING, 82);
  xfer += prot_->writeString(this->field82);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field83", apache::thrift::protocol::T_STRUCT, 83);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::write(prot_, &this->field83);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field84", apache::thrift::protocol::T_I16, 84);
  xfer += prot_->writeI16(this->field84);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace cpp2 {

template <class Protocol_>
uint32_t Struct20::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field2 = std::set< ::cpp2::Struct13>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct13>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field8 = std::vector<std::map<float, int16_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::vector<std::map<float, int16_t>>>::read(*iprot, this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::read(iprot, &this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field12 = std::set< ::cpp2::Struct6>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct6>>::read(*iprot, this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field13 = std::map<std::vector<bool>, std::vector<bool>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<std::vector<bool>, std::vector<bool>>>::read(*iprot, this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field17 = std::set< ::cpp2::Struct3>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct3>>::read(*iprot, this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field20 = std::set<std::vector<int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int32_t>>>::read(*iprot, this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field21 = std::map<int8_t, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int8_t>>::read(*iprot, this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct14>::read(iprot, &this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field26 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::read(iprot, &this->field27);
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field28);
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field29 = std::map<int16_t, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int64_t>>::read(*iprot, this->field29);
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 30:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field30 = std::set<std::set<std::vector<int8_t>>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>>, std::set<std::set<std::vector<int8_t>>>>::read(*iprot, this->field30);
          this->__isset.field30 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 31:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::read(iprot, &this->field31);
          this->__isset.field31 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 32:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field32 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field32);
          this->__isset.field32 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 33:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field33 = std::map<int16_t, double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int16_t, double>>::read(*iprot, this->field33);
          this->__isset.field33 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 34:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field34);
          this->__isset.field34 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 35:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field35);
          this->__isset.field35 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 36:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field36 = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->field36);
          this->__isset.field36 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 37:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field37 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field37);
          this->__isset.field37 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 38:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field38);
          this->__isset.field38 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 39:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field39 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field39);
          this->__isset.field39 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 40:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field40 = std::set<std::map<bool, std::set<std::string>>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::string>>>, std::set<std::map<bool, std::set<std::string>>>>::read(*iprot, this->field40);
          this->__isset.field40 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 41:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct13>::read(iprot, &this->field41);
          this->__isset.field41 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 42:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field42 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field42);
          this->__isset.field42 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 43:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field43 = std::vector<std::vector<bool>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<bool>>>::read(*iprot, this->field43);
          this->__isset.field43 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 44:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field44);
          this->__isset.field44 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 45:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field45);
          this->__isset.field45 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 46:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field46);
          this->__isset.field46 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 47:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field47);
          this->__isset.field47 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 48:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field48);
          this->__isset.field48 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 49:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::read(iprot, &this->field49);
          this->__isset.field49 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 50:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field50);
          this->__isset.field50 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 51:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field51);
          this->__isset.field51 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 52:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field52 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field52);
          this->__isset.field52 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 53:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field53);
          this->__isset.field53 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 54:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field54);
          this->__isset.field54 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 55:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field55);
          this->__isset.field55 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 56:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field56);
          this->__isset.field56 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 57:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field57 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field57);
          this->__isset.field57 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 58:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field58);
          this->__isset.field58 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 59:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field59);
          this->__isset.field59 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 60:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::read(iprot, &this->field60);
          this->__isset.field60 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 61:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field61);
          this->__isset.field61 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 62:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field62 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field62);
          this->__isset.field62 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 63:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field63);
          this->__isset.field63 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 64:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field64 = std::vector< ::cpp2::Struct8>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct8>>::read(*iprot, this->field64);
          this->__isset.field64 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 65:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field65);
          this->__isset.field65 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 66:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field66);
          this->__isset.field66 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 67:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field67);
          this->__isset.field67 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 68:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field68 = std::map<float, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, std::map<float, std::string>>::read(*iprot, this->field68);
          this->__isset.field68 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 69:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field69 = std::vector<std::vector<int64_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int64_t>>>::read(*iprot, this->field69);
          this->__isset.field69 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 70:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field70);
          this->__isset.field70 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 71:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::read(iprot, &this->field71);
          this->__isset.field71 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 72:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field72);
          this->__isset.field72 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 73:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field73);
          this->__isset.field73 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 74:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field74 = std::set<std::vector<float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::set<std::vector<float>>>::read(*iprot, this->field74);
          this->__isset.field74 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 75:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field75 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field75);
          this->__isset.field75 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 76:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field76 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field76);
          this->__isset.field76 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 77:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field77 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field77);
          this->__isset.field77 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 78:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::read(iprot, &this->field78);
          this->__isset.field78 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 79:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field79 = std::map<std::vector<int16_t>,  ::cpp2::Struct6>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::structure>, std::map<std::vector<int16_t>,  ::cpp2::Struct6>>::read(*iprot, this->field79);
          this->__isset.field79 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 80:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field80 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field80);
          this->__isset.field80 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 81:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field81 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field81);
          this->__isset.field81 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 82:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field82);
          this->__isset.field82 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct20::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct20");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct13>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_FLOAT, 3);
  xfer += prot_->serializedSizeFloat(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->serializedSizeByte(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->serializedSizeI32(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_STRING, 6);
  xfer += prot_->serializedSizeString(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_I32, 7);
  xfer += prot_->serializedSizeI32(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::vector<std::map<float, int16_t>>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSize(prot_, &this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_BOOL, 10);
  xfer += prot_->serializedSizeBool(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_BYTE, 11);
  xfer += prot_->serializedSizeByte(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_SET, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct6>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_MAP, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<std::vector<bool>, std::vector<bool>>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_BOOL, 14);
  xfer += prot_->serializedSizeBool(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_BOOL, 15);
  xfer += prot_->serializedSizeBool(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_I16, 16);
  xfer += prot_->serializedSizeI16(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_SET, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct3>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_I64, 18);
  xfer += prot_->serializedSizeI64(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_DOUBLE, 19);
  xfer += prot_->serializedSizeDouble(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_SET, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int32_t>>>::serializedSize<false>(*prot_, this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_MAP, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int8_t>>::serializedSize<false>(*prot_, this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_DOUBLE, 22);
  xfer += prot_->serializedSizeDouble(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_STRING, 23);
  xfer += prot_->serializedSizeBinary(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_STRUCT, 24);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct14>::serializedSize(prot_, &this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_STRING, 25);
  xfer += prot_->serializedSizeString(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_SET, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_STRUCT, 27);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSize(prot_, &this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_BYTE, 28);
  xfer += prot_->serializedSizeByte(this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_MAP, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int64_t>>::serializedSize<false>(*prot_, this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_SET, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>>, std::set<std::set<std::vector<int8_t>>>>::serializedSize<false>(*prot_, this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_STRUCT, 31);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::serializedSize(prot_, &this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_LIST, 32);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_MAP, 33);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int16_t, double>>::serializedSize<false>(*prot_, this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_I32, 34);
  xfer += prot_->serializedSizeI32(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_FLOAT, 35);
  xfer += prot_->serializedSizeFloat(this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_LIST, 36);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_SET, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_STRING, 38);
  xfer += prot_->serializedSizeBinary(this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_LIST, 39);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_SET, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::string>>>, std::set<std::map<bool, std::set<std::string>>>>::serializedSize<false>(*prot_, this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_STRUCT, 41);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct13>::serializedSize(prot_, &this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_LIST, 42);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_LIST, 43);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<bool>>>::serializedSize<false>(*prot_, this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_I32, 44);
  xfer += prot_->serializedSizeI32(this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_I64, 45);
  xfer += prot_->serializedSizeI64(this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_DOUBLE, 46);
  xfer += prot_->serializedSizeDouble(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_I64, 47);
  xfer += prot_->serializedSizeI64(this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_I16, 48);
  xfer += prot_->serializedSizeI16(this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_STRUCT, 49);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSize(prot_, &this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_DOUBLE, 50);
  xfer += prot_->serializedSizeDouble(this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_STRUCT, 51);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_SET, 52);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_STRING, 53);
  xfer += prot_->serializedSizeString(this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_FLOAT, 54);
  xfer += prot_->serializedSizeFloat(this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_FLOAT, 55);
  xfer += prot_->serializedSizeFloat(this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_I32, 56);
  xfer += prot_->serializedSizeI32(this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_SET, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_BYTE, 58);
  xfer += prot_->serializedSizeByte(this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_I32, 59);
  xfer += prot_->serializedSizeI32(this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_STRUCT, 60);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSize(prot_, &this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_STRUCT, 61);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_SET, 62);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_FLOAT, 63);
  xfer += prot_->serializedSizeFloat(this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_LIST, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct8>>::serializedSize<false>(*prot_, this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_I32, 65);
  xfer += prot_->serializedSizeI32(this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_STRING, 66);
  xfer += prot_->serializedSizeBinary(this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_DOUBLE, 67);
  xfer += prot_->serializedSizeDouble(this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_MAP, 68);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, std::map<float, std::string>>::serializedSize<false>(*prot_, this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_LIST, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int64_t>>>::serializedSize<false>(*prot_, this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_STRUCT, 70);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_STRUCT, 71);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::serializedSize(prot_, &this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_DOUBLE, 72);
  xfer += prot_->serializedSizeDouble(this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_STRING, 73);
  xfer += prot_->serializedSizeString(this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_SET, 74);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::set<std::vector<float>>>::serializedSize<false>(*prot_, this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_SET, 75);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_LIST, 76);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_SET, 77);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_STRUCT, 78);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSize(prot_, &this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_MAP, 79);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::structure>, std::map<std::vector<int16_t>,  ::cpp2::Struct6>>::serializedSize<false>(*prot_, this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_SET, 80);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_SET, 81);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_I64, 82);
  xfer += prot_->serializedSizeI64(this->field82);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct20::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct20");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct13>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_FLOAT, 3);
  xfer += prot_->serializedSizeFloat(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->serializedSizeByte(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->serializedSizeI32(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_STRING, 6);
  xfer += prot_->serializedSizeString(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_I32, 7);
  xfer += prot_->serializedSizeI32(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::vector<std::map<float, int16_t>>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSizeZC(prot_, &this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_BOOL, 10);
  xfer += prot_->serializedSizeBool(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_BYTE, 11);
  xfer += prot_->serializedSizeByte(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_SET, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct6>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_MAP, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<std::vector<bool>, std::vector<bool>>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_BOOL, 14);
  xfer += prot_->serializedSizeBool(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_BOOL, 15);
  xfer += prot_->serializedSizeBool(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_I16, 16);
  xfer += prot_->serializedSizeI16(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_SET, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct3>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_I64, 18);
  xfer += prot_->serializedSizeI64(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_DOUBLE, 19);
  xfer += prot_->serializedSizeDouble(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_SET, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int32_t>>>::serializedSize<false>(*prot_, this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_MAP, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int8_t>>::serializedSize<false>(*prot_, this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_DOUBLE, 22);
  xfer += prot_->serializedSizeDouble(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_STRING, 23);
  xfer += prot_->serializedSizeZCBinary(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_STRUCT, 24);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct14>::serializedSizeZC(prot_, &this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_STRING, 25);
  xfer += prot_->serializedSizeString(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_SET, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_STRUCT, 27);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSizeZC(prot_, &this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_BYTE, 28);
  xfer += prot_->serializedSizeByte(this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_MAP, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int64_t>>::serializedSize<false>(*prot_, this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_SET, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>>, std::set<std::set<std::vector<int8_t>>>>::serializedSize<false>(*prot_, this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_STRUCT, 31);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::serializedSizeZC(prot_, &this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_LIST, 32);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_MAP, 33);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int16_t, double>>::serializedSize<false>(*prot_, this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_I32, 34);
  xfer += prot_->serializedSizeI32(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_FLOAT, 35);
  xfer += prot_->serializedSizeFloat(this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_LIST, 36);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_SET, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_STRING, 38);
  xfer += prot_->serializedSizeZCBinary(this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_LIST, 39);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_SET, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::string>>>, std::set<std::map<bool, std::set<std::string>>>>::serializedSize<false>(*prot_, this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_STRUCT, 41);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct13>::serializedSizeZC(prot_, &this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_LIST, 42);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_LIST, 43);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<bool>>>::serializedSize<false>(*prot_, this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_I32, 44);
  xfer += prot_->serializedSizeI32(this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_I64, 45);
  xfer += prot_->serializedSizeI64(this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_DOUBLE, 46);
  xfer += prot_->serializedSizeDouble(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_I64, 47);
  xfer += prot_->serializedSizeI64(this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_I16, 48);
  xfer += prot_->serializedSizeI16(this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_STRUCT, 49);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSizeZC(prot_, &this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_DOUBLE, 50);
  xfer += prot_->serializedSizeDouble(this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_STRUCT, 51);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_SET, 52);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_STRING, 53);
  xfer += prot_->serializedSizeString(this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_FLOAT, 54);
  xfer += prot_->serializedSizeFloat(this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_FLOAT, 55);
  xfer += prot_->serializedSizeFloat(this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_I32, 56);
  xfer += prot_->serializedSizeI32(this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_SET, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_BYTE, 58);
  xfer += prot_->serializedSizeByte(this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_I32, 59);
  xfer += prot_->serializedSizeI32(this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_STRUCT, 60);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSizeZC(prot_, &this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_STRUCT, 61);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_SET, 62);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_FLOAT, 63);
  xfer += prot_->serializedSizeFloat(this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_LIST, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct8>>::serializedSize<false>(*prot_, this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_I32, 65);
  xfer += prot_->serializedSizeI32(this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_STRING, 66);
  xfer += prot_->serializedSizeZCBinary(this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_DOUBLE, 67);
  xfer += prot_->serializedSizeDouble(this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_MAP, 68);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, std::map<float, std::string>>::serializedSize<false>(*prot_, this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_LIST, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int64_t>>>::serializedSize<false>(*prot_, this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_STRUCT, 70);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_STRUCT, 71);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::serializedSizeZC(prot_, &this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_DOUBLE, 72);
  xfer += prot_->serializedSizeDouble(this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_STRING, 73);
  xfer += prot_->serializedSizeString(this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_SET, 74);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::set<std::vector<float>>>::serializedSize<false>(*prot_, this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_SET, 75);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_LIST, 76);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_SET, 77);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_STRUCT, 78);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSizeZC(prot_, &this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_MAP, 79);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::structure>, std::map<std::vector<int16_t>,  ::cpp2::Struct6>>::serializedSize<false>(*prot_, this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_SET, 80);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_SET, 81);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_I64, 82);
  xfer += prot_->serializedSizeI64(this->field82);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct20::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct20");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_SET, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct13>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_FLOAT, 3);
  xfer += prot_->writeFloat(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->writeByte(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->writeI32(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_STRING, 6);
  xfer += prot_->writeString(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_I32, 7);
  xfer += prot_->writeI32(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::vector<std::map<float, int16_t>>>::write(*prot_, this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::write(prot_, &this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_BOOL, 10);
  xfer += prot_->writeBool(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_BYTE, 11);
  xfer += prot_->writeByte(this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_SET, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct6>>::write(*prot_, this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_MAP, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<std::vector<bool>, std::vector<bool>>>::write(*prot_, this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_BOOL, 14);
  xfer += prot_->writeBool(this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_BOOL, 15);
  xfer += prot_->writeBool(this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_I16, 16);
  xfer += prot_->writeI16(this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_SET, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct3>>::write(*prot_, this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_I64, 18);
  xfer += prot_->writeI64(this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_DOUBLE, 19);
  xfer += prot_->writeDouble(this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_SET, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int32_t>>>::write(*prot_, this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_MAP, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int8_t>>::write(*prot_, this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_DOUBLE, 22);
  xfer += prot_->writeDouble(this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_STRING, 23);
  xfer += prot_->writeBinary(this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_STRUCT, 24);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct14>::write(prot_, &this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_STRING, 25);
  xfer += prot_->writeString(this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_SET, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_STRUCT, 27);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::write(prot_, &this->field27);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_BYTE, 28);
  xfer += prot_->writeByte(this->field28);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field29", apache::thrift::protocol::T_MAP, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int64_t>>::write(*prot_, this->field29);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field30", apache::thrift::protocol::T_SET, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>>, std::set<std::set<std::vector<int8_t>>>>::write(*prot_, this->field30);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field31", apache::thrift::protocol::T_STRUCT, 31);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::write(prot_, &this->field31);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field32", apache::thrift::protocol::T_LIST, 32);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field32);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field33", apache::thrift::protocol::T_MAP, 33);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int16_t, double>>::write(*prot_, this->field33);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field34", apache::thrift::protocol::T_I32, 34);
  xfer += prot_->writeI32(this->field34);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field35", apache::thrift::protocol::T_FLOAT, 35);
  xfer += prot_->writeFloat(this->field35);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field36", apache::thrift::protocol::T_LIST, 36);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->field36);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field37", apache::thrift::protocol::T_SET, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field37);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field38", apache::thrift::protocol::T_STRING, 38);
  xfer += prot_->writeBinary(this->field38);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field39", apache::thrift::protocol::T_LIST, 39);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field39);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field40", apache::thrift::protocol::T_SET, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::string>>>, std::set<std::map<bool, std::set<std::string>>>>::write(*prot_, this->field40);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field41", apache::thrift::protocol::T_STRUCT, 41);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct13>::write(prot_, &this->field41);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field42", apache::thrift::protocol::T_LIST, 42);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field42);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field43", apache::thrift::protocol::T_LIST, 43);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<bool>>>::write(*prot_, this->field43);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field44", apache::thrift::protocol::T_I32, 44);
  xfer += prot_->writeI32(this->field44);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field45", apache::thrift::protocol::T_I64, 45);
  xfer += prot_->writeI64(this->field45);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field46", apache::thrift::protocol::T_DOUBLE, 46);
  xfer += prot_->writeDouble(this->field46);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field47", apache::thrift::protocol::T_I64, 47);
  xfer += prot_->writeI64(this->field47);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field48", apache::thrift::protocol::T_I16, 48);
  xfer += prot_->writeI16(this->field48);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field49", apache::thrift::protocol::T_STRUCT, 49);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::write(prot_, &this->field49);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field50", apache::thrift::protocol::T_DOUBLE, 50);
  xfer += prot_->writeDouble(this->field50);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field51", apache::thrift::protocol::T_STRUCT, 51);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field51);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field52", apache::thrift::protocol::T_SET, 52);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field52);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field53", apache::thrift::protocol::T_STRING, 53);
  xfer += prot_->writeString(this->field53);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field54", apache::thrift::protocol::T_FLOAT, 54);
  xfer += prot_->writeFloat(this->field54);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field55", apache::thrift::protocol::T_FLOAT, 55);
  xfer += prot_->writeFloat(this->field55);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field56", apache::thrift::protocol::T_I32, 56);
  xfer += prot_->writeI32(this->field56);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field57", apache::thrift::protocol::T_SET, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field57);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field58", apache::thrift::protocol::T_BYTE, 58);
  xfer += prot_->writeByte(this->field58);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field59", apache::thrift::protocol::T_I32, 59);
  xfer += prot_->writeI32(this->field59);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field60", apache::thrift::protocol::T_STRUCT, 60);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::write(prot_, &this->field60);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field61", apache::thrift::protocol::T_STRUCT, 61);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field61);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field62", apache::thrift::protocol::T_SET, 62);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field62);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field63", apache::thrift::protocol::T_FLOAT, 63);
  xfer += prot_->writeFloat(this->field63);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field64", apache::thrift::protocol::T_LIST, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct8>>::write(*prot_, this->field64);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field65", apache::thrift::protocol::T_I32, 65);
  xfer += prot_->writeI32(this->field65);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field66", apache::thrift::protocol::T_STRING, 66);
  xfer += prot_->writeBinary(this->field66);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field67", apache::thrift::protocol::T_DOUBLE, 67);
  xfer += prot_->writeDouble(this->field67);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field68", apache::thrift::protocol::T_MAP, 68);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, std::map<float, std::string>>::write(*prot_, this->field68);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field69", apache::thrift::protocol::T_LIST, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int64_t>>>::write(*prot_, this->field69);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field70", apache::thrift::protocol::T_STRUCT, 70);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field70);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field71", apache::thrift::protocol::T_STRUCT, 71);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::write(prot_, &this->field71);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field72", apache::thrift::protocol::T_DOUBLE, 72);
  xfer += prot_->writeDouble(this->field72);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field73", apache::thrift::protocol::T_STRING, 73);
  xfer += prot_->writeString(this->field73);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field74", apache::thrift::protocol::T_SET, 74);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::set<std::vector<float>>>::write(*prot_, this->field74);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field75", apache::thrift::protocol::T_SET, 75);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field75);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field76", apache::thrift::protocol::T_LIST, 76);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field76);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field77", apache::thrift::protocol::T_SET, 77);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field77);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field78", apache::thrift::protocol::T_STRUCT, 78);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::write(prot_, &this->field78);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field79", apache::thrift::protocol::T_MAP, 79);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::structure>, std::map<std::vector<int16_t>,  ::cpp2::Struct6>>::write(*prot_, this->field79);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field80", apache::thrift::protocol::T_SET, 80);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field80);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field81", apache::thrift::protocol::T_SET, 81);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field81);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field82", apache::thrift::protocol::T_I64, 82);
  xfer += prot_->writeI64(this->field82);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace cpp2 {

template <class Protocol_>
uint32_t Struct21::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field1 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field7 = std::map<int16_t, std::vector<float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<int16_t, std::vector<float>>>::read(*iprot, this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::read(iprot, &this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field13 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field21 = std::map< ::cpp2::Struct10, std::vector<double>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map< ::cpp2::Struct10, std::vector<double>>>::read(*iprot, this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field22 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field23 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field24 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field27 = std::map<std::string, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::read(*iprot, this->field27);
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field28);
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field29);
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 30:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field30 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field30);
          this->__isset.field30 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 31:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field31);
          this->__isset.field31 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 32:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field32 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field32);
          this->__isset.field32 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 33:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field33 = std::set<std::vector<int16_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int16_t>>>::read(*iprot, this->field33);
          this->__isset.field33 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 34:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct16>::read(iprot, &this->field34);
          this->__isset.field34 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 35:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field35 = std::map<int16_t, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int16_t, std::string>>::read(*iprot, this->field35);
          this->__isset.field35 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 36:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field36 = std::map<bool, std::vector< ::cpp2::Struct5>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>, std::map<bool, std::vector< ::cpp2::Struct5>>>::read(*iprot, this->field36);
          this->__isset.field36 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 37:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field37);
          this->__isset.field37 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 38:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field38 = std::map<float, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int16_t>>::read(*iprot, this->field38);
          this->__isset.field38 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 39:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field39 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field39);
          this->__isset.field39 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 40:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field40);
          this->__isset.field40 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 41:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field41);
          this->__isset.field41 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 42:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field42);
          this->__isset.field42 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 43:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::read(iprot, &this->field43);
          this->__isset.field43 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 44:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field44 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field44);
          this->__isset.field44 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 45:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field45 = std::map<int32_t,  ::cpp2::Struct3>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int32_t,  ::cpp2::Struct3>>::read(*iprot, this->field45);
          this->__isset.field45 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 46:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field46 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field46);
          this->__isset.field46 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 47:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field47);
          this->__isset.field47 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 48:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field48);
          this->__isset.field48 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 49:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field49);
          this->__isset.field49 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 50:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field50);
          this->__isset.field50 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 51:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field51 = std::vector< ::cpp2::Struct10>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct10>>::read(*iprot, this->field51);
          this->__isset.field51 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 52:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field52);
          this->__isset.field52 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 53:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field53 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field53);
          this->__isset.field53 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 54:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field54);
          this->__isset.field54 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 55:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::read(iprot, &this->field55);
          this->__isset.field55 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 56:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field56 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field56);
          this->__isset.field56 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 57:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field57 = std::map<std::string, std::vector<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::map<std::string, std::vector<std::string>>>::read(*iprot, this->field57);
          this->__isset.field57 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 58:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field58);
          this->__isset.field58 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 59:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field59);
          this->__isset.field59 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 60:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::read(iprot, &this->field60);
          this->__isset.field60 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 61:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field61 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field61);
          this->__isset.field61 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 62:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field62);
          this->__isset.field62 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 63:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field63);
          this->__isset.field63 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 64:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field64);
          this->__isset.field64 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 65:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field65);
          this->__isset.field65 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 66:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field66);
          this->__isset.field66 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 67:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field67);
          this->__isset.field67 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 68:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field68 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field68);
          this->__isset.field68 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 69:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field69);
          this->__isset.field69 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 70:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field70 = std::set<std::set<float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<float>>>::read(*iprot, this->field70);
          this->__isset.field70 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 71:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field71);
          this->__isset.field71 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 72:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field72 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field72);
          this->__isset.field72 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 73:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field73 = std::map< ::cpp2::Struct1, std::vector<int16_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map< ::cpp2::Struct1, std::vector<int16_t>>>::read(*iprot, this->field73);
          this->__isset.field73 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 74:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field74);
          this->__isset.field74 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 75:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field75);
          this->__isset.field75 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 76:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field76 = std::vector<std::vector<double>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<double>>>::read(*iprot, this->field76);
          this->__isset.field76 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 77:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field77 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field77);
          this->__isset.field77 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 78:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field78 = std::set< ::cpp2::Struct14>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct14>>::read(*iprot, this->field78);
          this->__isset.field78 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 79:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field79);
          this->__isset.field79 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 80:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field80);
          this->__isset.field80 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 81:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field81);
          this->__isset.field81 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 82:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field82);
          this->__isset.field82 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 83:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field83 = std::map< ::cpp2::Struct2, double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::floating_point>, std::map< ::cpp2::Struct2, double>>::read(*iprot, this->field83);
          this->__isset.field83 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 84:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field84 = std::vector<std::map< ::cpp2::Struct2, bool>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>>, std::vector<std::map< ::cpp2::Struct2, bool>>>::read(*iprot, this->field84);
          this->__isset.field84 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 85:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field85 = std::map<bool, std::vector<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::map<bool, std::vector<std::string>>>::read(*iprot, this->field85);
          this->__isset.field85 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 86:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::read(iprot, &this->field86);
          this->__isset.field86 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 87:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field87);
          this->__isset.field87 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 88:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field88);
          this->__isset.field88 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 89:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field89 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field89);
          this->__isset.field89 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 90:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field90);
          this->__isset.field90 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 91:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field91);
          this->__isset.field91 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 92:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field92 = std::map<bool, std::vector<double>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<bool, std::vector<double>>>::read(*iprot, this->field92);
          this->__isset.field92 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 93:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field93);
          this->__isset.field93 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 94:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field94);
          this->__isset.field94 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 95:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field95);
          this->__isset.field95 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 96:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::read(iprot, &this->field96);
          this->__isset.field96 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 97:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field97);
          this->__isset.field97 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 98:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field98);
          this->__isset.field98 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 99:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field99 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field99);
          this->__isset.field99 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 100:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field100 = std::map<double, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int64_t>>::read(*iprot, this->field100);
          this->__isset.field100 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 101:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field101);
          this->__isset.field101 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 102:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field102 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field102);
          this->__isset.field102 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 103:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field103);
          this->__isset.field103 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 104:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field104);
          this->__isset.field104 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 105:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field105 = std::map<int8_t, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::read(*iprot, this->field105);
          this->__isset.field105 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 106:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field106);
          this->__isset.field106 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 107:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field107 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field107);
          this->__isset.field107 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 108:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::read(iprot, &this->field108);
          this->__isset.field108 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 109:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field109);
          this->__isset.field109 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 110:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field110);
          this->__isset.field110 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 111:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field111);
          this->__isset.field111 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 112:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field112 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field112);
          this->__isset.field112 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 113:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field113 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field113);
          this->__isset.field113 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 114:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field114);
          this->__isset.field114 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 115:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field115);
          this->__isset.field115 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 116:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field116);
          this->__isset.field116 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 117:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field117 = std::map<int32_t, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int16_t>>::read(*iprot, this->field117);
          this->__isset.field117 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 118:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field118);
          this->__isset.field118 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 119:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field119 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field119);
          this->__isset.field119 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 120:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field120);
          this->__isset.field120 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 121:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field121);
          this->__isset.field121 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 122:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field122);
          this->__isset.field122 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 123:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field123 = std::map<std::string, std::map<int8_t, double>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::map<std::string, std::map<int8_t, double>>>::read(*iprot, this->field123);
          this->__isset.field123 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 124:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field124);
          this->__isset.field124 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 125:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field125);
          this->__isset.field125 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 126:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field126);
          this->__isset.field126 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 127:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field127);
          this->__isset.field127 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 128:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field128);
          this->__isset.field128 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 129:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field129 = std::map<std::string, std::set<int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<std::string, std::set<int32_t>>>::read(*iprot, this->field129);
          this->__isset.field129 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 130:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field130 = std::map<int64_t, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int64_t, std::string>>::read(*iprot, this->field130);
          this->__isset.field130 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 131:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field131 = std::map< ::cpp2::Struct18, std::set<int8_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map< ::cpp2::Struct18, std::set<int8_t>>>::read(*iprot, this->field131);
          this->__isset.field131 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 132:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field132);
          this->__isset.field132 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 133:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field133);
          this->__isset.field133 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 134:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field134 = std::map<int64_t, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int8_t>>::read(*iprot, this->field134);
          this->__isset.field134 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 135:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field135);
          this->__isset.field135 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 136:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field136 = std::map<int32_t, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int32_t, std::string>>::read(*iprot, this->field136);
          this->__isset.field136 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 137:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field137 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field137);
          this->__isset.field137 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 138:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field138 = std::map<std::string, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::read(*iprot, this->field138);
          this->__isset.field138 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 139:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::read(iprot, &this->field139);
          this->__isset.field139 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 140:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field140);
          this->__isset.field140 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 141:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field141);
          this->__isset.field141 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 142:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field142);
          this->__isset.field142 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 143:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field143);
          this->__isset.field143 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 144:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field144 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field144);
          this->__isset.field144 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 145:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field145 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field145);
          this->__isset.field145 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 146:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field146);
          this->__isset.field146 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 147:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field147 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field147);
          this->__isset.field147 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 148:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field148);
          this->__isset.field148 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 149:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field149);
          this->__isset.field149 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 150:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field150 = std::set<std::map<int16_t, float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::set<std::map<int16_t, float>>>::read(*iprot, this->field150);
          this->__isset.field150 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 151:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct14>::read(iprot, &this->field151);
          this->__isset.field151 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 152:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field152);
          this->__isset.field152 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 153:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field153 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field153);
          this->__isset.field153 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 154:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field154 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field154);
          this->__isset.field154 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 155:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field155);
          this->__isset.field155 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 156:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field156);
          this->__isset.field156 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 157:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field157);
          this->__isset.field157 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 158:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field158);
          this->__isset.field158 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 159:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field159);
          this->__isset.field159 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 160:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field160);
          this->__isset.field160 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 161:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field161);
          this->__isset.field161 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 162:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field162 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field162);
          this->__isset.field162 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 163:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field163 = std::map< ::cpp2::Struct7, std::map<int64_t,  ::cpp2::Struct4>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>, std::map< ::cpp2::Struct7, std::map<int64_t,  ::cpp2::Struct4>>>::read(*iprot, this->field163);
          this->__isset.field163 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 164:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field164 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field164);
          this->__isset.field164 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 165:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field165 = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->field165);
          this->__isset.field165 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 166:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field166 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field166);
          this->__isset.field166 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 167:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::read(iprot, &this->field167);
          this->__isset.field167 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 168:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field168);
          this->__isset.field168 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 169:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field169);
          this->__isset.field169 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 170:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field170);
          this->__isset.field170 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 171:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field171 = std::map<int16_t, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int16_t>>::read(*iprot, this->field171);
          this->__isset.field171 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 172:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field172 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field172);
          this->__isset.field172 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 173:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field173 = std::set< ::cpp2::Struct5>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct5>>::read(*iprot, this->field173);
          this->__isset.field173 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 174:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field174);
          this->__isset.field174 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct21::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct21");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeString(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->serializedSizeByte(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_FLOAT, 5);
  xfer += prot_->serializedSizeFloat(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_DOUBLE, 6);
  xfer += prot_->serializedSizeDouble(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<int16_t, std::vector<float>>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_FLOAT, 8);
  xfer += prot_->serializedSizeFloat(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::serializedSize(prot_, &this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_FLOAT, 10);
  xfer += prot_->serializedSizeFloat(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_STRING, 11);
  xfer += prot_->serializedSizeBinary(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_BYTE, 12);
  xfer += prot_->serializedSizeByte(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_DOUBLE, 14);
  xfer += prot_->serializedSizeDouble(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_I32, 15);
  xfer += prot_->serializedSizeI32(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_I16, 16);
  xfer += prot_->serializedSizeI16(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_STRUCT, 17);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_DOUBLE, 18);
  xfer += prot_->serializedSizeDouble(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_I16, 19);
  xfer += prot_->serializedSizeI16(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_I16, 20);
  xfer += prot_->serializedSizeI16(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_MAP, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map< ::cpp2::Struct10, std::vector<double>>>::serializedSize<false>(*prot_, this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_SET, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_LIST, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_SET, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_FLOAT, 25);
  xfer += prot_->serializedSizeFloat(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_STRUCT, 26);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_MAP, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::serializedSize<false>(*prot_, this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_I64, 28);
  xfer += prot_->serializedSizeI64(this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_FLOAT, 29);
  xfer += prot_->serializedSizeFloat(this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_LIST, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_BYTE, 31);
  xfer += prot_->serializedSizeByte(this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_LIST, 32);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_SET, 33);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int16_t>>>::serializedSize<false>(*prot_, this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_STRUCT, 34);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct16>::serializedSize(prot_, &this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_MAP, 35);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int16_t, std::string>>::serializedSize<false>(*prot_, this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_MAP, 36);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>, std::map<bool, std::vector< ::cpp2::Struct5>>>::serializedSize<false>(*prot_, this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_I16, 37);
  xfer += prot_->serializedSizeI16(this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_MAP, 38);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int16_t>>::serializedSize<false>(*prot_, this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_SET, 39);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_BOOL, 40);
  xfer += prot_->serializedSizeBool(this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_STRING, 41);
  xfer += prot_->serializedSizeBinary(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_I16, 42);
  xfer += prot_->serializedSizeI16(this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_STRUCT, 43);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSize(prot_, &this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_SET, 44);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_MAP, 45);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int32_t,  ::cpp2::Struct3>>::serializedSize<false>(*prot_, this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_SET, 46);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_STRUCT, 47);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_I32, 48);
  xfer += prot_->serializedSizeI32(this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_BYTE, 49);
  xfer += prot_->serializedSizeByte(this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_BOOL, 50);
  xfer += prot_->serializedSizeBool(this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_LIST, 51);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct10>>::serializedSize<false>(*prot_, this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_FLOAT, 52);
  xfer += prot_->serializedSizeFloat(this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_SET, 53);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_STRING, 54);
  xfer += prot_->serializedSizeString(this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_STRUCT, 55);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::serializedSize(prot_, &this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_LIST, 56);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_MAP, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::map<std::string, std::vector<std::string>>>::serializedSize<false>(*prot_, this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_I64, 58);
  xfer += prot_->serializedSizeI64(this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_BYTE, 59);
  xfer += prot_->serializedSizeByte(this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_STRUCT, 60);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::serializedSize(prot_, &this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_SET, 61);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_I16, 62);
  xfer += prot_->serializedSizeI16(this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_BOOL, 63);
  xfer += prot_->serializedSizeBool(this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_BOOL, 64);
  xfer += prot_->serializedSizeBool(this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_I32, 65);
  xfer += prot_->serializedSizeI32(this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_STRING, 66);
  xfer += prot_->serializedSizeString(this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_I32, 67);
  xfer += prot_->serializedSizeI32(this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_SET, 68);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_I32, 69);
  xfer += prot_->serializedSizeI32(this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_SET, 70);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<float>>>::serializedSize<false>(*prot_, this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_I16, 71);
  xfer += prot_->serializedSizeI16(this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_LIST, 72);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_MAP, 73);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map< ::cpp2::Struct1, std::vector<int16_t>>>::serializedSize<false>(*prot_, this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_STRUCT, 74);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_STRING, 75);
  xfer += prot_->serializedSizeString(this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_LIST, 76);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<double>>>::serializedSize<false>(*prot_, this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_LIST, 77);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_SET, 78);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct14>>::serializedSize<false>(*prot_, this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_STRING, 79);
  xfer += prot_->serializedSizeBinary(this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_I32, 80);
  xfer += prot_->serializedSizeI32(this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_I16, 81);
  xfer += prot_->serializedSizeI16(this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_BOOL, 82);
  xfer += prot_->serializedSizeBool(this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_MAP, 83);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::floating_point>, std::map< ::cpp2::Struct2, double>>::serializedSize<false>(*prot_, this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_LIST, 84);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>>, std::vector<std::map< ::cpp2::Struct2, bool>>>::serializedSize<false>(*prot_, this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_MAP, 85);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::map<bool, std::vector<std::string>>>::serializedSize<false>(*prot_, this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_STRUCT, 86);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSize(prot_, &this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_STRING, 87);
  xfer += prot_->serializedSizeString(this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_FLOAT, 88);
  xfer += prot_->serializedSizeFloat(this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_LIST, 89);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_I64, 90);
  xfer += prot_->serializedSizeI64(this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_BOOL, 91);
  xfer += prot_->serializedSizeBool(this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_MAP, 92);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<bool, std::vector<double>>>::serializedSize<false>(*prot_, this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_FLOAT, 93);
  xfer += prot_->serializedSizeFloat(this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_BYTE, 94);
  xfer += prot_->serializedSizeByte(this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_STRING, 95);
  xfer += prot_->serializedSizeString(this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_STRUCT, 96);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSize(prot_, &this->field96);
  xfer += prot_->serializedFieldSize("field97", apache::thrift::protocol::T_STRING, 97);
  xfer += prot_->serializedSizeString(this->field97);
  xfer += prot_->serializedFieldSize("field98", apache::thrift::protocol::T_I16, 98);
  xfer += prot_->serializedSizeI16(this->field98);
  xfer += prot_->serializedFieldSize("field99", apache::thrift::protocol::T_SET, 99);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field99);
  xfer += prot_->serializedFieldSize("field100", apache::thrift::protocol::T_MAP, 100);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int64_t>>::serializedSize<false>(*prot_, this->field100);
  xfer += prot_->serializedFieldSize("field101", apache::thrift::protocol::T_I16, 101);
  xfer += prot_->serializedSizeI16(this->field101);
  xfer += prot_->serializedFieldSize("field102", apache::thrift::protocol::T_SET, 102);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field102);
  xfer += prot_->serializedFieldSize("field103", apache::thrift::protocol::T_STRING, 103);
  xfer += prot_->serializedSizeBinary(this->field103);
  xfer += prot_->serializedFieldSize("field104", apache::thrift::protocol::T_I16, 104);
  xfer += prot_->serializedSizeI16(this->field104);
  xfer += prot_->serializedFieldSize("field105", apache::thrift::protocol::T_MAP, 105);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::serializedSize<false>(*prot_, this->field105);
  xfer += prot_->serializedFieldSize("field106", apache::thrift::protocol::T_STRING, 106);
  xfer += prot_->serializedSizeBinary(this->field106);
  xfer += prot_->serializedFieldSize("field107", apache::thrift::protocol::T_SET, 107);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field107);
  xfer += prot_->serializedFieldSize("field108", apache::thrift::protocol::T_STRUCT, 108);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSize(prot_, &this->field108);
  xfer += prot_->serializedFieldSize("field109", apache::thrift::protocol::T_I16, 109);
  xfer += prot_->serializedSizeI16(this->field109);
  xfer += prot_->serializedFieldSize("field110", apache::thrift::protocol::T_STRING, 110);
  xfer += prot_->serializedSizeBinary(this->field110);
  xfer += prot_->serializedFieldSize("field111", apache::thrift::protocol::T_I32, 111);
  xfer += prot_->serializedSizeI32(this->field111);
  xfer += prot_->serializedFieldSize("field112", apache::thrift::protocol::T_SET, 112);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field112);
  xfer += prot_->serializedFieldSize("field113", apache::thrift::protocol::T_LIST, 113);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field113);
  xfer += prot_->serializedFieldSize("field114", apache::thrift::protocol::T_I16, 114);
  xfer += prot_->serializedSizeI16(this->field114);
  xfer += prot_->serializedFieldSize("field115", apache::thrift::protocol::T_BYTE, 115);
  xfer += prot_->serializedSizeByte(this->field115);
  xfer += prot_->serializedFieldSize("field116", apache::thrift::protocol::T_I64, 116);
  xfer += prot_->serializedSizeI64(this->field116);
  xfer += prot_->serializedFieldSize("field117", apache::thrift::protocol::T_MAP, 117);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int16_t>>::serializedSize<false>(*prot_, this->field117);
  xfer += prot_->serializedFieldSize("field118", apache::thrift::protocol::T_I64, 118);
  xfer += prot_->serializedSizeI64(this->field118);
  xfer += prot_->serializedFieldSize("field119", apache::thrift::protocol::T_LIST, 119);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field119);
  xfer += prot_->serializedFieldSize("field120", apache::thrift::protocol::T_I64, 120);
  xfer += prot_->serializedSizeI64(this->field120);
  xfer += prot_->serializedFieldSize("field121", apache::thrift::protocol::T_STRING, 121);
  xfer += prot_->serializedSizeString(this->field121);
  xfer += prot_->serializedFieldSize("field122", apache::thrift::protocol::T_I64, 122);
  xfer += prot_->serializedSizeI64(this->field122);
  xfer += prot_->serializedFieldSize("field123", apache::thrift::protocol::T_MAP, 123);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::map<std::string, std::map<int8_t, double>>>::serializedSize<false>(*prot_, this->field123);
  xfer += prot_->serializedFieldSize("field124", apache::thrift::protocol::T_STRING, 124);
  xfer += prot_->serializedSizeString(this->field124);
  xfer += prot_->serializedFieldSize("field125", apache::thrift::protocol::T_BOOL, 125);
  xfer += prot_->serializedSizeBool(this->field125);
  xfer += prot_->serializedFieldSize("field126", apache::thrift::protocol::T_BYTE, 126);
  xfer += prot_->serializedSizeByte(this->field126);
  xfer += prot_->serializedFieldSize("field127", apache::thrift::protocol::T_I16, 127);
  xfer += prot_->serializedSizeI16(this->field127);
  xfer += prot_->serializedFieldSize("field128", apache::thrift::protocol::T_STRING, 128);
  xfer += prot_->serializedSizeString(this->field128);
  xfer += prot_->serializedFieldSize("field129", apache::thrift::protocol::T_MAP, 129);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<std::string, std::set<int32_t>>>::serializedSize<false>(*prot_, this->field129);
  xfer += prot_->serializedFieldSize("field130", apache::thrift::protocol::T_MAP, 130);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int64_t, std::string>>::serializedSize<false>(*prot_, this->field130);
  xfer += prot_->serializedFieldSize("field131", apache::thrift::protocol::T_MAP, 131);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map< ::cpp2::Struct18, std::set<int8_t>>>::serializedSize<false>(*prot_, this->field131);
  xfer += prot_->serializedFieldSize("field132", apache::thrift::protocol::T_BYTE, 132);
  xfer += prot_->serializedSizeByte(this->field132);
  xfer += prot_->serializedFieldSize("field133", apache::thrift::protocol::T_DOUBLE, 133);
  xfer += prot_->serializedSizeDouble(this->field133);
  xfer += prot_->serializedFieldSize("field134", apache::thrift::protocol::T_MAP, 134);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int8_t>>::serializedSize<false>(*prot_, this->field134);
  xfer += prot_->serializedFieldSize("field135", apache::thrift::protocol::T_I32, 135);
  xfer += prot_->serializedSizeI32(this->field135);
  xfer += prot_->serializedFieldSize("field136", apache::thrift::protocol::T_MAP, 136);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int32_t, std::string>>::serializedSize<false>(*prot_, this->field136);
  xfer += prot_->serializedFieldSize("field137", apache::thrift::protocol::T_LIST, 137);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field137);
  xfer += prot_->serializedFieldSize("field138", apache::thrift::protocol::T_MAP, 138);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::serializedSize<false>(*prot_, this->field138);
  xfer += prot_->serializedFieldSize("field139", apache::thrift::protocol::T_STRUCT, 139);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSize(prot_, &this->field139);
  xfer += prot_->serializedFieldSize("field140", apache::thrift::protocol::T_I32, 140);
  xfer += prot_->serializedSizeI32(this->field140);
  xfer += prot_->serializedFieldSize("field141", apache::thrift::protocol::T_STRING, 141);
  xfer += prot_->serializedSizeString(this->field141);
  xfer += prot_->serializedFieldSize("field142", apache::thrift::protocol::T_BYTE, 142);
  xfer += prot_->serializedSizeByte(this->field142);
  xfer += prot_->serializedFieldSize("field143", apache::thrift::protocol::T_I32, 143);
  xfer += prot_->serializedSizeI32(this->field143);
  xfer += prot_->serializedFieldSize("field144", apache::thrift::protocol::T_SET, 144);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field144);
  xfer += prot_->serializedFieldSize("field145", apache::thrift::protocol::T_LIST, 145);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field145);
  xfer += prot_->serializedFieldSize("field146", apache::thrift::protocol::T_I64, 146);
  xfer += prot_->serializedSizeI64(this->field146);
  xfer += prot_->serializedFieldSize("field147", apache::thrift::protocol::T_SET, 147);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field147);
  xfer += prot_->serializedFieldSize("field148", apache::thrift::protocol::T_STRING, 148);
  xfer += prot_->serializedSizeString(this->field148);
  xfer += prot_->serializedFieldSize("field149", apache::thrift::protocol::T_I16, 149);
  xfer += prot_->serializedSizeI16(this->field149);
  xfer += prot_->serializedFieldSize("field150", apache::thrift::protocol::T_SET, 150);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::set<std::map<int16_t, float>>>::serializedSize<false>(*prot_, this->field150);
  xfer += prot_->serializedFieldSize("field151", apache::thrift::protocol::T_STRUCT, 151);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct14>::serializedSize(prot_, &this->field151);
  xfer += prot_->serializedFieldSize("field152", apache::thrift::protocol::T_STRUCT, 152);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field152);
  xfer += prot_->serializedFieldSize("field153", apache::thrift::protocol::T_SET, 153);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field153);
  xfer += prot_->serializedFieldSize("field154", apache::thrift::protocol::T_LIST, 154);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field154);
  xfer += prot_->serializedFieldSize("field155", apache::thrift::protocol::T_BYTE, 155);
  xfer += prot_->serializedSizeByte(this->field155);
  xfer += prot_->serializedFieldSize("field156", apache::thrift::protocol::T_BYTE, 156);
  xfer += prot_->serializedSizeByte(this->field156);
  xfer += prot_->serializedFieldSize("field157", apache::thrift::protocol::T_FLOAT, 157);
  xfer += prot_->serializedSizeFloat(this->field157);
  xfer += prot_->serializedFieldSize("field158", apache::thrift::protocol::T_STRUCT, 158);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field158);
  xfer += prot_->serializedFieldSize("field159", apache::thrift::protocol::T_I32, 159);
  xfer += prot_->serializedSizeI32(this->field159);
  xfer += prot_->serializedFieldSize("field160", apache::thrift::protocol::T_DOUBLE, 160);
  xfer += prot_->serializedSizeDouble(this->field160);
  xfer += prot_->serializedFieldSize("field161", apache::thrift::protocol::T_BOOL, 161);
  xfer += prot_->serializedSizeBool(this->field161);
  xfer += prot_->serializedFieldSize("field162", apache::thrift::protocol::T_LIST, 162);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field162);
  xfer += prot_->serializedFieldSize("field163", apache::thrift::protocol::T_MAP, 163);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>, std::map< ::cpp2::Struct7, std::map<int64_t,  ::cpp2::Struct4>>>::serializedSize<false>(*prot_, this->field163);
  xfer += prot_->serializedFieldSize("field164", apache::thrift::protocol::T_SET, 164);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field164);
  xfer += prot_->serializedFieldSize("field165", apache::thrift::protocol::T_LIST, 165);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field165);
  xfer += prot_->serializedFieldSize("field166", apache::thrift::protocol::T_SET, 166);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field166);
  xfer += prot_->serializedFieldSize("field167", apache::thrift::protocol::T_STRUCT, 167);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSize(prot_, &this->field167);
  xfer += prot_->serializedFieldSize("field168", apache::thrift::protocol::T_STRING, 168);
  xfer += prot_->serializedSizeBinary(this->field168);
  xfer += prot_->serializedFieldSize("field169", apache::thrift::protocol::T_I16, 169);
  xfer += prot_->serializedSizeI16(this->field169);
  xfer += prot_->serializedFieldSize("field170", apache::thrift::protocol::T_STRING, 170);
  xfer += prot_->serializedSizeBinary(this->field170);
  xfer += prot_->serializedFieldSize("field171", apache::thrift::protocol::T_MAP, 171);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int16_t>>::serializedSize<false>(*prot_, this->field171);
  xfer += prot_->serializedFieldSize("field172", apache::thrift::protocol::T_SET, 172);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field172);
  xfer += prot_->serializedFieldSize("field173", apache::thrift::protocol::T_SET, 173);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct5>>::serializedSize<false>(*prot_, this->field173);
  xfer += prot_->serializedFieldSize("field174", apache::thrift::protocol::T_STRING, 174);
  xfer += prot_->serializedSizeBinary(this->field174);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct21::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct21");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->serializedSizeString(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->serializedSizeByte(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_FLOAT, 5);
  xfer += prot_->serializedSizeFloat(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_DOUBLE, 6);
  xfer += prot_->serializedSizeDouble(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<int16_t, std::vector<float>>>::serializedSize<false>(*prot_, this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_FLOAT, 8);
  xfer += prot_->serializedSizeFloat(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::serializedSizeZC(prot_, &this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_FLOAT, 10);
  xfer += prot_->serializedSizeFloat(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_STRING, 11);
  xfer += prot_->serializedSizeZCBinary(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_BYTE, 12);
  xfer += prot_->serializedSizeByte(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_DOUBLE, 14);
  xfer += prot_->serializedSizeDouble(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_I32, 15);
  xfer += prot_->serializedSizeI32(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_I16, 16);
  xfer += prot_->serializedSizeI16(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_STRUCT, 17);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_DOUBLE, 18);
  xfer += prot_->serializedSizeDouble(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_I16, 19);
  xfer += prot_->serializedSizeI16(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_I16, 20);
  xfer += prot_->serializedSizeI16(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_MAP, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map< ::cpp2::Struct10, std::vector<double>>>::serializedSize<false>(*prot_, this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_SET, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_LIST, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_SET, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_FLOAT, 25);
  xfer += prot_->serializedSizeFloat(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_STRUCT, 26);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_MAP, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::serializedSize<false>(*prot_, this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_I64, 28);
  xfer += prot_->serializedSizeI64(this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_FLOAT, 29);
  xfer += prot_->serializedSizeFloat(this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_LIST, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_BYTE, 31);
  xfer += prot_->serializedSizeByte(this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_LIST, 32);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_SET, 33);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int16_t>>>::serializedSize<false>(*prot_, this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_STRUCT, 34);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct16>::serializedSizeZC(prot_, &this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_MAP, 35);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int16_t, std::string>>::serializedSize<false>(*prot_, this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_MAP, 36);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>, std::map<bool, std::vector< ::cpp2::Struct5>>>::serializedSize<false>(*prot_, this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_I16, 37);
  xfer += prot_->serializedSizeI16(this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_MAP, 38);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int16_t>>::serializedSize<false>(*prot_, this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_SET, 39);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_BOOL, 40);
  xfer += prot_->serializedSizeBool(this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_STRING, 41);
  xfer += prot_->serializedSizeZCBinary(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_I16, 42);
  xfer += prot_->serializedSizeI16(this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_STRUCT, 43);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSizeZC(prot_, &this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_SET, 44);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_MAP, 45);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int32_t,  ::cpp2::Struct3>>::serializedSize<false>(*prot_, this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_SET, 46);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_STRUCT, 47);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_I32, 48);
  xfer += prot_->serializedSizeI32(this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_BYTE, 49);
  xfer += prot_->serializedSizeByte(this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_BOOL, 50);
  xfer += prot_->serializedSizeBool(this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_LIST, 51);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct10>>::serializedSize<false>(*prot_, this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_FLOAT, 52);
  xfer += prot_->serializedSizeFloat(this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_SET, 53);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_STRING, 54);
  xfer += prot_->serializedSizeString(this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_STRUCT, 55);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::serializedSizeZC(prot_, &this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_LIST, 56);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_MAP, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::map<std::string, std::vector<std::string>>>::serializedSize<false>(*prot_, this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_I64, 58);
  xfer += prot_->serializedSizeI64(this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_BYTE, 59);
  xfer += prot_->serializedSizeByte(this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_STRUCT, 60);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::serializedSizeZC(prot_, &this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_SET, 61);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_I16, 62);
  xfer += prot_->serializedSizeI16(this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_BOOL, 63);
  xfer += prot_->serializedSizeBool(this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_BOOL, 64);
  xfer += prot_->serializedSizeBool(this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_I32, 65);
  xfer += prot_->serializedSizeI32(this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_STRING, 66);
  xfer += prot_->serializedSizeString(this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_I32, 67);
  xfer += prot_->serializedSizeI32(this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_SET, 68);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_I32, 69);
  xfer += prot_->serializedSizeI32(this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_SET, 70);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<float>>>::serializedSize<false>(*prot_, this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_I16, 71);
  xfer += prot_->serializedSizeI16(this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_LIST, 72);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_MAP, 73);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map< ::cpp2::Struct1, std::vector<int16_t>>>::serializedSize<false>(*prot_, this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_STRUCT, 74);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_STRING, 75);
  xfer += prot_->serializedSizeString(this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_LIST, 76);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<double>>>::serializedSize<false>(*prot_, this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_LIST, 77);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_SET, 78);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct14>>::serializedSize<false>(*prot_, this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_STRING, 79);
  xfer += prot_->serializedSizeZCBinary(this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_I32, 80);
  xfer += prot_->serializedSizeI32(this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_I16, 81);
  xfer += prot_->serializedSizeI16(this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_BOOL, 82);
  xfer += prot_->serializedSizeBool(this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_MAP, 83);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::floating_point>, std::map< ::cpp2::Struct2, double>>::serializedSize<false>(*prot_, this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_LIST, 84);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>>, std::vector<std::map< ::cpp2::Struct2, bool>>>::serializedSize<false>(*prot_, this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_MAP, 85);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::map<bool, std::vector<std::string>>>::serializedSize<false>(*prot_, this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_STRUCT, 86);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSizeZC(prot_, &this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_STRING, 87);
  xfer += prot_->serializedSizeString(this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_FLOAT, 88);
  xfer += prot_->serializedSizeFloat(this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_LIST, 89);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_I64, 90);
  xfer += prot_->serializedSizeI64(this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_BOOL, 91);
  xfer += prot_->serializedSizeBool(this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_MAP, 92);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<bool, std::vector<double>>>::serializedSize<false>(*prot_, this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_FLOAT, 93);
  xfer += prot_->serializedSizeFloat(this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_BYTE, 94);
  xfer += prot_->serializedSizeByte(this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_STRING, 95);
  xfer += prot_->serializedSizeString(this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_STRUCT, 96);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSizeZC(prot_, &this->field96);
  xfer += prot_->serializedFieldSize("field97", apache::thrift::protocol::T_STRING, 97);
  xfer += prot_->serializedSizeString(this->field97);
  xfer += prot_->serializedFieldSize("field98", apache::thrift::protocol::T_I16, 98);
  xfer += prot_->serializedSizeI16(this->field98);
  xfer += prot_->serializedFieldSize("field99", apache::thrift::protocol::T_SET, 99);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field99);
  xfer += prot_->serializedFieldSize("field100", apache::thrift::protocol::T_MAP, 100);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int64_t>>::serializedSize<false>(*prot_, this->field100);
  xfer += prot_->serializedFieldSize("field101", apache::thrift::protocol::T_I16, 101);
  xfer += prot_->serializedSizeI16(this->field101);
  xfer += prot_->serializedFieldSize("field102", apache::thrift::protocol::T_SET, 102);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field102);
  xfer += prot_->serializedFieldSize("field103", apache::thrift::protocol::T_STRING, 103);
  xfer += prot_->serializedSizeZCBinary(this->field103);
  xfer += prot_->serializedFieldSize("field104", apache::thrift::protocol::T_I16, 104);
  xfer += prot_->serializedSizeI16(this->field104);
  xfer += prot_->serializedFieldSize("field105", apache::thrift::protocol::T_MAP, 105);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::serializedSize<false>(*prot_, this->field105);
  xfer += prot_->serializedFieldSize("field106", apache::thrift::protocol::T_STRING, 106);
  xfer += prot_->serializedSizeZCBinary(this->field106);
  xfer += prot_->serializedFieldSize("field107", apache::thrift::protocol::T_SET, 107);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field107);
  xfer += prot_->serializedFieldSize("field108", apache::thrift::protocol::T_STRUCT, 108);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSizeZC(prot_, &this->field108);
  xfer += prot_->serializedFieldSize("field109", apache::thrift::protocol::T_I16, 109);
  xfer += prot_->serializedSizeI16(this->field109);
  xfer += prot_->serializedFieldSize("field110", apache::thrift::protocol::T_STRING, 110);
  xfer += prot_->serializedSizeZCBinary(this->field110);
  xfer += prot_->serializedFieldSize("field111", apache::thrift::protocol::T_I32, 111);
  xfer += prot_->serializedSizeI32(this->field111);
  xfer += prot_->serializedFieldSize("field112", apache::thrift::protocol::T_SET, 112);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field112);
  xfer += prot_->serializedFieldSize("field113", apache::thrift::protocol::T_LIST, 113);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field113);
  xfer += prot_->serializedFieldSize("field114", apache::thrift::protocol::T_I16, 114);
  xfer += prot_->serializedSizeI16(this->field114);
  xfer += prot_->serializedFieldSize("field115", apache::thrift::protocol::T_BYTE, 115);
  xfer += prot_->serializedSizeByte(this->field115);
  xfer += prot_->serializedFieldSize("field116", apache::thrift::protocol::T_I64, 116);
  xfer += prot_->serializedSizeI64(this->field116);
  xfer += prot_->serializedFieldSize("field117", apache::thrift::protocol::T_MAP, 117);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int16_t>>::serializedSize<false>(*prot_, this->field117);
  xfer += prot_->serializedFieldSize("field118", apache::thrift::protocol::T_I64, 118);
  xfer += prot_->serializedSizeI64(this->field118);
  xfer += prot_->serializedFieldSize("field119", apache::thrift::protocol::T_LIST, 119);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field119);
  xfer += prot_->serializedFieldSize("field120", apache::thrift::protocol::T_I64, 120);
  xfer += prot_->serializedSizeI64(this->field120);
  xfer += prot_->serializedFieldSize("field121", apache::thrift::protocol::T_STRING, 121);
  xfer += prot_->serializedSizeString(this->field121);
  xfer += prot_->serializedFieldSize("field122", apache::thrift::protocol::T_I64, 122);
  xfer += prot_->serializedSizeI64(this->field122);
  xfer += prot_->serializedFieldSize("field123", apache::thrift::protocol::T_MAP, 123);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::map<std::string, std::map<int8_t, double>>>::serializedSize<false>(*prot_, this->field123);
  xfer += prot_->serializedFieldSize("field124", apache::thrift::protocol::T_STRING, 124);
  xfer += prot_->serializedSizeString(this->field124);
  xfer += prot_->serializedFieldSize("field125", apache::thrift::protocol::T_BOOL, 125);
  xfer += prot_->serializedSizeBool(this->field125);
  xfer += prot_->serializedFieldSize("field126", apache::thrift::protocol::T_BYTE, 126);
  xfer += prot_->serializedSizeByte(this->field126);
  xfer += prot_->serializedFieldSize("field127", apache::thrift::protocol::T_I16, 127);
  xfer += prot_->serializedSizeI16(this->field127);
  xfer += prot_->serializedFieldSize("field128", apache::thrift::protocol::T_STRING, 128);
  xfer += prot_->serializedSizeString(this->field128);
  xfer += prot_->serializedFieldSize("field129", apache::thrift::protocol::T_MAP, 129);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<std::string, std::set<int32_t>>>::serializedSize<false>(*prot_, this->field129);
  xfer += prot_->serializedFieldSize("field130", apache::thrift::protocol::T_MAP, 130);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int64_t, std::string>>::serializedSize<false>(*prot_, this->field130);
  xfer += prot_->serializedFieldSize("field131", apache::thrift::protocol::T_MAP, 131);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map< ::cpp2::Struct18, std::set<int8_t>>>::serializedSize<false>(*prot_, this->field131);
  xfer += prot_->serializedFieldSize("field132", apache::thrift::protocol::T_BYTE, 132);
  xfer += prot_->serializedSizeByte(this->field132);
  xfer += prot_->serializedFieldSize("field133", apache::thrift::protocol::T_DOUBLE, 133);
  xfer += prot_->serializedSizeDouble(this->field133);
  xfer += prot_->serializedFieldSize("field134", apache::thrift::protocol::T_MAP, 134);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int8_t>>::serializedSize<false>(*prot_, this->field134);
  xfer += prot_->serializedFieldSize("field135", apache::thrift::protocol::T_I32, 135);
  xfer += prot_->serializedSizeI32(this->field135);
  xfer += prot_->serializedFieldSize("field136", apache::thrift::protocol::T_MAP, 136);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int32_t, std::string>>::serializedSize<false>(*prot_, this->field136);
  xfer += prot_->serializedFieldSize("field137", apache::thrift::protocol::T_LIST, 137);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field137);
  xfer += prot_->serializedFieldSize("field138", apache::thrift::protocol::T_MAP, 138);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::serializedSize<false>(*prot_, this->field138);
  xfer += prot_->serializedFieldSize("field139", apache::thrift::protocol::T_STRUCT, 139);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSizeZC(prot_, &this->field139);
  xfer += prot_->serializedFieldSize("field140", apache::thrift::protocol::T_I32, 140);
  xfer += prot_->serializedSizeI32(this->field140);
  xfer += prot_->serializedFieldSize("field141", apache::thrift::protocol::T_STRING, 141);
  xfer += prot_->serializedSizeString(this->field141);
  xfer += prot_->serializedFieldSize("field142", apache::thrift::protocol::T_BYTE, 142);
  xfer += prot_->serializedSizeByte(this->field142);
  xfer += prot_->serializedFieldSize("field143", apache::thrift::protocol::T_I32, 143);
  xfer += prot_->serializedSizeI32(this->field143);
  xfer += prot_->serializedFieldSize("field144", apache::thrift::protocol::T_SET, 144);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field144);
  xfer += prot_->serializedFieldSize("field145", apache::thrift::protocol::T_LIST, 145);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field145);
  xfer += prot_->serializedFieldSize("field146", apache::thrift::protocol::T_I64, 146);
  xfer += prot_->serializedSizeI64(this->field146);
  xfer += prot_->serializedFieldSize("field147", apache::thrift::protocol::T_SET, 147);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field147);
  xfer += prot_->serializedFieldSize("field148", apache::thrift::protocol::T_STRING, 148);
  xfer += prot_->serializedSizeString(this->field148);
  xfer += prot_->serializedFieldSize("field149", apache::thrift::protocol::T_I16, 149);
  xfer += prot_->serializedSizeI16(this->field149);
  xfer += prot_->serializedFieldSize("field150", apache::thrift::protocol::T_SET, 150);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::set<std::map<int16_t, float>>>::serializedSize<false>(*prot_, this->field150);
  xfer += prot_->serializedFieldSize("field151", apache::thrift::protocol::T_STRUCT, 151);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct14>::serializedSizeZC(prot_, &this->field151);
  xfer += prot_->serializedFieldSize("field152", apache::thrift::protocol::T_STRUCT, 152);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field152);
  xfer += prot_->serializedFieldSize("field153", apache::thrift::protocol::T_SET, 153);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field153);
  xfer += prot_->serializedFieldSize("field154", apache::thrift::protocol::T_LIST, 154);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field154);
  xfer += prot_->serializedFieldSize("field155", apache::thrift::protocol::T_BYTE, 155);
  xfer += prot_->serializedSizeByte(this->field155);
  xfer += prot_->serializedFieldSize("field156", apache::thrift::protocol::T_BYTE, 156);
  xfer += prot_->serializedSizeByte(this->field156);
  xfer += prot_->serializedFieldSize("field157", apache::thrift::protocol::T_FLOAT, 157);
  xfer += prot_->serializedSizeFloat(this->field157);
  xfer += prot_->serializedFieldSize("field158", apache::thrift::protocol::T_STRUCT, 158);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field158);
  xfer += prot_->serializedFieldSize("field159", apache::thrift::protocol::T_I32, 159);
  xfer += prot_->serializedSizeI32(this->field159);
  xfer += prot_->serializedFieldSize("field160", apache::thrift::protocol::T_DOUBLE, 160);
  xfer += prot_->serializedSizeDouble(this->field160);
  xfer += prot_->serializedFieldSize("field161", apache::thrift::protocol::T_BOOL, 161);
  xfer += prot_->serializedSizeBool(this->field161);
  xfer += prot_->serializedFieldSize("field162", apache::thrift::protocol::T_LIST, 162);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field162);
  xfer += prot_->serializedFieldSize("field163", apache::thrift::protocol::T_MAP, 163);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>, std::map< ::cpp2::Struct7, std::map<int64_t,  ::cpp2::Struct4>>>::serializedSize<false>(*prot_, this->field163);
  xfer += prot_->serializedFieldSize("field164", apache::thrift::protocol::T_SET, 164);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field164);
  xfer += prot_->serializedFieldSize("field165", apache::thrift::protocol::T_LIST, 165);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field165);
  xfer += prot_->serializedFieldSize("field166", apache::thrift::protocol::T_SET, 166);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field166);
  xfer += prot_->serializedFieldSize("field167", apache::thrift::protocol::T_STRUCT, 167);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSizeZC(prot_, &this->field167);
  xfer += prot_->serializedFieldSize("field168", apache::thrift::protocol::T_STRING, 168);
  xfer += prot_->serializedSizeZCBinary(this->field168);
  xfer += prot_->serializedFieldSize("field169", apache::thrift::protocol::T_I16, 169);
  xfer += prot_->serializedSizeI16(this->field169);
  xfer += prot_->serializedFieldSize("field170", apache::thrift::protocol::T_STRING, 170);
  xfer += prot_->serializedSizeZCBinary(this->field170);
  xfer += prot_->serializedFieldSize("field171", apache::thrift::protocol::T_MAP, 171);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int16_t>>::serializedSize<false>(*prot_, this->field171);
  xfer += prot_->serializedFieldSize("field172", apache::thrift::protocol::T_SET, 172);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field172);
  xfer += prot_->serializedFieldSize("field173", apache::thrift::protocol::T_SET, 173);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct5>>::serializedSize<false>(*prot_, this->field173);
  xfer += prot_->serializedFieldSize("field174", apache::thrift::protocol::T_STRING, 174);
  xfer += prot_->serializedSizeZCBinary(this->field174);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct21::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct21");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_LIST, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_STRING, 3);
  xfer += prot_->writeString(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->writeByte(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_FLOAT, 5);
  xfer += prot_->writeFloat(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_DOUBLE, 6);
  xfer += prot_->writeDouble(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_MAP, 7);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<int16_t, std::vector<float>>>::write(*prot_, this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_FLOAT, 8);
  xfer += prot_->writeFloat(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::write(prot_, &this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_FLOAT, 10);
  xfer += prot_->writeFloat(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_STRING, 11);
  xfer += prot_->writeBinary(this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_BYTE, 12);
  xfer += prot_->writeByte(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_DOUBLE, 14);
  xfer += prot_->writeDouble(this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_I32, 15);
  xfer += prot_->writeI32(this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_I16, 16);
  xfer += prot_->writeI16(this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_STRUCT, 17);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_DOUBLE, 18);
  xfer += prot_->writeDouble(this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_I16, 19);
  xfer += prot_->writeI16(this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_I16, 20);
  xfer += prot_->writeI16(this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_MAP, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map< ::cpp2::Struct10, std::vector<double>>>::write(*prot_, this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_SET, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_LIST, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_SET, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_FLOAT, 25);
  xfer += prot_->writeFloat(this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_STRUCT, 26);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_MAP, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::write(*prot_, this->field27);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_I64, 28);
  xfer += prot_->writeI64(this->field28);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field29", apache::thrift::protocol::T_FLOAT, 29);
  xfer += prot_->writeFloat(this->field29);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field30", apache::thrift::protocol::T_LIST, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field30);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field31", apache::thrift::protocol::T_BYTE, 31);
  xfer += prot_->writeByte(this->field31);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field32", apache::thrift::protocol::T_LIST, 32);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field32);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field33", apache::thrift::protocol::T_SET, 33);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int16_t>>>::write(*prot_, this->field33);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field34", apache::thrift::protocol::T_STRUCT, 34);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct16>::write(prot_, &this->field34);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field35", apache::thrift::protocol::T_MAP, 35);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int16_t, std::string>>::write(*prot_, this->field35);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field36", apache::thrift::protocol::T_MAP, 36);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>>, std::map<bool, std::vector< ::cpp2::Struct5>>>::write(*prot_, this->field36);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field37", apache::thrift::protocol::T_I16, 37);
  xfer += prot_->writeI16(this->field37);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field38", apache::thrift::protocol::T_MAP, 38);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int16_t>>::write(*prot_, this->field38);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field39", apache::thrift::protocol::T_SET, 39);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field39);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field40", apache::thrift::protocol::T_BOOL, 40);
  xfer += prot_->writeBool(this->field40);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field41", apache::thrift::protocol::T_STRING, 41);
  xfer += prot_->writeBinary(this->field41);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field42", apache::thrift::protocol::T_I16, 42);
  xfer += prot_->writeI16(this->field42);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field43", apache::thrift::protocol::T_STRUCT, 43);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::write(prot_, &this->field43);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field44", apache::thrift::protocol::T_SET, 44);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field44);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field45", apache::thrift::protocol::T_MAP, 45);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>, std::map<int32_t,  ::cpp2::Struct3>>::write(*prot_, this->field45);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field46", apache::thrift::protocol::T_SET, 46);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field46);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field47", apache::thrift::protocol::T_STRUCT, 47);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field47);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field48", apache::thrift::protocol::T_I32, 48);
  xfer += prot_->writeI32(this->field48);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field49", apache::thrift::protocol::T_BYTE, 49);
  xfer += prot_->writeByte(this->field49);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field50", apache::thrift::protocol::T_BOOL, 50);
  xfer += prot_->writeBool(this->field50);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field51", apache::thrift::protocol::T_LIST, 51);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct10>>::write(*prot_, this->field51);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field52", apache::thrift::protocol::T_FLOAT, 52);
  xfer += prot_->writeFloat(this->field52);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field53", apache::thrift::protocol::T_SET, 53);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field53);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field54", apache::thrift::protocol::T_STRING, 54);
  xfer += prot_->writeString(this->field54);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field55", apache::thrift::protocol::T_STRUCT, 55);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::write(prot_, &this->field55);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field56", apache::thrift::protocol::T_LIST, 56);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field56);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field57", apache::thrift::protocol::T_MAP, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::map<std::string, std::vector<std::string>>>::write(*prot_, this->field57);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field58", apache::thrift::protocol::T_I64, 58);
  xfer += prot_->writeI64(this->field58);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field59", apache::thrift::protocol::T_BYTE, 59);
  xfer += prot_->writeByte(this->field59);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field60", apache::thrift::protocol::T_STRUCT, 60);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::write(prot_, &this->field60);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field61", apache::thrift::protocol::T_SET, 61);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field61);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field62", apache::thrift::protocol::T_I16, 62);
  xfer += prot_->writeI16(this->field62);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field63", apache::thrift::protocol::T_BOOL, 63);
  xfer += prot_->writeBool(this->field63);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field64", apache::thrift::protocol::T_BOOL, 64);
  xfer += prot_->writeBool(this->field64);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field65", apache::thrift::protocol::T_I32, 65);
  xfer += prot_->writeI32(this->field65);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field66", apache::thrift::protocol::T_STRING, 66);
  xfer += prot_->writeString(this->field66);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field67", apache::thrift::protocol::T_I32, 67);
  xfer += prot_->writeI32(this->field67);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field68", apache::thrift::protocol::T_SET, 68);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field68);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field69", apache::thrift::protocol::T_I32, 69);
  xfer += prot_->writeI32(this->field69);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field70", apache::thrift::protocol::T_SET, 70);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<float>>>::write(*prot_, this->field70);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field71", apache::thrift::protocol::T_I16, 71);
  xfer += prot_->writeI16(this->field71);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field72", apache::thrift::protocol::T_LIST, 72);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field72);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field73", apache::thrift::protocol::T_MAP, 73);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map< ::cpp2::Struct1, std::vector<int16_t>>>::write(*prot_, this->field73);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field74", apache::thrift::protocol::T_STRUCT, 74);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field74);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field75", apache::thrift::protocol::T_STRING, 75);
  xfer += prot_->writeString(this->field75);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field76", apache::thrift::protocol::T_LIST, 76);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<double>>>::write(*prot_, this->field76);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field77", apache::thrift::protocol::T_LIST, 77);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field77);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field78", apache::thrift::protocol::T_SET, 78);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct14>>::write(*prot_, this->field78);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field79", apache::thrift::protocol::T_STRING, 79);
  xfer += prot_->writeBinary(this->field79);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field80", apache::thrift::protocol::T_I32, 80);
  xfer += prot_->writeI32(this->field80);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field81", apache::thrift::protocol::T_I16, 81);
  xfer += prot_->writeI16(this->field81);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field82", apache::thrift::protocol::T_BOOL, 82);
  xfer += prot_->writeBool(this->field82);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field83", apache::thrift::protocol::T_MAP, 83);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::floating_point>, std::map< ::cpp2::Struct2, double>>::write(*prot_, this->field83);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field84", apache::thrift::protocol::T_LIST, 84);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>>, std::vector<std::map< ::cpp2::Struct2, bool>>>::write(*prot_, this->field84);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field85", apache::thrift::protocol::T_MAP, 85);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, std::map<bool, std::vector<std::string>>>::write(*prot_, this->field85);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field86", apache::thrift::protocol::T_STRUCT, 86);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::write(prot_, &this->field86);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field87", apache::thrift::protocol::T_STRING, 87);
  xfer += prot_->writeString(this->field87);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field88", apache::thrift::protocol::T_FLOAT, 88);
  xfer += prot_->writeFloat(this->field88);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field89", apache::thrift::protocol::T_LIST, 89);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field89);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field90", apache::thrift::protocol::T_I64, 90);
  xfer += prot_->writeI64(this->field90);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field91", apache::thrift::protocol::T_BOOL, 91);
  xfer += prot_->writeBool(this->field91);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field92", apache::thrift::protocol::T_MAP, 92);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<bool, std::vector<double>>>::write(*prot_, this->field92);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field93", apache::thrift::protocol::T_FLOAT, 93);
  xfer += prot_->writeFloat(this->field93);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field94", apache::thrift::protocol::T_BYTE, 94);
  xfer += prot_->writeByte(this->field94);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field95", apache::thrift::protocol::T_STRING, 95);
  xfer += prot_->writeString(this->field95);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field96", apache::thrift::protocol::T_STRUCT, 96);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::write(prot_, &this->field96);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field97", apache::thrift::protocol::T_STRING, 97);
  xfer += prot_->writeString(this->field97);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field98", apache::thrift::protocol::T_I16, 98);
  xfer += prot_->writeI16(this->field98);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field99", apache::thrift::protocol::T_SET, 99);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field99);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field100", apache::thrift::protocol::T_MAP, 100);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int64_t>>::write(*prot_, this->field100);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field101", apache::thrift::protocol::T_I16, 101);
  xfer += prot_->writeI16(this->field101);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field102", apache::thrift::protocol::T_SET, 102);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field102);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field103", apache::thrift::protocol::T_STRING, 103);
  xfer += prot_->writeBinary(this->field103);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field104", apache::thrift::protocol::T_I16, 104);
  xfer += prot_->writeI16(this->field104);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field105", apache::thrift::protocol::T_MAP, 105);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::write(*prot_, this->field105);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field106", apache::thrift::protocol::T_STRING, 106);
  xfer += prot_->writeBinary(this->field106);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field107", apache::thrift::protocol::T_SET, 107);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field107);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field108", apache::thrift::protocol::T_STRUCT, 108);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::write(prot_, &this->field108);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field109", apache::thrift::protocol::T_I16, 109);
  xfer += prot_->writeI16(this->field109);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field110", apache::thrift::protocol::T_STRING, 110);
  xfer += prot_->writeBinary(this->field110);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field111", apache::thrift::protocol::T_I32, 111);
  xfer += prot_->writeI32(this->field111);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field112", apache::thrift::protocol::T_SET, 112);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field112);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field113", apache::thrift::protocol::T_LIST, 113);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field113);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field114", apache::thrift::protocol::T_I16, 114);
  xfer += prot_->writeI16(this->field114);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field115", apache::thrift::protocol::T_BYTE, 115);
  xfer += prot_->writeByte(this->field115);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field116", apache::thrift::protocol::T_I64, 116);
  xfer += prot_->writeI64(this->field116);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field117", apache::thrift::protocol::T_MAP, 117);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int16_t>>::write(*prot_, this->field117);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field118", apache::thrift::protocol::T_I64, 118);
  xfer += prot_->writeI64(this->field118);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field119", apache::thrift::protocol::T_LIST, 119);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field119);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field120", apache::thrift::protocol::T_I64, 120);
  xfer += prot_->writeI64(this->field120);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field121", apache::thrift::protocol::T_STRING, 121);
  xfer += prot_->writeString(this->field121);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field122", apache::thrift::protocol::T_I64, 122);
  xfer += prot_->writeI64(this->field122);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field123", apache::thrift::protocol::T_MAP, 123);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::map<std::string, std::map<int8_t, double>>>::write(*prot_, this->field123);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field124", apache::thrift::protocol::T_STRING, 124);
  xfer += prot_->writeString(this->field124);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field125", apache::thrift::protocol::T_BOOL, 125);
  xfer += prot_->writeBool(this->field125);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field126", apache::thrift::protocol::T_BYTE, 126);
  xfer += prot_->writeByte(this->field126);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field127", apache::thrift::protocol::T_I16, 127);
  xfer += prot_->writeI16(this->field127);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field128", apache::thrift::protocol::T_STRING, 128);
  xfer += prot_->writeString(this->field128);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field129", apache::thrift::protocol::T_MAP, 129);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<std::string, std::set<int32_t>>>::write(*prot_, this->field129);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field130", apache::thrift::protocol::T_MAP, 130);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int64_t, std::string>>::write(*prot_, this->field130);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field131", apache::thrift::protocol::T_MAP, 131);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map< ::cpp2::Struct18, std::set<int8_t>>>::write(*prot_, this->field131);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field132", apache::thrift::protocol::T_BYTE, 132);
  xfer += prot_->writeByte(this->field132);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field133", apache::thrift::protocol::T_DOUBLE, 133);
  xfer += prot_->writeDouble(this->field133);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field134", apache::thrift::protocol::T_MAP, 134);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int8_t>>::write(*prot_, this->field134);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field135", apache::thrift::protocol::T_I32, 135);
  xfer += prot_->writeI32(this->field135);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field136", apache::thrift::protocol::T_MAP, 136);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int32_t, std::string>>::write(*prot_, this->field136);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field137", apache::thrift::protocol::T_LIST, 137);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field137);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field138", apache::thrift::protocol::T_MAP, 138);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, std::map<std::string, int16_t>>::write(*prot_, this->field138);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field139", apache::thrift::protocol::T_STRUCT, 139);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::write(prot_, &this->field139);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field140", apache::thrift::protocol::T_I32, 140);
  xfer += prot_->writeI32(this->field140);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field141", apache::thrift::protocol::T_STRING, 141);
  xfer += prot_->writeString(this->field141);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field142", apache::thrift::protocol::T_BYTE, 142);
  xfer += prot_->writeByte(this->field142);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field143", apache::thrift::protocol::T_I32, 143);
  xfer += prot_->writeI32(this->field143);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field144", apache::thrift::protocol::T_SET, 144);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field144);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field145", apache::thrift::protocol::T_LIST, 145);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field145);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field146", apache::thrift::protocol::T_I64, 146);
  xfer += prot_->writeI64(this->field146);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field147", apache::thrift::protocol::T_SET, 147);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field147);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field148", apache::thrift::protocol::T_STRING, 148);
  xfer += prot_->writeString(this->field148);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field149", apache::thrift::protocol::T_I16, 149);
  xfer += prot_->writeI16(this->field149);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field150", apache::thrift::protocol::T_SET, 150);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>, std::set<std::map<int16_t, float>>>::write(*prot_, this->field150);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field151", apache::thrift::protocol::T_STRUCT, 151);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct14>::write(prot_, &this->field151);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field152", apache::thrift::protocol::T_STRUCT, 152);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field152);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field153", apache::thrift::protocol::T_SET, 153);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field153);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field154", apache::thrift::protocol::T_LIST, 154);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field154);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field155", apache::thrift::protocol::T_BYTE, 155);
  xfer += prot_->writeByte(this->field155);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field156", apache::thrift::protocol::T_BYTE, 156);
  xfer += prot_->writeByte(this->field156);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field157", apache::thrift::protocol::T_FLOAT, 157);
  xfer += prot_->writeFloat(this->field157);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field158", apache::thrift::protocol::T_STRUCT, 158);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field158);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field159", apache::thrift::protocol::T_I32, 159);
  xfer += prot_->writeI32(this->field159);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field160", apache::thrift::protocol::T_DOUBLE, 160);
  xfer += prot_->writeDouble(this->field160);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field161", apache::thrift::protocol::T_BOOL, 161);
  xfer += prot_->writeBool(this->field161);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field162", apache::thrift::protocol::T_LIST, 162);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field162);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field163", apache::thrift::protocol::T_MAP, 163);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::structure>>, std::map< ::cpp2::Struct7, std::map<int64_t,  ::cpp2::Struct4>>>::write(*prot_, this->field163);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field164", apache::thrift::protocol::T_SET, 164);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field164);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field165", apache::thrift::protocol::T_LIST, 165);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->field165);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field166", apache::thrift::protocol::T_SET, 166);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field166);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field167", apache::thrift::protocol::T_STRUCT, 167);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::write(prot_, &this->field167);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field168", apache::thrift::protocol::T_STRING, 168);
  xfer += prot_->writeBinary(this->field168);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field169", apache::thrift::protocol::T_I16, 169);
  xfer += prot_->writeI16(this->field169);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field170", apache::thrift::protocol::T_STRING, 170);
  xfer += prot_->writeBinary(this->field170);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field171", apache::thrift::protocol::T_MAP, 171);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int16_t>>::write(*prot_, this->field171);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field172", apache::thrift::protocol::T_SET, 172);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field172);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field173", apache::thrift::protocol::T_SET, 173);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct5>>::write(*prot_, this->field173);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field174", apache::thrift::protocol::T_STRING, 174);
  xfer += prot_->writeBinary(this->field174);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace cpp2 {

template <class Protocol_>
uint32_t Struct22::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::read(iprot, &this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field4 = std::map<float, std::vector<bool>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<float, std::vector<bool>>>::read(*iprot, this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field5 = std::map<std::string, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::read(*iprot, this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field8 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field10 = std::map< ::cpp2::Struct3, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct3, bool>>::read(*iprot, this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field13 = std::vector<std::vector<float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<float>>>::read(*iprot, this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field15 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::read(iprot, &this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field18 = std::map<int64_t, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int8_t>>::read(*iprot, this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::read(iprot, &this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field27);
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field28 = std::vector<std::vector<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::vector<std::vector<std::string>>>::read(*iprot, this->field28);
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field29 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field29);
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 30:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field30);
          this->__isset.field30 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 31:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field31 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field31);
          this->__isset.field31 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 32:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field32);
          this->__isset.field32 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 33:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field33);
          this->__isset.field33 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 34:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field34 = std::map<std::string, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::string>, std::map<std::string, std::string>>::read(*iprot, this->field34);
          this->__isset.field34 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 35:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field35 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field35);
          this->__isset.field35 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 36:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field36 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field36);
          this->__isset.field36 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 37:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field37 = std::vector< ::cpp2::Struct2>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct2>>::read(*iprot, this->field37);
          this->__isset.field37 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 38:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field38);
          this->__isset.field38 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 39:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field39 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field39);
          this->__isset.field39 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 40:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field40);
          this->__isset.field40 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 41:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field41 = std::map<int64_t, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int64_t, float>>::read(*iprot, this->field41);
          this->__isset.field41 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 42:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field42);
          this->__isset.field42 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 43:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field43);
          this->__isset.field43 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 44:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field44 = std::map<int16_t, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int16_t, float>>::read(*iprot, this->field44);
          this->__isset.field44 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 45:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field45);
          this->__isset.field45 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 46:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field46);
          this->__isset.field46 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 47:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field47);
          this->__isset.field47 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 48:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::read(iprot, &this->field48);
          this->__isset.field48 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 49:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field49 = std::map<double, std::vector<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::map<double, std::vector<std::string>>>::read(*iprot, this->field49);
          this->__isset.field49 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 50:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field50);
          this->__isset.field50 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 51:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field51 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field51);
          this->__isset.field51 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 52:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field52 = std::map<float, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, float>>::read(*iprot, this->field52);
          this->__isset.field52 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 53:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field53);
          this->__isset.field53 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 54:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field54);
          this->__isset.field54 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 55:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field55);
          this->__isset.field55 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 56:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::read(iprot, &this->field56);
          this->__isset.field56 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 57:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field57);
          this->__isset.field57 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 58:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field58 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field58);
          this->__isset.field58 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 59:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field59);
          this->__isset.field59 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 60:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field60);
          this->__isset.field60 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 61:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field61);
          this->__isset.field61 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 62:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field62);
          this->__isset.field62 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 63:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field63 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field63);
          this->__isset.field63 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 64:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field64);
          this->__isset.field64 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 65:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field65);
          this->__isset.field65 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 66:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field66 = std::map<int8_t, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int8_t, std::string>>::read(*iprot, this->field66);
          this->__isset.field66 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 67:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field67);
          this->__isset.field67 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 68:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field68);
          this->__isset.field68 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 69:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field69);
          this->__isset.field69 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 70:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field70 = std::map<int32_t, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int8_t>>::read(*iprot, this->field70);
          this->__isset.field70 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 71:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field71);
          this->__isset.field71 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 72:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field72);
          this->__isset.field72 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 73:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field73);
          this->__isset.field73 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 74:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field74);
          this->__isset.field74 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 75:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field75 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field75);
          this->__isset.field75 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 76:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::read(iprot, &this->field76);
          this->__isset.field76 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 77:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field77 = std::map<double, std::map<float, std::vector<int32_t>>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>>, std::map<double, std::map<float, std::vector<int32_t>>>>::read(*iprot, this->field77);
          this->__isset.field77 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 78:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field78 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field78);
          this->__isset.field78 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 79:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::read(iprot, &this->field79);
          this->__isset.field79 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 80:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field80);
          this->__isset.field80 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 81:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field81);
          this->__isset.field81 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 82:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field82);
          this->__isset.field82 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 83:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field83 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field83);
          this->__isset.field83 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 84:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field84 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field84);
          this->__isset.field84 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 85:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field85);
          this->__isset.field85 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 86:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field86);
          this->__isset.field86 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 87:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::read(iprot, &this->field87);
          this->__isset.field87 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 88:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field88);
          this->__isset.field88 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 89:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field89 = std::vector<std::vector<int8_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int8_t>>>::read(*iprot, this->field89);
          this->__isset.field89 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 90:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field90);
          this->__isset.field90 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 91:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field91);
          this->__isset.field91 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 92:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field92 = std::set<std::vector<int16_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int16_t>>>::read(*iprot, this->field92);
          this->__isset.field92 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 93:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field93);
          this->__isset.field93 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 94:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field94);
          this->__isset.field94 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 95:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field95 = std::map<float, std::set<int64_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<float, std::set<int64_t>>>::read(*iprot, this->field95);
          this->__isset.field95 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct22::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct22");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += prot_->serializedSizeDouble(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSize(prot_, &this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<float, std::vector<bool>>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_BOOL, 6);
  xfer += prot_->serializedSizeBool(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_FLOAT, 7);
  xfer += prot_->serializedSizeFloat(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_SET, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRING, 9);
  xfer += prot_->serializedSizeString(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct3, bool>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_FLOAT, 11);
  xfer += prot_->serializedSizeFloat(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_FLOAT, 12);
  xfer += prot_->serializedSizeFloat(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<float>>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_FLOAT, 14);
  xfer += prot_->serializedSizeFloat(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_LIST, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_BYTE, 16);
  xfer += prot_->serializedSizeByte(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_STRUCT, 17);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSize(prot_, &this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_MAP, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int8_t>>::serializedSize<false>(*prot_, this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_I32, 19);
  xfer += prot_->serializedSizeI32(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_DOUBLE, 20);
  xfer += prot_->serializedSizeDouble(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_FLOAT, 21);
  xfer += prot_->serializedSizeFloat(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_BYTE, 22);
  xfer += prot_->serializedSizeByte(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_BYTE, 23);
  xfer += prot_->serializedSizeByte(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_STRUCT, 24);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::serializedSize(prot_, &this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_FLOAT, 25);
  xfer += prot_->serializedSizeFloat(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_STRING, 26);
  xfer += prot_->serializedSizeString(this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_I16, 27);
  xfer += prot_->serializedSizeI16(this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_LIST, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::vector<std::vector<std::string>>>::serializedSize<false>(*prot_, this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_LIST, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_BYTE, 30);
  xfer += prot_->serializedSizeByte(this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_SET, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_STRUCT, 32);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_BYTE, 33);
  xfer += prot_->serializedSizeByte(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_MAP, 34);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::string>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_LIST, 35);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_LIST, 36);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_LIST, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct2>>::serializedSize<false>(*prot_, this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_STRING, 38);
  xfer += prot_->serializedSizeBinary(this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_SET, 39);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_BOOL, 40);
  xfer += prot_->serializedSizeBool(this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_MAP, 41);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int64_t, float>>::serializedSize<false>(*prot_, this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_STRING, 42);
  xfer += prot_->serializedSizeString(this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_I16, 43);
  xfer += prot_->serializedSizeI16(this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_MAP, 44);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int16_t, float>>::serializedSize<false>(*prot_, this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_BOOL, 45);
  xfer += prot_->serializedSizeBool(this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_I16, 46);
  xfer += prot_->serializedSizeI16(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_STRING, 47);
  xfer += prot_->serializedSizeBinary(this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_STRUCT, 48);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSize(prot_, &this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_MAP, 49);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::map<double, std::vector<std::string>>>::serializedSize<false>(*prot_, this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_FLOAT, 50);
  xfer += prot_->serializedSizeFloat(this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_SET, 51);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_MAP, 52);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, float>>::serializedSize<false>(*prot_, this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_I16, 53);
  xfer += prot_->serializedSizeI16(this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_I64, 54);
  xfer += prot_->serializedSizeI64(this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_BYTE, 55);
  xfer += prot_->serializedSizeByte(this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_STRUCT, 56);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSize(prot_, &this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_DOUBLE, 57);
  xfer += prot_->serializedSizeDouble(this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_LIST, 58);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_I32, 59);
  xfer += prot_->serializedSizeI32(this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_STRING, 60);
  xfer += prot_->serializedSizeBinary(this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_STRING, 61);
  xfer += prot_->serializedSizeBinary(this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_DOUBLE, 62);
  xfer += prot_->serializedSizeDouble(this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_SET, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_BOOL, 64);
  xfer += prot_->serializedSizeBool(this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_FLOAT, 65);
  xfer += prot_->serializedSizeFloat(this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_MAP, 66);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int8_t, std::string>>::serializedSize<false>(*prot_, this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_I64, 67);
  xfer += prot_->serializedSizeI64(this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_I16, 68);
  xfer += prot_->serializedSizeI16(this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_BYTE, 69);
  xfer += prot_->serializedSizeByte(this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_MAP, 70);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int8_t>>::serializedSize<false>(*prot_, this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_I64, 71);
  xfer += prot_->serializedSizeI64(this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_FLOAT, 72);
  xfer += prot_->serializedSizeFloat(this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_STRING, 73);
  xfer += prot_->serializedSizeBinary(this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_BYTE, 74);
  xfer += prot_->serializedSizeByte(this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_LIST, 75);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_STRUCT, 76);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::serializedSize(prot_, &this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_MAP, 77);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>>, std::map<double, std::map<float, std::vector<int32_t>>>>::serializedSize<false>(*prot_, this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_LIST, 78);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_STRUCT, 79);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSize(prot_, &this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_I16, 80);
  xfer += prot_->serializedSizeI16(this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_I64, 81);
  xfer += prot_->serializedSizeI64(this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_DOUBLE, 82);
  xfer += prot_->serializedSizeDouble(this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_LIST, 83);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_SET, 84);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_I64, 85);
  xfer += prot_->serializedSizeI64(this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_STRUCT, 86);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_STRUCT, 87);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::serializedSize(prot_, &this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_BYTE, 88);
  xfer += prot_->serializedSizeByte(this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_LIST, 89);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int8_t>>>::serializedSize<false>(*prot_, this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_STRING, 90);
  xfer += prot_->serializedSizeBinary(this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_I16, 91);
  xfer += prot_->serializedSizeI16(this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_SET, 92);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int16_t>>>::serializedSize<false>(*prot_, this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_I64, 93);
  xfer += prot_->serializedSizeI64(this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_STRING, 94);
  xfer += prot_->serializedSizeBinary(this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_MAP, 95);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<float, std::set<int64_t>>>::serializedSize<false>(*prot_, this->field95);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct22::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct22");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += prot_->serializedSizeDouble(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSizeZC(prot_, &this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<float, std::vector<bool>>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_BOOL, 6);
  xfer += prot_->serializedSizeBool(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_FLOAT, 7);
  xfer += prot_->serializedSizeFloat(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_SET, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_STRING, 9);
  xfer += prot_->serializedSizeString(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct3, bool>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_FLOAT, 11);
  xfer += prot_->serializedSizeFloat(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_FLOAT, 12);
  xfer += prot_->serializedSizeFloat(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<float>>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_FLOAT, 14);
  xfer += prot_->serializedSizeFloat(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_LIST, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_BYTE, 16);
  xfer += prot_->serializedSizeByte(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_STRUCT, 17);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSizeZC(prot_, &this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_MAP, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int8_t>>::serializedSize<false>(*prot_, this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_I32, 19);
  xfer += prot_->serializedSizeI32(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_DOUBLE, 20);
  xfer += prot_->serializedSizeDouble(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_FLOAT, 21);
  xfer += prot_->serializedSizeFloat(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_BYTE, 22);
  xfer += prot_->serializedSizeByte(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_BYTE, 23);
  xfer += prot_->serializedSizeByte(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_STRUCT, 24);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::serializedSizeZC(prot_, &this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_FLOAT, 25);
  xfer += prot_->serializedSizeFloat(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_STRING, 26);
  xfer += prot_->serializedSizeString(this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_I16, 27);
  xfer += prot_->serializedSizeI16(this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_LIST, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::vector<std::vector<std::string>>>::serializedSize<false>(*prot_, this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_LIST, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_BYTE, 30);
  xfer += prot_->serializedSizeByte(this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_SET, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_STRUCT, 32);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_BYTE, 33);
  xfer += prot_->serializedSizeByte(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_MAP, 34);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::string>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_LIST, 35);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_LIST, 36);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_LIST, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct2>>::serializedSize<false>(*prot_, this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_STRING, 38);
  xfer += prot_->serializedSizeZCBinary(this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_SET, 39);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_BOOL, 40);
  xfer += prot_->serializedSizeBool(this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_MAP, 41);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int64_t, float>>::serializedSize<false>(*prot_, this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_STRING, 42);
  xfer += prot_->serializedSizeString(this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_I16, 43);
  xfer += prot_->serializedSizeI16(this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_MAP, 44);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int16_t, float>>::serializedSize<false>(*prot_, this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_BOOL, 45);
  xfer += prot_->serializedSizeBool(this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_I16, 46);
  xfer += prot_->serializedSizeI16(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_STRING, 47);
  xfer += prot_->serializedSizeZCBinary(this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_STRUCT, 48);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSizeZC(prot_, &this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_MAP, 49);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::map<double, std::vector<std::string>>>::serializedSize<false>(*prot_, this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_FLOAT, 50);
  xfer += prot_->serializedSizeFloat(this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_SET, 51);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_MAP, 52);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, float>>::serializedSize<false>(*prot_, this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_I16, 53);
  xfer += prot_->serializedSizeI16(this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_I64, 54);
  xfer += prot_->serializedSizeI64(this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_BYTE, 55);
  xfer += prot_->serializedSizeByte(this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_STRUCT, 56);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSizeZC(prot_, &this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_DOUBLE, 57);
  xfer += prot_->serializedSizeDouble(this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_LIST, 58);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_I32, 59);
  xfer += prot_->serializedSizeI32(this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_STRING, 60);
  xfer += prot_->serializedSizeZCBinary(this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_STRING, 61);
  xfer += prot_->serializedSizeZCBinary(this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_DOUBLE, 62);
  xfer += prot_->serializedSizeDouble(this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_SET, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_BOOL, 64);
  xfer += prot_->serializedSizeBool(this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_FLOAT, 65);
  xfer += prot_->serializedSizeFloat(this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_MAP, 66);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int8_t, std::string>>::serializedSize<false>(*prot_, this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_I64, 67);
  xfer += prot_->serializedSizeI64(this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_I16, 68);
  xfer += prot_->serializedSizeI16(this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_BYTE, 69);
  xfer += prot_->serializedSizeByte(this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_MAP, 70);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int8_t>>::serializedSize<false>(*prot_, this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_I64, 71);
  xfer += prot_->serializedSizeI64(this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_FLOAT, 72);
  xfer += prot_->serializedSizeFloat(this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_STRING, 73);
  xfer += prot_->serializedSizeZCBinary(this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_BYTE, 74);
  xfer += prot_->serializedSizeByte(this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_LIST, 75);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_STRUCT, 76);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::serializedSizeZC(prot_, &this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_MAP, 77);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>>, std::map<double, std::map<float, std::vector<int32_t>>>>::serializedSize<false>(*prot_, this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_LIST, 78);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_STRUCT, 79);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSizeZC(prot_, &this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_I16, 80);
  xfer += prot_->serializedSizeI16(this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_I64, 81);
  xfer += prot_->serializedSizeI64(this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_DOUBLE, 82);
  xfer += prot_->serializedSizeDouble(this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_LIST, 83);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_SET, 84);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_I64, 85);
  xfer += prot_->serializedSizeI64(this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_STRUCT, 86);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_STRUCT, 87);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::serializedSizeZC(prot_, &this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_BYTE, 88);
  xfer += prot_->serializedSizeByte(this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_LIST, 89);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int8_t>>>::serializedSize<false>(*prot_, this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_STRING, 90);
  xfer += prot_->serializedSizeZCBinary(this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_I16, 91);
  xfer += prot_->serializedSizeI16(this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_SET, 92);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int16_t>>>::serializedSize<false>(*prot_, this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_I64, 93);
  xfer += prot_->serializedSizeI64(this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_STRING, 94);
  xfer += prot_->serializedSizeZCBinary(this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_MAP, 95);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<float, std::set<int64_t>>>::serializedSize<false>(*prot_, this->field95);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct22::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct22");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += prot_->writeDouble(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->writeI32(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::write(prot_, &this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<float, std::vector<bool>>>::write(*prot_, this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::integral>, std::map<std::string, bool>>::write(*prot_, this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_BOOL, 6);
  xfer += prot_->writeBool(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_FLOAT, 7);
  xfer += prot_->writeFloat(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_SET, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_STRING, 9);
  xfer += prot_->writeString(this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct3, bool>>::write(*prot_, this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_FLOAT, 11);
  xfer += prot_->writeFloat(this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_FLOAT, 12);
  xfer += prot_->writeFloat(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_LIST, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<float>>>::write(*prot_, this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_FLOAT, 14);
  xfer += prot_->writeFloat(this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_LIST, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_BYTE, 16);
  xfer += prot_->writeByte(this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_STRUCT, 17);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::write(prot_, &this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_MAP, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int8_t>>::write(*prot_, this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_I32, 19);
  xfer += prot_->writeI32(this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_DOUBLE, 20);
  xfer += prot_->writeDouble(this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_FLOAT, 21);
  xfer += prot_->writeFloat(this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_BYTE, 22);
  xfer += prot_->writeByte(this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_BYTE, 23);
  xfer += prot_->writeByte(this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_STRUCT, 24);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::write(prot_, &this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_FLOAT, 25);
  xfer += prot_->writeFloat(this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_STRING, 26);
  xfer += prot_->writeString(this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_I16, 27);
  xfer += prot_->writeI16(this->field27);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_LIST, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::vector<std::vector<std::string>>>::write(*prot_, this->field28);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field29", apache::thrift::protocol::T_LIST, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field29);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field30", apache::thrift::protocol::T_BYTE, 30);
  xfer += prot_->writeByte(this->field30);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field31", apache::thrift::protocol::T_SET, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field31);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field32", apache::thrift::protocol::T_STRUCT, 32);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field32);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field33", apache::thrift::protocol::T_BYTE, 33);
  xfer += prot_->writeByte(this->field33);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field34", apache::thrift::protocol::T_MAP, 34);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::string>, std::map<std::string, std::string>>::write(*prot_, this->field34);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field35", apache::thrift::protocol::T_LIST, 35);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field35);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field36", apache::thrift::protocol::T_LIST, 36);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field36);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field37", apache::thrift::protocol::T_LIST, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct2>>::write(*prot_, this->field37);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field38", apache::thrift::protocol::T_STRING, 38);
  xfer += prot_->writeBinary(this->field38);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field39", apache::thrift::protocol::T_SET, 39);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field39);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field40", apache::thrift::protocol::T_BOOL, 40);
  xfer += prot_->writeBool(this->field40);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field41", apache::thrift::protocol::T_MAP, 41);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int64_t, float>>::write(*prot_, this->field41);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field42", apache::thrift::protocol::T_STRING, 42);
  xfer += prot_->writeString(this->field42);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field43", apache::thrift::protocol::T_I16, 43);
  xfer += prot_->writeI16(this->field43);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field44", apache::thrift::protocol::T_MAP, 44);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int16_t, float>>::write(*prot_, this->field44);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field45", apache::thrift::protocol::T_BOOL, 45);
  xfer += prot_->writeBool(this->field45);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field46", apache::thrift::protocol::T_I16, 46);
  xfer += prot_->writeI16(this->field46);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field47", apache::thrift::protocol::T_STRING, 47);
  xfer += prot_->writeBinary(this->field47);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field48", apache::thrift::protocol::T_STRUCT, 48);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::write(prot_, &this->field48);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field49", apache::thrift::protocol::T_MAP, 49);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::map<double, std::vector<std::string>>>::write(*prot_, this->field49);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field50", apache::thrift::protocol::T_FLOAT, 50);
  xfer += prot_->writeFloat(this->field50);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field51", apache::thrift::protocol::T_SET, 51);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field51);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field52", apache::thrift::protocol::T_MAP, 52);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, float>>::write(*prot_, this->field52);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field53", apache::thrift::protocol::T_I16, 53);
  xfer += prot_->writeI16(this->field53);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field54", apache::thrift::protocol::T_I64, 54);
  xfer += prot_->writeI64(this->field54);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field55", apache::thrift::protocol::T_BYTE, 55);
  xfer += prot_->writeByte(this->field55);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field56", apache::thrift::protocol::T_STRUCT, 56);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::write(prot_, &this->field56);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field57", apache::thrift::protocol::T_DOUBLE, 57);
  xfer += prot_->writeDouble(this->field57);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field58", apache::thrift::protocol::T_LIST, 58);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field58);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field59", apache::thrift::protocol::T_I32, 59);
  xfer += prot_->writeI32(this->field59);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field60", apache::thrift::protocol::T_STRING, 60);
  xfer += prot_->writeBinary(this->field60);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field61", apache::thrift::protocol::T_STRING, 61);
  xfer += prot_->writeBinary(this->field61);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field62", apache::thrift::protocol::T_DOUBLE, 62);
  xfer += prot_->writeDouble(this->field62);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field63", apache::thrift::protocol::T_SET, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field63);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field64", apache::thrift::protocol::T_BOOL, 64);
  xfer += prot_->writeBool(this->field64);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field65", apache::thrift::protocol::T_FLOAT, 65);
  xfer += prot_->writeFloat(this->field65);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field66", apache::thrift::protocol::T_MAP, 66);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int8_t, std::string>>::write(*prot_, this->field66);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field67", apache::thrift::protocol::T_I64, 67);
  xfer += prot_->writeI64(this->field67);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field68", apache::thrift::protocol::T_I16, 68);
  xfer += prot_->writeI16(this->field68);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field69", apache::thrift::protocol::T_BYTE, 69);
  xfer += prot_->writeByte(this->field69);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field70", apache::thrift::protocol::T_MAP, 70);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int8_t>>::write(*prot_, this->field70);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field71", apache::thrift::protocol::T_I64, 71);
  xfer += prot_->writeI64(this->field71);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field72", apache::thrift::protocol::T_FLOAT, 72);
  xfer += prot_->writeFloat(this->field72);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field73", apache::thrift::protocol::T_STRING, 73);
  xfer += prot_->writeBinary(this->field73);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field74", apache::thrift::protocol::T_BYTE, 74);
  xfer += prot_->writeByte(this->field74);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field75", apache::thrift::protocol::T_LIST, 75);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field75);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field76", apache::thrift::protocol::T_STRUCT, 76);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::write(prot_, &this->field76);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field77", apache::thrift::protocol::T_MAP, 77);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>>, std::map<double, std::map<float, std::vector<int32_t>>>>::write(*prot_, this->field77);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field78", apache::thrift::protocol::T_LIST, 78);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field78);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field79", apache::thrift::protocol::T_STRUCT, 79);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::write(prot_, &this->field79);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field80", apache::thrift::protocol::T_I16, 80);
  xfer += prot_->writeI16(this->field80);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field81", apache::thrift::protocol::T_I64, 81);
  xfer += prot_->writeI64(this->field81);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field82", apache::thrift::protocol::T_DOUBLE, 82);
  xfer += prot_->writeDouble(this->field82);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field83", apache::thrift::protocol::T_LIST, 83);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field83);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field84", apache::thrift::protocol::T_SET, 84);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field84);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field85", apache::thrift::protocol::T_I64, 85);
  xfer += prot_->writeI64(this->field85);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field86", apache::thrift::protocol::T_STRUCT, 86);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field86);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field87", apache::thrift::protocol::T_STRUCT, 87);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::write(prot_, &this->field87);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field88", apache::thrift::protocol::T_BYTE, 88);
  xfer += prot_->writeByte(this->field88);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field89", apache::thrift::protocol::T_LIST, 89);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<int8_t>>>::write(*prot_, this->field89);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field90", apache::thrift::protocol::T_STRING, 90);
  xfer += prot_->writeBinary(this->field90);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field91", apache::thrift::protocol::T_I16, 91);
  xfer += prot_->writeI16(this->field91);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field92", apache::thrift::protocol::T_SET, 92);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int16_t>>>::write(*prot_, this->field92);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field93", apache::thrift::protocol::T_I64, 93);
  xfer += prot_->writeI64(this->field93);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field94", apache::thrift::protocol::T_STRING, 94);
  xfer += prot_->writeBinary(this->field94);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field95", apache::thrift::protocol::T_MAP, 95);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<float, std::set<int64_t>>>::write(*prot_, this->field95);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace cpp2 {

template <class Protocol_>
uint32_t Struct23::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::read(iprot, &this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::read(iprot, &this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::read(iprot, &this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field8 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field9 = std::map<std::set<int16_t>, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::string>, std::map<std::set<int16_t>, std::string>>::read(*iprot, this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::read(iprot, &this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field15 = std::vector<std::set<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::vector<std::set<std::string>>>::read(*iprot, this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field18 = std::map<int8_t, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int64_t>>::read(*iprot, this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field20 = std::vector<std::map<int8_t, bool>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::vector<std::map<int8_t, bool>>>::read(*iprot, this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field21 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field23 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field24 = std::map<std::map<double, float>, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::floating_point>, std::map<std::map<double, float>, float>>::read(*iprot, this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field26 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field27 = std::map< ::cpp2::Struct1, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct1, int64_t>>::read(*iprot, this->field27);
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field28 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field28);
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field29);
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 30:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field30);
          this->__isset.field30 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 31:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field31);
          this->__isset.field31 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 32:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field32);
          this->__isset.field32 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 33:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field33 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field33);
          this->__isset.field33 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 34:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field34);
          this->__isset.field34 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 35:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field35 = std::map<int32_t, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int16_t>>::read(*iprot, this->field35);
          this->__isset.field35 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 36:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field36);
          this->__isset.field36 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 37:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field37 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field37);
          this->__isset.field37 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 38:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field38 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field38);
          this->__isset.field38 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 39:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::read(iprot, &this->field39);
          this->__isset.field39 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 40:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::read(iprot, &this->field40);
          this->__isset.field40 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 41:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field41);
          this->__isset.field41 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct23::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct23");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::serializedSize(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::serializedSize(prot_, &this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeString(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRING, 5);
  xfer += prot_->serializedSizeString(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I64, 6);
  xfer += prot_->serializedSizeI64(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSize(prot_, &this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::string>, std::map<std::set<int16_t>, std::string>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_BYTE, 10);
  xfer += prot_->serializedSizeByte(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_I64, 11);
  xfer += prot_->serializedSizeI64(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_I64, 12);
  xfer += prot_->serializedSizeI64(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_STRING, 13);
  xfer += prot_->serializedSizeString(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_STRUCT, 14);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSize(prot_, &this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_LIST, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::vector<std::set<std::string>>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_STRUCT, 16);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_STRING, 17);
  xfer += prot_->serializedSizeString(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_MAP, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int64_t>>::serializedSize<false>(*prot_, this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_BYTE, 19);
  xfer += prot_->serializedSizeByte(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_LIST, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::vector<std::map<int8_t, bool>>>::serializedSize<false>(*prot_, this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_SET, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_I64, 22);
  xfer += prot_->serializedSizeI64(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_LIST, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_MAP, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::floating_point>, std::map<std::map<double, float>, float>>::serializedSize<false>(*prot_, this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_BYTE, 25);
  xfer += prot_->serializedSizeByte(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_SET, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_MAP, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct1, int64_t>>::serializedSize<false>(*prot_, this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_LIST, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_I64, 29);
  xfer += prot_->serializedSizeI64(this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_BOOL, 30);
  xfer += prot_->serializedSizeBool(this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_BOOL, 31);
  xfer += prot_->serializedSizeBool(this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_I32, 32);
  xfer += prot_->serializedSizeI32(this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_SET, 33);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_STRUCT, 34);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_MAP, 35);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int16_t>>::serializedSize<false>(*prot_, this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_FLOAT, 36);
  xfer += prot_->serializedSizeFloat(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_LIST, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_LIST, 38);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_STRUCT, 39);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSize(prot_, &this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_STRUCT, 40);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSize(prot_, &this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_I64, 41);
  xfer += prot_->serializedSizeI64(this->field41);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct23::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct23");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::serializedSizeZC(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::serializedSizeZC(prot_, &this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeString(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRING, 5);
  xfer += prot_->serializedSizeString(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I64, 6);
  xfer += prot_->serializedSizeI64(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSizeZC(prot_, &this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::string>, std::map<std::set<int16_t>, std::string>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_BYTE, 10);
  xfer += prot_->serializedSizeByte(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_I64, 11);
  xfer += prot_->serializedSizeI64(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_I64, 12);
  xfer += prot_->serializedSizeI64(this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_STRING, 13);
  xfer += prot_->serializedSizeString(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_STRUCT, 14);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSizeZC(prot_, &this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_LIST, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::vector<std::set<std::string>>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_STRUCT, 16);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_STRING, 17);
  xfer += prot_->serializedSizeString(this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_MAP, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int64_t>>::serializedSize<false>(*prot_, this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_BYTE, 19);
  xfer += prot_->serializedSizeByte(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_LIST, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::vector<std::map<int8_t, bool>>>::serializedSize<false>(*prot_, this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_SET, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_I64, 22);
  xfer += prot_->serializedSizeI64(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_LIST, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_MAP, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::floating_point>, std::map<std::map<double, float>, float>>::serializedSize<false>(*prot_, this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_BYTE, 25);
  xfer += prot_->serializedSizeByte(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_SET, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_MAP, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct1, int64_t>>::serializedSize<false>(*prot_, this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_LIST, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_I64, 29);
  xfer += prot_->serializedSizeI64(this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_BOOL, 30);
  xfer += prot_->serializedSizeBool(this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_BOOL, 31);
  xfer += prot_->serializedSizeBool(this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_I32, 32);
  xfer += prot_->serializedSizeI32(this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_SET, 33);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_STRUCT, 34);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_MAP, 35);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int16_t>>::serializedSize<false>(*prot_, this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_FLOAT, 36);
  xfer += prot_->serializedSizeFloat(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_LIST, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_LIST, 38);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_STRUCT, 39);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSizeZC(prot_, &this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_STRUCT, 40);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSizeZC(prot_, &this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_I64, 41);
  xfer += prot_->serializedSizeI64(this->field41);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct23::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct23");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->writeI16(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::write(prot_, &this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::write(prot_, &this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->writeString(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_STRING, 5);
  xfer += prot_->writeString(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_I64, 6);
  xfer += prot_->writeI64(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::write(prot_, &this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_LIST, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_MAP, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::string>, std::map<std::set<int16_t>, std::string>>::write(*prot_, this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_BYTE, 10);
  xfer += prot_->writeByte(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_I64, 11);
  xfer += prot_->writeI64(this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_I64, 12);
  xfer += prot_->writeI64(this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_STRING, 13);
  xfer += prot_->writeString(this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_STRUCT, 14);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::write(prot_, &this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_LIST, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::string>>, std::vector<std::set<std::string>>>::write(*prot_, this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_STRUCT, 16);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_STRING, 17);
  xfer += prot_->writeString(this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_MAP, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int64_t>>::write(*prot_, this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_BYTE, 19);
  xfer += prot_->writeByte(this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_LIST, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::vector<std::map<int8_t, bool>>>::write(*prot_, this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_SET, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_I64, 22);
  xfer += prot_->writeI64(this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_LIST, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_MAP, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::floating_point>, std::map<std::map<double, float>, float>>::write(*prot_, this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_BYTE, 25);
  xfer += prot_->writeByte(this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_SET, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_MAP, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct1, int64_t>>::write(*prot_, this->field27);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_LIST, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field28);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field29", apache::thrift::protocol::T_I64, 29);
  xfer += prot_->writeI64(this->field29);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field30", apache::thrift::protocol::T_BOOL, 30);
  xfer += prot_->writeBool(this->field30);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field31", apache::thrift::protocol::T_BOOL, 31);
  xfer += prot_->writeBool(this->field31);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field32", apache::thrift::protocol::T_I32, 32);
  xfer += prot_->writeI32(this->field32);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field33", apache::thrift::protocol::T_SET, 33);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field33);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field34", apache::thrift::protocol::T_STRUCT, 34);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field34);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field35", apache::thrift::protocol::T_MAP, 35);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, int16_t>>::write(*prot_, this->field35);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field36", apache::thrift::protocol::T_FLOAT, 36);
  xfer += prot_->writeFloat(this->field36);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field37", apache::thrift::protocol::T_LIST, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field37);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field38", apache::thrift::protocol::T_LIST, 38);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field38);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field39", apache::thrift::protocol::T_STRUCT, 39);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::write(prot_, &this->field39);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field40", apache::thrift::protocol::T_STRUCT, 40);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::write(prot_, &this->field40);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field41", apache::thrift::protocol::T_I64, 41);
  xfer += prot_->writeI64(this->field41);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace cpp2 {

template <class Protocol_>
uint32_t Struct24::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field1 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::read(iprot, &this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field6 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field12 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field13 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field14 = std::map<int64_t, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int64_t>>::read(*iprot, this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field15 = std::set<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::read(*iprot, this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field17 = std::map<std::map<double, int8_t>, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::map<double, int8_t>, int16_t>>::read(*iprot, this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field18 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field19 = std::map<std::string, std::map<double, int16_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::map<std::string, std::map<double, int16_t>>>::read(*iprot, this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field20 = std::map<float, double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, double>>::read(*iprot, this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::read(iprot, &this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field22 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field25 = std::vector<std::vector<bool>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<bool>>>::read(*iprot, this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field27);
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field28 = std::map<std::set<bool>, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::set<bool>, bool>>::read(*iprot, this->field28);
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field29);
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 30:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field30);
          this->__isset.field30 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 31:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field31);
          this->__isset.field31 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 32:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field32 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field32);
          this->__isset.field32 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 33:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field33 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field33);
          this->__isset.field33 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 34:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::read(iprot, &this->field34);
          this->__isset.field34 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 35:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field35);
          this->__isset.field35 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 36:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::read(iprot, &this->field36);
          this->__isset.field36 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 37:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::read(iprot, &this->field37);
          this->__isset.field37 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 38:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field38);
          this->__isset.field38 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 39:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field39);
          this->__isset.field39 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 40:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field40 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field40);
          this->__isset.field40 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 41:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field41);
          this->__isset.field41 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 42:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field42);
          this->__isset.field42 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 43:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::read(iprot, &this->field43);
          this->__isset.field43 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 44:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field44);
          this->__isset.field44 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 45:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field45);
          this->__isset.field45 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 46:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field46);
          this->__isset.field46 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 47:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field47);
          this->__isset.field47 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 48:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field48 = std::set< ::cpp2::Struct18>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct18>>::read(*iprot, this->field48);
          this->__isset.field48 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 49:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field49);
          this->__isset.field49 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 50:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field50);
          this->__isset.field50 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 51:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::read(iprot, &this->field51);
          this->__isset.field51 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 52:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field52 = std::set<std::vector<int64_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int64_t>>>::read(*iprot, this->field52);
          this->__isset.field52 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 53:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field53);
          this->__isset.field53 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 54:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field54);
          this->__isset.field54 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 55:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field55 = std::map<int8_t, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, bool>>::read(*iprot, this->field55);
          this->__isset.field55 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 56:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field56 = std::vector<std::vector<double>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<double>>>::read(*iprot, this->field56);
          this->__isset.field56 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct24::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct24");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSize(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_BOOL, 3);
  xfer += prot_->serializedSizeBool(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I64, 4);
  xfer += prot_->serializedSizeI64(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->serializedSizeI16(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_DOUBLE, 7);
  xfer += prot_->serializedSizeDouble(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->serializedSizeString(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_I16, 9);
  xfer += prot_->serializedSizeI16(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_FLOAT, 10);
  xfer += prot_->serializedSizeFloat(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_STRING, 11);
  xfer += prot_->serializedSizeBinary(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_SET, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_SET, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_MAP, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int64_t>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_SET, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_I16, 16);
  xfer += prot_->serializedSizeI16(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::map<double, int8_t>, int16_t>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_SET, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_MAP, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::map<std::string, std::map<double, int16_t>>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_MAP, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, double>>::serializedSize<false>(*prot_, this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_STRUCT, 21);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSize(prot_, &this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_SET, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_BOOL, 23);
  xfer += prot_->serializedSizeBool(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_I16, 24);
  xfer += prot_->serializedSizeI16(this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_LIST, 25);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<bool>>>::serializedSize<false>(*prot_, this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_STRING, 26);
  xfer += prot_->serializedSizeString(this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_I32, 27);
  xfer += prot_->serializedSizeI32(this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_MAP, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::set<bool>, bool>>::serializedSize<false>(*prot_, this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_I16, 29);
  xfer += prot_->serializedSizeI16(this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_BYTE, 30);
  xfer += prot_->serializedSizeByte(this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_BOOL, 31);
  xfer += prot_->serializedSizeBool(this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_LIST, 32);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_SET, 33);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_STRUCT, 34);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSize(prot_, &this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_STRUCT, 35);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_STRUCT, 36);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSize(prot_, &this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_STRUCT, 37);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSize(prot_, &this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_STRUCT, 38);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_BOOL, 39);
  xfer += prot_->serializedSizeBool(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_LIST, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_DOUBLE, 41);
  xfer += prot_->serializedSizeDouble(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_STRUCT, 42);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_STRUCT, 43);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSize(prot_, &this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_STRING, 44);
  xfer += prot_->serializedSizeString(this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_BYTE, 45);
  xfer += prot_->serializedSizeByte(this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_I64, 46);
  xfer += prot_->serializedSizeI64(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_I32, 47);
  xfer += prot_->serializedSizeI32(this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_SET, 48);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct18>>::serializedSize<false>(*prot_, this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_FLOAT, 49);
  xfer += prot_->serializedSizeFloat(this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_BYTE, 50);
  xfer += prot_->serializedSizeByte(this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_STRUCT, 51);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSize(prot_, &this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_SET, 52);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int64_t>>>::serializedSize<false>(*prot_, this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_STRING, 53);
  xfer += prot_->serializedSizeString(this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_BYTE, 54);
  xfer += prot_->serializedSizeByte(this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_MAP, 55);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, bool>>::serializedSize<false>(*prot_, this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_LIST, 56);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<double>>>::serializedSize<false>(*prot_, this->field56);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct24::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct24");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSizeZC(prot_, &this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_BOOL, 3);
  xfer += prot_->serializedSizeBool(this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_I64, 4);
  xfer += prot_->serializedSizeI64(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->serializedSizeI16(this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_DOUBLE, 7);
  xfer += prot_->serializedSizeDouble(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->serializedSizeString(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_I16, 9);
  xfer += prot_->serializedSizeI16(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_FLOAT, 10);
  xfer += prot_->serializedSizeFloat(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_STRING, 11);
  xfer += prot_->serializedSizeZCBinary(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_SET, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_SET, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_MAP, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int64_t>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_SET, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_I16, 16);
  xfer += prot_->serializedSizeI16(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::map<double, int8_t>, int16_t>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_SET, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_MAP, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::map<std::string, std::map<double, int16_t>>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_MAP, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, double>>::serializedSize<false>(*prot_, this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_STRUCT, 21);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSizeZC(prot_, &this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_SET, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_BOOL, 23);
  xfer += prot_->serializedSizeBool(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_I16, 24);
  xfer += prot_->serializedSizeI16(this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_LIST, 25);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<bool>>>::serializedSize<false>(*prot_, this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_STRING, 26);
  xfer += prot_->serializedSizeString(this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_I32, 27);
  xfer += prot_->serializedSizeI32(this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_MAP, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::set<bool>, bool>>::serializedSize<false>(*prot_, this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_I16, 29);
  xfer += prot_->serializedSizeI16(this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_BYTE, 30);
  xfer += prot_->serializedSizeByte(this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_BOOL, 31);
  xfer += prot_->serializedSizeBool(this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_LIST, 32);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_SET, 33);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_STRUCT, 34);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSizeZC(prot_, &this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_STRUCT, 35);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_STRUCT, 36);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSizeZC(prot_, &this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_STRUCT, 37);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSizeZC(prot_, &this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_STRUCT, 38);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_BOOL, 39);
  xfer += prot_->serializedSizeBool(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_LIST, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_DOUBLE, 41);
  xfer += prot_->serializedSizeDouble(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_STRUCT, 42);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_STRUCT, 43);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSizeZC(prot_, &this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_STRING, 44);
  xfer += prot_->serializedSizeString(this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_BYTE, 45);
  xfer += prot_->serializedSizeByte(this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_I64, 46);
  xfer += prot_->serializedSizeI64(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_I32, 47);
  xfer += prot_->serializedSizeI32(this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_SET, 48);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct18>>::serializedSize<false>(*prot_, this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_FLOAT, 49);
  xfer += prot_->serializedSizeFloat(this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_BYTE, 50);
  xfer += prot_->serializedSizeByte(this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_STRUCT, 51);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSizeZC(prot_, &this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_SET, 52);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int64_t>>>::serializedSize<false>(*prot_, this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_STRING, 53);
  xfer += prot_->serializedSizeString(this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_BYTE, 54);
  xfer += prot_->serializedSizeByte(this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_MAP, 55);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, bool>>::serializedSize<false>(*prot_, this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_LIST, 56);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<double>>>::serializedSize<false>(*prot_, this->field56);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct24::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct24");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_STRUCT, 2);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::write(prot_, &this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_BOOL, 3);
  xfer += prot_->writeBool(this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_I64, 4);
  xfer += prot_->writeI64(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_I16, 5);
  xfer += prot_->writeI16(this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_DOUBLE, 7);
  xfer += prot_->writeDouble(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->writeString(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_I16, 9);
  xfer += prot_->writeI16(this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_FLOAT, 10);
  xfer += prot_->writeFloat(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_STRING, 11);
  xfer += prot_->writeBinary(this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_SET, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_SET, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_MAP, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int64_t>>::write(*prot_, this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_SET, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int32_t>>::write(*prot_, this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_I16, 16);
  xfer += prot_->writeI16(this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::map<double, int8_t>, int16_t>>::write(*prot_, this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_SET, 18);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_MAP, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>>, std::map<std::string, std::map<double, int16_t>>>::write(*prot_, this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_MAP, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<float, double>>::write(*prot_, this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_STRUCT, 21);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::write(prot_, &this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_SET, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_BOOL, 23);
  xfer += prot_->writeBool(this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_I16, 24);
  xfer += prot_->writeI16(this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_LIST, 25);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<bool>>>::write(*prot_, this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_STRING, 26);
  xfer += prot_->writeString(this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_I32, 27);
  xfer += prot_->writeI32(this->field27);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_MAP, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::set<bool>, bool>>::write(*prot_, this->field28);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field29", apache::thrift::protocol::T_I16, 29);
  xfer += prot_->writeI16(this->field29);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field30", apache::thrift::protocol::T_BYTE, 30);
  xfer += prot_->writeByte(this->field30);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field31", apache::thrift::protocol::T_BOOL, 31);
  xfer += prot_->writeBool(this->field31);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field32", apache::thrift::protocol::T_LIST, 32);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field32);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field33", apache::thrift::protocol::T_SET, 33);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field33);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field34", apache::thrift::protocol::T_STRUCT, 34);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::write(prot_, &this->field34);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field35", apache::thrift::protocol::T_STRUCT, 35);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field35);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field36", apache::thrift::protocol::T_STRUCT, 36);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::write(prot_, &this->field36);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field37", apache::thrift::protocol::T_STRUCT, 37);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::write(prot_, &this->field37);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field38", apache::thrift::protocol::T_STRUCT, 38);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field38);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field39", apache::thrift::protocol::T_BOOL, 39);
  xfer += prot_->writeBool(this->field39);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field40", apache::thrift::protocol::T_LIST, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field40);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field41", apache::thrift::protocol::T_DOUBLE, 41);
  xfer += prot_->writeDouble(this->field41);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field42", apache::thrift::protocol::T_STRUCT, 42);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field42);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field43", apache::thrift::protocol::T_STRUCT, 43);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::write(prot_, &this->field43);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field44", apache::thrift::protocol::T_STRING, 44);
  xfer += prot_->writeString(this->field44);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field45", apache::thrift::protocol::T_BYTE, 45);
  xfer += prot_->writeByte(this->field45);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field46", apache::thrift::protocol::T_I64, 46);
  xfer += prot_->writeI64(this->field46);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field47", apache::thrift::protocol::T_I32, 47);
  xfer += prot_->writeI32(this->field47);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field48", apache::thrift::protocol::T_SET, 48);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct18>>::write(*prot_, this->field48);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field49", apache::thrift::protocol::T_FLOAT, 49);
  xfer += prot_->writeFloat(this->field49);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field50", apache::thrift::protocol::T_BYTE, 50);
  xfer += prot_->writeByte(this->field50);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field51", apache::thrift::protocol::T_STRUCT, 51);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::write(prot_, &this->field51);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field52", apache::thrift::protocol::T_SET, 52);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int64_t>>>::write(*prot_, this->field52);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field53", apache::thrift::protocol::T_STRING, 53);
  xfer += prot_->writeString(this->field53);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field54", apache::thrift::protocol::T_BYTE, 54);
  xfer += prot_->writeByte(this->field54);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field55", apache::thrift::protocol::T_MAP, 55);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, bool>>::write(*prot_, this->field55);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field56", apache::thrift::protocol::T_LIST, 56);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<double>>>::write(*prot_, this->field56);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace cpp2 {

template <class Protocol_>
uint32_t Struct25::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field2 = std::map<int8_t, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int64_t>>::read(*iprot, this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field3 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field4 = std::map<std::string,  ::cpp2::Struct6>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, std::map<std::string,  ::cpp2::Struct6>>::read(*iprot, this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field5 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field11 = std::map<std::string,  ::cpp2::Struct15>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, std::map<std::string,  ::cpp2::Struct15>>::read(*iprot, this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field12 = std::map<std::string,  ::cpp2::Struct20>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::structure>, std::map<std::string,  ::cpp2::Struct20>>::read(*iprot, this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field14 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field15 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field17 = std::map<std::vector<std::vector<std::string>>, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, ::apache::thrift::type_class::integral>, std::map<std::vector<std::vector<std::string>>, int16_t>>::read(*iprot, this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field20 = std::vector<std::vector<bool>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<bool>>>::read(*iprot, this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field22 = std::set<std::vector<int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int32_t>>>::read(*iprot, this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field23 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field24 = std::map<std::set<int64_t>, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::set<int64_t>, int16_t>>::read(*iprot, this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field27 = std::set< ::cpp2::Struct12>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct12>>::read(*iprot, this->field27);
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field28);
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field29);
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 30:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field30 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field30);
          this->__isset.field30 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 31:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field31);
          this->__isset.field31 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 32:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::read(iprot, &this->field32);
          this->__isset.field32 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 33:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field33);
          this->__isset.field33 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 34:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field34 = std::map<std::set<std::string>, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::string>, ::apache::thrift::type_class::integral>, std::map<std::set<std::string>, int8_t>>::read(*iprot, this->field34);
          this->__isset.field34 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 35:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::read(iprot, &this->field35);
          this->__isset.field35 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 36:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field36);
          this->__isset.field36 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 37:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field37 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field37);
          this->__isset.field37 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 38:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field38 = std::vector< ::cpp2::Struct3>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct3>>::read(*iprot, this->field38);
          this->__isset.field38 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 39:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field39 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field39);
          this->__isset.field39 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 40:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field40);
          this->__isset.field40 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 41:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field41);
          this->__isset.field41 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 42:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field42 = std::map<int16_t, std::map<std::vector<double>, double>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::floating_point>>, std::map<int16_t, std::map<std::vector<double>, double>>>::read(*iprot, this->field42);
          this->__isset.field42 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 43:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field43 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field43);
          this->__isset.field43 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 44:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field44);
          this->__isset.field44 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 45:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field45 = std::set< ::cpp2::Struct9>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct9>>::read(*iprot, this->field45);
          this->__isset.field45 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 46:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field46);
          this->__isset.field46 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 47:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::read(iprot, &this->field47);
          this->__isset.field47 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 48:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field48);
          this->__isset.field48 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 49:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field49);
          this->__isset.field49 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 50:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field50 = std::map<int32_t, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int32_t, std::string>>::read(*iprot, this->field50);
          this->__isset.field50 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 51:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::read(iprot, &this->field51);
          this->__isset.field51 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 52:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field52);
          this->__isset.field52 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 53:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field53 = std::vector<std::vector<double>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<double>>>::read(*iprot, this->field53);
          this->__isset.field53 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 54:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field54 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field54);
          this->__isset.field54 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 55:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field55 = std::map<double, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<double, float>>::read(*iprot, this->field55);
          this->__isset.field55 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 56:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field56);
          this->__isset.field56 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 57:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field57 = std::map< ::cpp2::Struct4, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct4, int8_t>>::read(*iprot, this->field57);
          this->__isset.field57 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 58:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field58);
          this->__isset.field58 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 59:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field59 = std::vector<std::map<std::vector<bool>, int64_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>>, std::vector<std::map<std::vector<bool>, int64_t>>>::read(*iprot, this->field59);
          this->__isset.field59 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 60:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field60);
          this->__isset.field60 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 61:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field61);
          this->__isset.field61 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 62:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field62);
          this->__isset.field62 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 63:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field63);
          this->__isset.field63 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 64:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field64 = std::map<std::string, std::vector<double>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<std::string, std::vector<double>>>::read(*iprot, this->field64);
          this->__isset.field64 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 65:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field65 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field65);
          this->__isset.field65 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 66:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field66);
          this->__isset.field66 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 67:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field67 = std::set<std::map<float, float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>>, std::set<std::map<float, float>>>::read(*iprot, this->field67);
          this->__isset.field67 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 68:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field68);
          this->__isset.field68 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 69:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field69 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field69);
          this->__isset.field69 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 70:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::read(iprot, &this->field70);
          this->__isset.field70 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 71:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field71);
          this->__isset.field71 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 72:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field72 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field72);
          this->__isset.field72 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 73:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field73 = std::vector<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::read(*iprot, this->field73);
          this->__isset.field73 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 74:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field74 = std::map<std::map<std::string, int16_t>, double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::floating_point>, std::map<std::map<std::string, int16_t>, double>>::read(*iprot, this->field74);
          this->__isset.field74 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 75:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field75);
          this->__isset.field75 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 76:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field76);
          this->__isset.field76 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 77:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field77);
          this->__isset.field77 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 78:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field78);
          this->__isset.field78 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 79:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field79 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field79);
          this->__isset.field79 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct25::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct25");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_BOOL, 1);
  xfer += prot_->serializedSizeBool(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int64_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, std::map<std::string,  ::cpp2::Struct6>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->serializedSizeI32(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_STRING, 7);
  xfer += prot_->serializedSizeBinary(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->serializedSizeString(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_I16, 9);
  xfer += prot_->serializedSizeI16(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_DOUBLE, 10);
  xfer += prot_->serializedSizeDouble(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_MAP, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, std::map<std::string,  ::cpp2::Struct15>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_MAP, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::structure>, std::map<std::string,  ::cpp2::Struct20>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_FLOAT, 13);
  xfer += prot_->serializedSizeFloat(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_SET, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_SET, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_STRING, 16);
  xfer += prot_->serializedSizeBinary(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, ::apache::thrift::type_class::integral>, std::map<std::vector<std::vector<std::string>>, int16_t>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_BOOL, 18);
  xfer += prot_->serializedSizeBool(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_I64, 19);
  xfer += prot_->serializedSizeI64(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_LIST, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<bool>>>::serializedSize<false>(*prot_, this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_I16, 21);
  xfer += prot_->serializedSizeI16(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_SET, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int32_t>>>::serializedSize<false>(*prot_, this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_SET, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_MAP, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::set<int64_t>, int16_t>>::serializedSize<false>(*prot_, this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_I64, 25);
  xfer += prot_->serializedSizeI64(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_I16, 26);
  xfer += prot_->serializedSizeI16(this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_SET, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct12>>::serializedSize<false>(*prot_, this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_I64, 28);
  xfer += prot_->serializedSizeI64(this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_BYTE, 29);
  xfer += prot_->serializedSizeByte(this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_SET, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_STRUCT, 31);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_STRUCT, 32);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::serializedSize(prot_, &this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_BYTE, 33);
  xfer += prot_->serializedSizeByte(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_MAP, 34);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::string>, ::apache::thrift::type_class::integral>, std::map<std::set<std::string>, int8_t>>::serializedSize<false>(*prot_, this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_STRUCT, 35);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSize(prot_, &this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_STRING, 36);
  xfer += prot_->serializedSizeBinary(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_SET, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_LIST, 38);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct3>>::serializedSize<false>(*prot_, this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_SET, 39);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_I32, 40);
  xfer += prot_->serializedSizeI32(this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_FLOAT, 41);
  xfer += prot_->serializedSizeFloat(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_MAP, 42);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::floating_point>>, std::map<int16_t, std::map<std::vector<double>, double>>>::serializedSize<false>(*prot_, this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_LIST, 43);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_STRING, 44);
  xfer += prot_->serializedSizeString(this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_SET, 45);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct9>>::serializedSize<false>(*prot_, this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_I64, 46);
  xfer += prot_->serializedSizeI64(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_STRUCT, 47);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::serializedSize(prot_, &this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_DOUBLE, 48);
  xfer += prot_->serializedSizeDouble(this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_BOOL, 49);
  xfer += prot_->serializedSizeBool(this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_MAP, 50);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int32_t, std::string>>::serializedSize<false>(*prot_, this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_STRUCT, 51);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::serializedSize(prot_, &this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_BYTE, 52);
  xfer += prot_->serializedSizeByte(this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_LIST, 53);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<double>>>::serializedSize<false>(*prot_, this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_LIST, 54);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_MAP, 55);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<double, float>>::serializedSize<false>(*prot_, this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_FLOAT, 56);
  xfer += prot_->serializedSizeFloat(this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_MAP, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct4, int8_t>>::serializedSize<false>(*prot_, this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_DOUBLE, 58);
  xfer += prot_->serializedSizeDouble(this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_LIST, 59);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>>, std::vector<std::map<std::vector<bool>, int64_t>>>::serializedSize<false>(*prot_, this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_BYTE, 60);
  xfer += prot_->serializedSizeByte(this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_BOOL, 61);
  xfer += prot_->serializedSizeBool(this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_BOOL, 62);
  xfer += prot_->serializedSizeBool(this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_BOOL, 63);
  xfer += prot_->serializedSizeBool(this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_MAP, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<std::string, std::vector<double>>>::serializedSize<false>(*prot_, this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_LIST, 65);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_DOUBLE, 66);
  xfer += prot_->serializedSizeDouble(this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_SET, 67);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>>, std::set<std::map<float, float>>>::serializedSize<false>(*prot_, this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_STRING, 68);
  xfer += prot_->serializedSizeBinary(this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_LIST, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_STRUCT, 70);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::serializedSize(prot_, &this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_BYTE, 71);
  xfer += prot_->serializedSizeByte(this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_SET, 72);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_LIST, 73);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_MAP, 74);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::floating_point>, std::map<std::map<std::string, int16_t>, double>>::serializedSize<false>(*prot_, this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_I32, 75);
  xfer += prot_->serializedSizeI32(this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_DOUBLE, 76);
  xfer += prot_->serializedSizeDouble(this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_I16, 77);
  xfer += prot_->serializedSizeI16(this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_STRING, 78);
  xfer += prot_->serializedSizeString(this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_SET, 79);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field79);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct25::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct25");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_BOOL, 1);
  xfer += prot_->serializedSizeBool(this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int64_t>>::serializedSize<false>(*prot_, this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, std::map<std::string,  ::cpp2::Struct6>>::serializedSize<false>(*prot_, this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->serializedSizeI32(this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_STRING, 7);
  xfer += prot_->serializedSizeZCBinary(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->serializedSizeString(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_I16, 9);
  xfer += prot_->serializedSizeI16(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_DOUBLE, 10);
  xfer += prot_->serializedSizeDouble(this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_MAP, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, std::map<std::string,  ::cpp2::Struct15>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_MAP, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::structure>, std::map<std::string,  ::cpp2::Struct20>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_FLOAT, 13);
  xfer += prot_->serializedSizeFloat(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_SET, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_SET, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_STRING, 16);
  xfer += prot_->serializedSizeZCBinary(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, ::apache::thrift::type_class::integral>, std::map<std::vector<std::vector<std::string>>, int16_t>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_BOOL, 18);
  xfer += prot_->serializedSizeBool(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_I64, 19);
  xfer += prot_->serializedSizeI64(this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_LIST, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<bool>>>::serializedSize<false>(*prot_, this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_I16, 21);
  xfer += prot_->serializedSizeI16(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_SET, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int32_t>>>::serializedSize<false>(*prot_, this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_SET, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_MAP, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::set<int64_t>, int16_t>>::serializedSize<false>(*prot_, this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_I64, 25);
  xfer += prot_->serializedSizeI64(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_I16, 26);
  xfer += prot_->serializedSizeI16(this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_SET, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct12>>::serializedSize<false>(*prot_, this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_I64, 28);
  xfer += prot_->serializedSizeI64(this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_BYTE, 29);
  xfer += prot_->serializedSizeByte(this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_SET, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_STRUCT, 31);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_STRUCT, 32);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::serializedSizeZC(prot_, &this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_BYTE, 33);
  xfer += prot_->serializedSizeByte(this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_MAP, 34);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::string>, ::apache::thrift::type_class::integral>, std::map<std::set<std::string>, int8_t>>::serializedSize<false>(*prot_, this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_STRUCT, 35);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::serializedSizeZC(prot_, &this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_STRING, 36);
  xfer += prot_->serializedSizeZCBinary(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_SET, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_LIST, 38);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct3>>::serializedSize<false>(*prot_, this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_SET, 39);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_I32, 40);
  xfer += prot_->serializedSizeI32(this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_FLOAT, 41);
  xfer += prot_->serializedSizeFloat(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_MAP, 42);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::floating_point>>, std::map<int16_t, std::map<std::vector<double>, double>>>::serializedSize<false>(*prot_, this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_LIST, 43);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_STRING, 44);
  xfer += prot_->serializedSizeString(this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_SET, 45);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct9>>::serializedSize<false>(*prot_, this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_I64, 46);
  xfer += prot_->serializedSizeI64(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_STRUCT, 47);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::serializedSizeZC(prot_, &this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_DOUBLE, 48);
  xfer += prot_->serializedSizeDouble(this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_BOOL, 49);
  xfer += prot_->serializedSizeBool(this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_MAP, 50);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int32_t, std::string>>::serializedSize<false>(*prot_, this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_STRUCT, 51);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::serializedSizeZC(prot_, &this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_BYTE, 52);
  xfer += prot_->serializedSizeByte(this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_LIST, 53);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<double>>>::serializedSize<false>(*prot_, this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_LIST, 54);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_MAP, 55);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<double, float>>::serializedSize<false>(*prot_, this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_FLOAT, 56);
  xfer += prot_->serializedSizeFloat(this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_MAP, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct4, int8_t>>::serializedSize<false>(*prot_, this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_DOUBLE, 58);
  xfer += prot_->serializedSizeDouble(this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_LIST, 59);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>>, std::vector<std::map<std::vector<bool>, int64_t>>>::serializedSize<false>(*prot_, this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_BYTE, 60);
  xfer += prot_->serializedSizeByte(this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_BOOL, 61);
  xfer += prot_->serializedSizeBool(this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_BOOL, 62);
  xfer += prot_->serializedSizeBool(this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_BOOL, 63);
  xfer += prot_->serializedSizeBool(this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_MAP, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<std::string, std::vector<double>>>::serializedSize<false>(*prot_, this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_LIST, 65);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_DOUBLE, 66);
  xfer += prot_->serializedSizeDouble(this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_SET, 67);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>>, std::set<std::map<float, float>>>::serializedSize<false>(*prot_, this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_STRING, 68);
  xfer += prot_->serializedSizeZCBinary(this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_LIST, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_STRUCT, 70);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::serializedSizeZC(prot_, &this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_BYTE, 71);
  xfer += prot_->serializedSizeByte(this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_SET, 72);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_LIST, 73);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::serializedSize<false>(*prot_, this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_MAP, 74);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::floating_point>, std::map<std::map<std::string, int16_t>, double>>::serializedSize<false>(*prot_, this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_I32, 75);
  xfer += prot_->serializedSizeI32(this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_DOUBLE, 76);
  xfer += prot_->serializedSizeDouble(this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_I16, 77);
  xfer += prot_->serializedSizeI16(this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_STRING, 78);
  xfer += prot_->serializedSizeString(this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_SET, 79);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field79);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct25::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct25");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_BOOL, 1);
  xfer += prot_->writeBool(this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_MAP, 2);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int64_t>>::write(*prot_, this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_MAP, 4);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, std::map<std::string,  ::cpp2::Struct6>>::write(*prot_, this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_SET, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->writeI32(this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_STRING, 7);
  xfer += prot_->writeBinary(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->writeString(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_I16, 9);
  xfer += prot_->writeI16(this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_DOUBLE, 10);
  xfer += prot_->writeDouble(this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_MAP, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::structure>, std::map<std::string,  ::cpp2::Struct15>>::write(*prot_, this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_MAP, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::structure>, std::map<std::string,  ::cpp2::Struct20>>::write(*prot_, this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_FLOAT, 13);
  xfer += prot_->writeFloat(this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_SET, 14);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_SET, 15);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_STRING, 16);
  xfer += prot_->writeBinary(this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_MAP, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, ::apache::thrift::type_class::integral>, std::map<std::vector<std::vector<std::string>>, int16_t>>::write(*prot_, this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_BOOL, 18);
  xfer += prot_->writeBool(this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_I64, 19);
  xfer += prot_->writeI64(this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_LIST, 20);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::vector<std::vector<bool>>>::write(*prot_, this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_I16, 21);
  xfer += prot_->writeI16(this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_SET, 22);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::set<std::vector<int32_t>>>::write(*prot_, this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_SET, 23);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_MAP, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::set<int64_t>, int16_t>>::write(*prot_, this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_I64, 25);
  xfer += prot_->writeI64(this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_I16, 26);
  xfer += prot_->writeI16(this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_SET, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct12>>::write(*prot_, this->field27);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_I64, 28);
  xfer += prot_->writeI64(this->field28);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field29", apache::thrift::protocol::T_BYTE, 29);
  xfer += prot_->writeByte(this->field29);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field30", apache::thrift::protocol::T_SET, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field30);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field31", apache::thrift::protocol::T_STRUCT, 31);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field31);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field32", apache::thrift::protocol::T_STRUCT, 32);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::write(prot_, &this->field32);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field33", apache::thrift::protocol::T_BYTE, 33);
  xfer += prot_->writeByte(this->field33);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field34", apache::thrift::protocol::T_MAP, 34);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::string>, ::apache::thrift::type_class::integral>, std::map<std::set<std::string>, int8_t>>::write(*prot_, this->field34);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field35", apache::thrift::protocol::T_STRUCT, 35);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::write(prot_, &this->field35);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field36", apache::thrift::protocol::T_STRING, 36);
  xfer += prot_->writeBinary(this->field36);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field37", apache::thrift::protocol::T_SET, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field37);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field38", apache::thrift::protocol::T_LIST, 38);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct3>>::write(*prot_, this->field38);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field39", apache::thrift::protocol::T_SET, 39);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field39);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field40", apache::thrift::protocol::T_I32, 40);
  xfer += prot_->writeI32(this->field40);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field41", apache::thrift::protocol::T_FLOAT, 41);
  xfer += prot_->writeFloat(this->field41);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field42", apache::thrift::protocol::T_MAP, 42);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::floating_point>>, std::map<int16_t, std::map<std::vector<double>, double>>>::write(*prot_, this->field42);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field43", apache::thrift::protocol::T_LIST, 43);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field43);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field44", apache::thrift::protocol::T_STRING, 44);
  xfer += prot_->writeString(this->field44);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field45", apache::thrift::protocol::T_SET, 45);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct9>>::write(*prot_, this->field45);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field46", apache::thrift::protocol::T_I64, 46);
  xfer += prot_->writeI64(this->field46);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field47", apache::thrift::protocol::T_STRUCT, 47);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::write(prot_, &this->field47);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field48", apache::thrift::protocol::T_DOUBLE, 48);
  xfer += prot_->writeDouble(this->field48);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field49", apache::thrift::protocol::T_BOOL, 49);
  xfer += prot_->writeBool(this->field49);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field50", apache::thrift::protocol::T_MAP, 50);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int32_t, std::string>>::write(*prot_, this->field50);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field51", apache::thrift::protocol::T_STRUCT, 51);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::write(prot_, &this->field51);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field52", apache::thrift::protocol::T_BYTE, 52);
  xfer += prot_->writeByte(this->field52);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field53", apache::thrift::protocol::T_LIST, 53);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::vector<std::vector<double>>>::write(*prot_, this->field53);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field54", apache::thrift::protocol::T_LIST, 54);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field54);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field55", apache::thrift::protocol::T_MAP, 55);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>, std::map<double, float>>::write(*prot_, this->field55);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field56", apache::thrift::protocol::T_FLOAT, 56);
  xfer += prot_->writeFloat(this->field56);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field57", apache::thrift::protocol::T_MAP, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::integral>, std::map< ::cpp2::Struct4, int8_t>>::write(*prot_, this->field57);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field58", apache::thrift::protocol::T_DOUBLE, 58);
  xfer += prot_->writeDouble(this->field58);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field59", apache::thrift::protocol::T_LIST, 59);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>>, std::vector<std::map<std::vector<bool>, int64_t>>>::write(*prot_, this->field59);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field60", apache::thrift::protocol::T_BYTE, 60);
  xfer += prot_->writeByte(this->field60);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field61", apache::thrift::protocol::T_BOOL, 61);
  xfer += prot_->writeBool(this->field61);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field62", apache::thrift::protocol::T_BOOL, 62);
  xfer += prot_->writeBool(this->field62);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field63", apache::thrift::protocol::T_BOOL, 63);
  xfer += prot_->writeBool(this->field63);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field64", apache::thrift::protocol::T_MAP, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<std::string, std::vector<double>>>::write(*prot_, this->field64);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field65", apache::thrift::protocol::T_LIST, 65);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field65);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field66", apache::thrift::protocol::T_DOUBLE, 66);
  xfer += prot_->writeDouble(this->field66);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field67", apache::thrift::protocol::T_SET, 67);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::floating_point>>, std::set<std::map<float, float>>>::write(*prot_, this->field67);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field68", apache::thrift::protocol::T_STRING, 68);
  xfer += prot_->writeBinary(this->field68);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field69", apache::thrift::protocol::T_LIST, 69);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field69);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field70", apache::thrift::protocol::T_STRUCT, 70);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::write(prot_, &this->field70);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field71", apache::thrift::protocol::T_BYTE, 71);
  xfer += prot_->writeByte(this->field71);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field72", apache::thrift::protocol::T_SET, 72);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field72);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field73", apache::thrift::protocol::T_LIST, 73);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<float>>::write(*prot_, this->field73);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field74", apache::thrift::protocol::T_MAP, 74);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::floating_point>, std::map<std::map<std::string, int16_t>, double>>::write(*prot_, this->field74);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field75", apache::thrift::protocol::T_I32, 75);
  xfer += prot_->writeI32(this->field75);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field76", apache::thrift::protocol::T_DOUBLE, 76);
  xfer += prot_->writeDouble(this->field76);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field77", apache::thrift::protocol::T_I16, 77);
  xfer += prot_->writeI16(this->field77);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field78", apache::thrift::protocol::T_STRING, 78);
  xfer += prot_->writeString(this->field78);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field79", apache::thrift::protocol::T_SET, 79);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field79);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace cpp2 {

template <class Protocol_>
uint32_t Struct26::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field1 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field3 = std::map<int8_t, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int8_t, float>>::read(*iprot, this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field5 = std::map<std::set<double>, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::integral>, std::map<std::set<double>, int16_t>>::read(*iprot, this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field6 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field10 = std::map<double, std::map<std::map<double, int32_t>, bool>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>>, std::map<double, std::map<std::map<double, int32_t>, bool>>>::read(*iprot, this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field11 = std::set<std::set<int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int32_t>>>::read(*iprot, this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field12 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::read(*iprot, this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::read(iprot, &this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field17 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field19 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field27 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field27);
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field28 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field28);
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field29);
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 30:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field30 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field30);
          this->__isset.field30 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 31:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field31);
          this->__isset.field31 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 32:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct17>::read(iprot, &this->field32);
          this->__isset.field32 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 33:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field33 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field33);
          this->__isset.field33 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 34:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field34);
          this->__isset.field34 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 35:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field35);
          this->__isset.field35 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 36:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field36);
          this->__isset.field36 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 37:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field37 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field37);
          this->__isset.field37 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 38:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field38);
          this->__isset.field38 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 39:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field39);
          this->__isset.field39 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 40:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field40 = std::map<float, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, bool>>::read(*iprot, this->field40);
          this->__isset.field40 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 41:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field41);
          this->__isset.field41 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 42:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct14>::read(iprot, &this->field42);
          this->__isset.field42 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 43:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field43 = std::map<int32_t, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, bool>>::read(*iprot, this->field43);
          this->__isset.field43 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 44:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field44);
          this->__isset.field44 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 45:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::read(iprot, &this->field45);
          this->__isset.field45 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 46:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field46 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field46);
          this->__isset.field46 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 47:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field47 = std::map<std::string, std::map<std::string, bool>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>>, std::map<std::string, std::map<std::string, bool>>>::read(*iprot, this->field47);
          this->__isset.field47 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 48:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field48);
          this->__isset.field48 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 49:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field49);
          this->__isset.field49 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 50:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field50);
          this->__isset.field50 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 51:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::read(iprot, &this->field51);
          this->__isset.field51 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 52:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field52);
          this->__isset.field52 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 53:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::read(iprot, &this->field53);
          this->__isset.field53 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 54:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field54);
          this->__isset.field54 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 55:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field55);
          this->__isset.field55 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 56:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field56);
          this->__isset.field56 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 57:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field57 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field57);
          this->__isset.field57 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 58:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field58);
          this->__isset.field58 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 59:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::read(iprot, &this->field59);
          this->__isset.field59 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 60:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field60);
          this->__isset.field60 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 61:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field61 = std::vector<std::set<float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::vector<std::set<float>>>::read(*iprot, this->field61);
          this->__isset.field61 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 62:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field62);
          this->__isset.field62 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 63:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field63 = std::set<std::map<int8_t, int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int8_t, int32_t>>>::read(*iprot, this->field63);
          this->__isset.field63 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 64:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field64 = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->field64);
          this->__isset.field64 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 65:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field65 = std::set<std::vector<double>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::set<std::vector<double>>>::read(*iprot, this->field65);
          this->__isset.field65 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 66:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field66);
          this->__isset.field66 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 67:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field67 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field67);
          this->__isset.field67 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 68:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field68);
          this->__isset.field68 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 69:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field69);
          this->__isset.field69 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 70:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field70 = std::map<int8_t, std::map<float, std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>>, std::map<int8_t, std::map<float, std::string>>>::read(*iprot, this->field70);
          this->__isset.field70 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 71:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field71);
          this->__isset.field71 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 72:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field72 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field72);
          this->__isset.field72 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 73:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field73);
          this->__isset.field73 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 74:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field74);
          this->__isset.field74 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 75:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field75 = std::map<bool, std::map<std::vector<std::string>, int64_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::string>, ::apache::thrift::type_class::integral>>, std::map<bool, std::map<std::vector<std::string>, int64_t>>>::read(*iprot, this->field75);
          this->__isset.field75 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 76:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field76);
          this->__isset.field76 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 77:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field77);
          this->__isset.field77 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 78:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::read(iprot, &this->field78);
          this->__isset.field78 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 79:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field79);
          this->__isset.field79 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 80:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field80 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field80);
          this->__isset.field80 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 81:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field81);
          this->__isset.field81 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 82:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field82);
          this->__isset.field82 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 83:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field83);
          this->__isset.field83 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 84:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field84 = std::vector< ::cpp2::Struct15>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct15>>::read(*iprot, this->field84);
          this->__isset.field84 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 85:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field85);
          this->__isset.field85 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 86:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::read(iprot, &this->field86);
          this->__isset.field86 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 87:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field87 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field87);
          this->__isset.field87 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 88:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field88);
          this->__isset.field88 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 89:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field89 = std::map<int8_t, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::read(*iprot, this->field89);
          this->__isset.field89 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 90:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct19>::read(iprot, &this->field90);
          this->__isset.field90 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 91:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field91);
          this->__isset.field91 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 92:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field92);
          this->__isset.field92 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 93:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field93);
          this->__isset.field93 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 94:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field94);
          this->__isset.field94 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 95:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field95);
          this->__isset.field95 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 96:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::read(iprot, &this->field96);
          this->__isset.field96 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 97:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field97);
          this->__isset.field97 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 98:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::read(iprot, &this->field98);
          this->__isset.field98 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 99:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field99 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field99);
          this->__isset.field99 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 100:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field100);
          this->__isset.field100 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 101:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field101);
          this->__isset.field101 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 102:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field102 = std::map<int64_t, int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int64_t>>::read(*iprot, this->field102);
          this->__isset.field102 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 103:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field103);
          this->__isset.field103 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 104:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field104);
          this->__isset.field104 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 105:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field105);
          this->__isset.field105 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct26::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct26");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->serializedSizeDouble(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_MAP, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int8_t, float>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->serializedSizeByte(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::integral>, std::map<std::set<double>, int16_t>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_I16, 7);
  xfer += prot_->serializedSizeI16(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->serializedSizeString(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_I16, 9);
  xfer += prot_->serializedSizeI16(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>>, std::map<double, std::map<std::map<double, int32_t>, bool>>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_SET, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int32_t>>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_I32, 13);
  xfer += prot_->serializedSizeI32(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_STRUCT, 14);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::serializedSize(prot_, &this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_BOOL, 15);
  xfer += prot_->serializedSizeBool(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_STRING, 16);
  xfer += prot_->serializedSizeBinary(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_SET, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_I16, 18);
  xfer += prot_->serializedSizeI16(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_SET, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_FLOAT, 20);
  xfer += prot_->serializedSizeFloat(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_I16, 21);
  xfer += prot_->serializedSizeI16(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_I16, 22);
  xfer += prot_->serializedSizeI16(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_I16, 23);
  xfer += prot_->serializedSizeI16(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_BYTE, 24);
  xfer += prot_->serializedSizeByte(this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_I16, 25);
  xfer += prot_->serializedSizeI16(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_DOUBLE, 26);
  xfer += prot_->serializedSizeDouble(this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_SET, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_LIST, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_DOUBLE, 29);
  xfer += prot_->serializedSizeDouble(this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_LIST, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_BYTE, 31);
  xfer += prot_->serializedSizeByte(this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_STRUCT, 32);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct17>::serializedSize(prot_, &this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_LIST, 33);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_I32, 34);
  xfer += prot_->serializedSizeI32(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_BOOL, 35);
  xfer += prot_->serializedSizeBool(this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_BYTE, 36);
  xfer += prot_->serializedSizeByte(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_SET, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_BOOL, 38);
  xfer += prot_->serializedSizeBool(this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_FLOAT, 39);
  xfer += prot_->serializedSizeFloat(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_MAP, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, bool>>::serializedSize<false>(*prot_, this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_BYTE, 41);
  xfer += prot_->serializedSizeByte(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_STRUCT, 42);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct14>::serializedSize(prot_, &this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_MAP, 43);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, bool>>::serializedSize<false>(*prot_, this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_DOUBLE, 44);
  xfer += prot_->serializedSizeDouble(this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_STRUCT, 45);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSize(prot_, &this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_SET, 46);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_MAP, 47);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>>, std::map<std::string, std::map<std::string, bool>>>::serializedSize<false>(*prot_, this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_BYTE, 48);
  xfer += prot_->serializedSizeByte(this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_I64, 49);
  xfer += prot_->serializedSizeI64(this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_STRING, 50);
  xfer += prot_->serializedSizeBinary(this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_STRUCT, 51);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::serializedSize(prot_, &this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_STRING, 52);
  xfer += prot_->serializedSizeBinary(this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_STRUCT, 53);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSize(prot_, &this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_DOUBLE, 54);
  xfer += prot_->serializedSizeDouble(this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_STRUCT, 55);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_DOUBLE, 56);
  xfer += prot_->serializedSizeDouble(this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_SET, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_STRING, 58);
  xfer += prot_->serializedSizeBinary(this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_STRUCT, 59);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSize(prot_, &this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_DOUBLE, 60);
  xfer += prot_->serializedSizeDouble(this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_LIST, 61);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::vector<std::set<float>>>::serializedSize<false>(*prot_, this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_I16, 62);
  xfer += prot_->serializedSizeI16(this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_SET, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int8_t, int32_t>>>::serializedSize<false>(*prot_, this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_LIST, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_SET, 65);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::set<std::vector<double>>>::serializedSize<false>(*prot_, this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_FLOAT, 66);
  xfer += prot_->serializedSizeFloat(this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_SET, 67);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_STRING, 68);
  xfer += prot_->serializedSizeBinary(this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_I32, 69);
  xfer += prot_->serializedSizeI32(this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_MAP, 70);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>>, std::map<int8_t, std::map<float, std::string>>>::serializedSize<false>(*prot_, this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_I32, 71);
  xfer += prot_->serializedSizeI32(this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_SET, 72);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_STRING, 73);
  xfer += prot_->serializedSizeString(this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_I32, 74);
  xfer += prot_->serializedSizeI32(this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_MAP, 75);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::string>, ::apache::thrift::type_class::integral>>, std::map<bool, std::map<std::vector<std::string>, int64_t>>>::serializedSize<false>(*prot_, this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_FLOAT, 76);
  xfer += prot_->serializedSizeFloat(this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_BOOL, 77);
  xfer += prot_->serializedSizeBool(this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_STRUCT, 78);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSize(prot_, &this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_I16, 79);
  xfer += prot_->serializedSizeI16(this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_SET, 80);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_DOUBLE, 81);
  xfer += prot_->serializedSizeDouble(this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_BYTE, 82);
  xfer += prot_->serializedSizeByte(this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_FLOAT, 83);
  xfer += prot_->serializedSizeFloat(this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_LIST, 84);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct15>>::serializedSize<false>(*prot_, this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_STRUCT, 85);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_STRUCT, 86);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSize(prot_, &this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_LIST, 87);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_STRING, 88);
  xfer += prot_->serializedSizeString(this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_MAP, 89);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::serializedSize<false>(*prot_, this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_STRUCT, 90);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct19>::serializedSize(prot_, &this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_DOUBLE, 91);
  xfer += prot_->serializedSizeDouble(this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_BYTE, 92);
  xfer += prot_->serializedSizeByte(this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_I64, 93);
  xfer += prot_->serializedSizeI64(this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_FLOAT, 94);
  xfer += prot_->serializedSizeFloat(this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_BYTE, 95);
  xfer += prot_->serializedSizeByte(this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_STRUCT, 96);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSize(prot_, &this->field96);
  xfer += prot_->serializedFieldSize("field97", apache::thrift::protocol::T_I32, 97);
  xfer += prot_->serializedSizeI32(this->field97);
  xfer += prot_->serializedFieldSize("field98", apache::thrift::protocol::T_STRUCT, 98);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSize(prot_, &this->field98);
  xfer += prot_->serializedFieldSize("field99", apache::thrift::protocol::T_SET, 99);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field99);
  xfer += prot_->serializedFieldSize("field100", apache::thrift::protocol::T_BYTE, 100);
  xfer += prot_->serializedSizeByte(this->field100);
  xfer += prot_->serializedFieldSize("field101", apache::thrift::protocol::T_STRING, 101);
  xfer += prot_->serializedSizeString(this->field101);
  xfer += prot_->serializedFieldSize("field102", apache::thrift::protocol::T_MAP, 102);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int64_t>>::serializedSize<false>(*prot_, this->field102);
  xfer += prot_->serializedFieldSize("field103", apache::thrift::protocol::T_STRING, 103);
  xfer += prot_->serializedSizeBinary(this->field103);
  xfer += prot_->serializedFieldSize("field104", apache::thrift::protocol::T_FLOAT, 104);
  xfer += prot_->serializedSizeFloat(this->field104);
  xfer += prot_->serializedFieldSize("field105", apache::thrift::protocol::T_STRING, 105);
  xfer += prot_->serializedSizeString(this->field105);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct26::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct26");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->serializedSizeDouble(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_MAP, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int8_t, float>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->serializedSizeByte(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::integral>, std::map<std::set<double>, int16_t>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_I16, 7);
  xfer += prot_->serializedSizeI16(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->serializedSizeString(this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_I16, 9);
  xfer += prot_->serializedSizeI16(this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>>, std::map<double, std::map<std::map<double, int32_t>, bool>>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_SET, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int32_t>>>::serializedSize<false>(*prot_, this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_I32, 13);
  xfer += prot_->serializedSizeI32(this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_STRUCT, 14);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::serializedSizeZC(prot_, &this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_BOOL, 15);
  xfer += prot_->serializedSizeBool(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_STRING, 16);
  xfer += prot_->serializedSizeZCBinary(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_SET, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_I16, 18);
  xfer += prot_->serializedSizeI16(this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_SET, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_FLOAT, 20);
  xfer += prot_->serializedSizeFloat(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_I16, 21);
  xfer += prot_->serializedSizeI16(this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_I16, 22);
  xfer += prot_->serializedSizeI16(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_I16, 23);
  xfer += prot_->serializedSizeI16(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_BYTE, 24);
  xfer += prot_->serializedSizeByte(this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_I16, 25);
  xfer += prot_->serializedSizeI16(this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_DOUBLE, 26);
  xfer += prot_->serializedSizeDouble(this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_SET, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_LIST, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_DOUBLE, 29);
  xfer += prot_->serializedSizeDouble(this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_LIST, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_BYTE, 31);
  xfer += prot_->serializedSizeByte(this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_STRUCT, 32);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct17>::serializedSizeZC(prot_, &this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_LIST, 33);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_I32, 34);
  xfer += prot_->serializedSizeI32(this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_BOOL, 35);
  xfer += prot_->serializedSizeBool(this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_BYTE, 36);
  xfer += prot_->serializedSizeByte(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_SET, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_BOOL, 38);
  xfer += prot_->serializedSizeBool(this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_FLOAT, 39);
  xfer += prot_->serializedSizeFloat(this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_MAP, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, bool>>::serializedSize<false>(*prot_, this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_BYTE, 41);
  xfer += prot_->serializedSizeByte(this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_STRUCT, 42);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct14>::serializedSizeZC(prot_, &this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_MAP, 43);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, bool>>::serializedSize<false>(*prot_, this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_DOUBLE, 44);
  xfer += prot_->serializedSizeDouble(this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_STRUCT, 45);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSizeZC(prot_, &this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_SET, 46);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_MAP, 47);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>>, std::map<std::string, std::map<std::string, bool>>>::serializedSize<false>(*prot_, this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_BYTE, 48);
  xfer += prot_->serializedSizeByte(this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_I64, 49);
  xfer += prot_->serializedSizeI64(this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_STRING, 50);
  xfer += prot_->serializedSizeZCBinary(this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_STRUCT, 51);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::serializedSizeZC(prot_, &this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_STRING, 52);
  xfer += prot_->serializedSizeZCBinary(this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_STRUCT, 53);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSizeZC(prot_, &this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_DOUBLE, 54);
  xfer += prot_->serializedSizeDouble(this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_STRUCT, 55);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_DOUBLE, 56);
  xfer += prot_->serializedSizeDouble(this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_SET, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_STRING, 58);
  xfer += prot_->serializedSizeZCBinary(this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_STRUCT, 59);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSizeZC(prot_, &this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_DOUBLE, 60);
  xfer += prot_->serializedSizeDouble(this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_LIST, 61);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::vector<std::set<float>>>::serializedSize<false>(*prot_, this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_I16, 62);
  xfer += prot_->serializedSizeI16(this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_SET, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int8_t, int32_t>>>::serializedSize<false>(*prot_, this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_LIST, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_SET, 65);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::set<std::vector<double>>>::serializedSize<false>(*prot_, this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_FLOAT, 66);
  xfer += prot_->serializedSizeFloat(this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_SET, 67);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_STRING, 68);
  xfer += prot_->serializedSizeZCBinary(this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_I32, 69);
  xfer += prot_->serializedSizeI32(this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_MAP, 70);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>>, std::map<int8_t, std::map<float, std::string>>>::serializedSize<false>(*prot_, this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_I32, 71);
  xfer += prot_->serializedSizeI32(this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_SET, 72);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_STRING, 73);
  xfer += prot_->serializedSizeString(this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_I32, 74);
  xfer += prot_->serializedSizeI32(this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_MAP, 75);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::string>, ::apache::thrift::type_class::integral>>, std::map<bool, std::map<std::vector<std::string>, int64_t>>>::serializedSize<false>(*prot_, this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_FLOAT, 76);
  xfer += prot_->serializedSizeFloat(this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_BOOL, 77);
  xfer += prot_->serializedSizeBool(this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_STRUCT, 78);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSizeZC(prot_, &this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_I16, 79);
  xfer += prot_->serializedSizeI16(this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_SET, 80);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_DOUBLE, 81);
  xfer += prot_->serializedSizeDouble(this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_BYTE, 82);
  xfer += prot_->serializedSizeByte(this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_FLOAT, 83);
  xfer += prot_->serializedSizeFloat(this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_LIST, 84);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct15>>::serializedSize<false>(*prot_, this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_STRUCT, 85);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_STRUCT, 86);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSizeZC(prot_, &this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_LIST, 87);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_STRING, 88);
  xfer += prot_->serializedSizeString(this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_MAP, 89);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::serializedSize<false>(*prot_, this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_STRUCT, 90);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct19>::serializedSizeZC(prot_, &this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_DOUBLE, 91);
  xfer += prot_->serializedSizeDouble(this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_BYTE, 92);
  xfer += prot_->serializedSizeByte(this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_I64, 93);
  xfer += prot_->serializedSizeI64(this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_FLOAT, 94);
  xfer += prot_->serializedSizeFloat(this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_BYTE, 95);
  xfer += prot_->serializedSizeByte(this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_STRUCT, 96);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSizeZC(prot_, &this->field96);
  xfer += prot_->serializedFieldSize("field97", apache::thrift::protocol::T_I32, 97);
  xfer += prot_->serializedSizeI32(this->field97);
  xfer += prot_->serializedFieldSize("field98", apache::thrift::protocol::T_STRUCT, 98);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSizeZC(prot_, &this->field98);
  xfer += prot_->serializedFieldSize("field99", apache::thrift::protocol::T_SET, 99);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field99);
  xfer += prot_->serializedFieldSize("field100", apache::thrift::protocol::T_BYTE, 100);
  xfer += prot_->serializedSizeByte(this->field100);
  xfer += prot_->serializedFieldSize("field101", apache::thrift::protocol::T_STRING, 101);
  xfer += prot_->serializedSizeString(this->field101);
  xfer += prot_->serializedFieldSize("field102", apache::thrift::protocol::T_MAP, 102);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int64_t>>::serializedSize<false>(*prot_, this->field102);
  xfer += prot_->serializedFieldSize("field103", apache::thrift::protocol::T_STRING, 103);
  xfer += prot_->serializedSizeZCBinary(this->field103);
  xfer += prot_->serializedFieldSize("field104", apache::thrift::protocol::T_FLOAT, 104);
  xfer += prot_->serializedSizeFloat(this->field104);
  xfer += prot_->serializedFieldSize("field105", apache::thrift::protocol::T_STRING, 105);
  xfer += prot_->serializedSizeString(this->field105);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct26::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct26");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_SET, 1);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->writeDouble(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_MAP, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int8_t, float>>::write(*prot_, this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_BYTE, 4);
  xfer += prot_->writeByte(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::integral>, std::map<std::set<double>, int16_t>>::write(*prot_, this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_SET, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_I16, 7);
  xfer += prot_->writeI16(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_STRING, 8);
  xfer += prot_->writeString(this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_I16, 9);
  xfer += prot_->writeI16(this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_MAP, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>>, std::map<double, std::map<std::map<double, int32_t>, bool>>>::write(*prot_, this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_SET, 11);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int32_t>>>::write(*prot_, this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_LIST, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::binary>, std::vector<std::string>>::write(*prot_, this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_I32, 13);
  xfer += prot_->writeI32(this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_STRUCT, 14);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::write(prot_, &this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_BOOL, 15);
  xfer += prot_->writeBool(this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_STRING, 16);
  xfer += prot_->writeBinary(this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_SET, 17);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_I16, 18);
  xfer += prot_->writeI16(this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_SET, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_FLOAT, 20);
  xfer += prot_->writeFloat(this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_I16, 21);
  xfer += prot_->writeI16(this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_I16, 22);
  xfer += prot_->writeI16(this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_I16, 23);
  xfer += prot_->writeI16(this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_BYTE, 24);
  xfer += prot_->writeByte(this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_I16, 25);
  xfer += prot_->writeI16(this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_DOUBLE, 26);
  xfer += prot_->writeDouble(this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_SET, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field27);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_LIST, 28);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field28);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field29", apache::thrift::protocol::T_DOUBLE, 29);
  xfer += prot_->writeDouble(this->field29);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field30", apache::thrift::protocol::T_LIST, 30);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field30);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field31", apache::thrift::protocol::T_BYTE, 31);
  xfer += prot_->writeByte(this->field31);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field32", apache::thrift::protocol::T_STRUCT, 32);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct17>::write(prot_, &this->field32);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field33", apache::thrift::protocol::T_LIST, 33);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field33);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field34", apache::thrift::protocol::T_I32, 34);
  xfer += prot_->writeI32(this->field34);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field35", apache::thrift::protocol::T_BOOL, 35);
  xfer += prot_->writeBool(this->field35);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field36", apache::thrift::protocol::T_BYTE, 36);
  xfer += prot_->writeByte(this->field36);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field37", apache::thrift::protocol::T_SET, 37);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field37);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field38", apache::thrift::protocol::T_BOOL, 38);
  xfer += prot_->writeBool(this->field38);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field39", apache::thrift::protocol::T_FLOAT, 39);
  xfer += prot_->writeFloat(this->field39);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field40", apache::thrift::protocol::T_MAP, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, bool>>::write(*prot_, this->field40);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field41", apache::thrift::protocol::T_BYTE, 41);
  xfer += prot_->writeByte(this->field41);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field42", apache::thrift::protocol::T_STRUCT, 42);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct14>::write(prot_, &this->field42);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field43", apache::thrift::protocol::T_MAP, 43);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int32_t, bool>>::write(*prot_, this->field43);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field44", apache::thrift::protocol::T_DOUBLE, 44);
  xfer += prot_->writeDouble(this->field44);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field45", apache::thrift::protocol::T_STRUCT, 45);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::write(prot_, &this->field45);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field46", apache::thrift::protocol::T_SET, 46);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field46);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field47", apache::thrift::protocol::T_MAP, 47);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::integral>>, std::map<std::string, std::map<std::string, bool>>>::write(*prot_, this->field47);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field48", apache::thrift::protocol::T_BYTE, 48);
  xfer += prot_->writeByte(this->field48);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field49", apache::thrift::protocol::T_I64, 49);
  xfer += prot_->writeI64(this->field49);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field50", apache::thrift::protocol::T_STRING, 50);
  xfer += prot_->writeBinary(this->field50);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field51", apache::thrift::protocol::T_STRUCT, 51);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::write(prot_, &this->field51);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field52", apache::thrift::protocol::T_STRING, 52);
  xfer += prot_->writeBinary(this->field52);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field53", apache::thrift::protocol::T_STRUCT, 53);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::write(prot_, &this->field53);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field54", apache::thrift::protocol::T_DOUBLE, 54);
  xfer += prot_->writeDouble(this->field54);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field55", apache::thrift::protocol::T_STRUCT, 55);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field55);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field56", apache::thrift::protocol::T_DOUBLE, 56);
  xfer += prot_->writeDouble(this->field56);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field57", apache::thrift::protocol::T_SET, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field57);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field58", apache::thrift::protocol::T_STRING, 58);
  xfer += prot_->writeBinary(this->field58);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field59", apache::thrift::protocol::T_STRUCT, 59);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::write(prot_, &this->field59);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field60", apache::thrift::protocol::T_DOUBLE, 60);
  xfer += prot_->writeDouble(this->field60);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field61", apache::thrift::protocol::T_LIST, 61);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::vector<std::set<float>>>::write(*prot_, this->field61);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field62", apache::thrift::protocol::T_I16, 62);
  xfer += prot_->writeI16(this->field62);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field63", apache::thrift::protocol::T_SET, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::set<std::map<int8_t, int32_t>>>::write(*prot_, this->field63);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field64", apache::thrift::protocol::T_LIST, 64);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->field64);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field65", apache::thrift::protocol::T_SET, 65);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::set<std::vector<double>>>::write(*prot_, this->field65);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field66", apache::thrift::protocol::T_FLOAT, 66);
  xfer += prot_->writeFloat(this->field66);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field67", apache::thrift::protocol::T_SET, 67);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field67);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field68", apache::thrift::protocol::T_STRING, 68);
  xfer += prot_->writeBinary(this->field68);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field69", apache::thrift::protocol::T_I32, 69);
  xfer += prot_->writeI32(this->field69);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field70", apache::thrift::protocol::T_MAP, 70);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>>, std::map<int8_t, std::map<float, std::string>>>::write(*prot_, this->field70);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field71", apache::thrift::protocol::T_I32, 71);
  xfer += prot_->writeI32(this->field71);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field72", apache::thrift::protocol::T_SET, 72);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field72);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field73", apache::thrift::protocol::T_STRING, 73);
  xfer += prot_->writeString(this->field73);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field74", apache::thrift::protocol::T_I32, 74);
  xfer += prot_->writeI32(this->field74);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field75", apache::thrift::protocol::T_MAP, 75);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::string>, ::apache::thrift::type_class::integral>>, std::map<bool, std::map<std::vector<std::string>, int64_t>>>::write(*prot_, this->field75);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field76", apache::thrift::protocol::T_FLOAT, 76);
  xfer += prot_->writeFloat(this->field76);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field77", apache::thrift::protocol::T_BOOL, 77);
  xfer += prot_->writeBool(this->field77);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field78", apache::thrift::protocol::T_STRUCT, 78);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::write(prot_, &this->field78);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field79", apache::thrift::protocol::T_I16, 79);
  xfer += prot_->writeI16(this->field79);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field80", apache::thrift::protocol::T_SET, 80);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field80);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field81", apache::thrift::protocol::T_DOUBLE, 81);
  xfer += prot_->writeDouble(this->field81);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field82", apache::thrift::protocol::T_BYTE, 82);
  xfer += prot_->writeByte(this->field82);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field83", apache::thrift::protocol::T_FLOAT, 83);
  xfer += prot_->writeFloat(this->field83);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field84", apache::thrift::protocol::T_LIST, 84);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, std::vector< ::cpp2::Struct15>>::write(*prot_, this->field84);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field85", apache::thrift::protocol::T_STRUCT, 85);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field85);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field86", apache::thrift::protocol::T_STRUCT, 86);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::write(prot_, &this->field86);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field87", apache::thrift::protocol::T_LIST, 87);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field87);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field88", apache::thrift::protocol::T_STRING, 88);
  xfer += prot_->writeString(this->field88);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field89", apache::thrift::protocol::T_MAP, 89);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int8_t, std::string>>::write(*prot_, this->field89);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field90", apache::thrift::protocol::T_STRUCT, 90);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct19>::write(prot_, &this->field90);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field91", apache::thrift::protocol::T_DOUBLE, 91);
  xfer += prot_->writeDouble(this->field91);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field92", apache::thrift::protocol::T_BYTE, 92);
  xfer += prot_->writeByte(this->field92);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field93", apache::thrift::protocol::T_I64, 93);
  xfer += prot_->writeI64(this->field93);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field94", apache::thrift::protocol::T_FLOAT, 94);
  xfer += prot_->writeFloat(this->field94);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field95", apache::thrift::protocol::T_BYTE, 95);
  xfer += prot_->writeByte(this->field95);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field96", apache::thrift::protocol::T_STRUCT, 96);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::write(prot_, &this->field96);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field97", apache::thrift::protocol::T_I32, 97);
  xfer += prot_->writeI32(this->field97);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field98", apache::thrift::protocol::T_STRUCT, 98);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::write(prot_, &this->field98);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field99", apache::thrift::protocol::T_SET, 99);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field99);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field100", apache::thrift::protocol::T_BYTE, 100);
  xfer += prot_->writeByte(this->field100);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field101", apache::thrift::protocol::T_STRING, 101);
  xfer += prot_->writeString(this->field101);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field102", apache::thrift::protocol::T_MAP, 102);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int64_t>>::write(*prot_, this->field102);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field103", apache::thrift::protocol::T_STRING, 103);
  xfer += prot_->writeBinary(this->field103);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field104", apache::thrift::protocol::T_FLOAT, 104);
  xfer += prot_->writeFloat(this->field104);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field105", apache::thrift::protocol::T_STRING, 105);
  xfer += prot_->writeString(this->field105);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace cpp2 {

template <class Protocol_>
uint32_t Struct27::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string _fname;
  apache::thrift::protocol::TType _ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(_fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(_fname, _ftype, fid);
    if (_ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      this->translateFieldName(_fname, fid, _ftype);
    }
    switch (fid) {
      case 1:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::read(iprot, &this->field1);
          this->__isset.field1 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 2:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field2);
          this->__isset.field2 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 3:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field3 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field3);
          this->__isset.field3 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 4:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field4);
          this->__isset.field4 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 5:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field5 = std::map<int8_t, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int8_t, std::string>>::read(*iprot, this->field5);
          this->__isset.field5 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 6:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field6 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field6);
          this->__isset.field6 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 7:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field7);
          this->__isset.field7 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 8:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field8 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field8);
          this->__isset.field8 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 9:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field9 = std::set< ::cpp2::Struct1>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct1>>::read(*iprot, this->field9);
          this->__isset.field9 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 10:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field10 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field10);
          this->__isset.field10 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 11:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field11);
          this->__isset.field11 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 12:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field12 = std::set<std::set<float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<float>>>::read(*iprot, this->field12);
          this->__isset.field12 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 13:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field13 = std::map<bool, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<bool, std::string>>::read(*iprot, this->field13);
          this->__isset.field13 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 14:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field14);
          this->__isset.field14 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 15:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field15);
          this->__isset.field15 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 16:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field16);
          this->__isset.field16 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 17:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field17);
          this->__isset.field17 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 18:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::read(iprot, &this->field18);
          this->__isset.field18 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 19:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field19 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field19);
          this->__isset.field19 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 20:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field20);
          this->__isset.field20 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 21:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field21 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field21);
          this->__isset.field21 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 22:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field22);
          this->__isset.field22 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 23:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field23);
          this->__isset.field23 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 24:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field24 = std::map<int16_t, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int16_t, float>>::read(*iprot, this->field24);
          this->__isset.field24 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 25:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field25);
          this->__isset.field25 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 26:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field26 = std::map<std::string, std::map<std::string, std::map<int32_t, float>>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>>, std::map<std::string, std::map<std::string, std::map<int32_t, float>>>>::read(*iprot, this->field26);
          this->__isset.field26 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 27:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field27 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field27);
          this->__isset.field27 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 28:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field28);
          this->__isset.field28 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 29:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field29 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field29);
          this->__isset.field29 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 30:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field30);
          this->__isset.field30 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 31:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field31 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field31);
          this->__isset.field31 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 32:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field32);
          this->__isset.field32 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 33:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::read(iprot, &this->field33);
          this->__isset.field33 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 34:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field34 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field34);
          this->__isset.field34 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 35:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::read(iprot, &this->field35);
          this->__isset.field35 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 36:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field36);
          this->__isset.field36 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 37:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field37);
          this->__isset.field37 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 38:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field38);
          this->__isset.field38 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 39:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field39 = std::map<std::map<std::vector<float>, int8_t>, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::map<std::vector<float>, int8_t>, int32_t>>::read(*iprot, this->field39);
          this->__isset.field39 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 40:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field40 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field40);
          this->__isset.field40 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 41:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::read(iprot, &this->field41);
          this->__isset.field41 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 42:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field42);
          this->__isset.field42 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 43:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::read(iprot, &this->field43);
          this->__isset.field43 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 44:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field44);
          this->__isset.field44 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 45:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field45);
          this->__isset.field45 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 46:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field46);
          this->__isset.field46 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 47:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field47 = std::map<double, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, std::map<double, std::string>>::read(*iprot, this->field47);
          this->__isset.field47 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 48:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field48);
          this->__isset.field48 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 49:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::read(iprot, &this->field49);
          this->__isset.field49 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 50:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct19>::read(iprot, &this->field50);
          this->__isset.field50 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 51:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field51);
          this->__isset.field51 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 52:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct16>::read(iprot, &this->field52);
          this->__isset.field52 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 53:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field53 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field53);
          this->__isset.field53 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 54:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field54 = std::set<std::vector<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::set<std::vector<std::string>>>::read(*iprot, this->field54);
          this->__isset.field54 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 55:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field55);
          this->__isset.field55 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 56:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field56);
          this->__isset.field56 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 57:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field57 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field57);
          this->__isset.field57 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 58:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field58 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field58);
          this->__isset.field58 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 59:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field59 = std::map<std::map<std::map<int32_t, int64_t>, std::string>, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>, ::apache::thrift::type_class::floating_point>, std::map<std::map<std::map<int32_t, int64_t>, std::string>, float>>::read(*iprot, this->field59);
          this->__isset.field59 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 60:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field60);
          this->__isset.field60 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 61:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field61);
          this->__isset.field61 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 62:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct16>::read(iprot, &this->field62);
          this->__isset.field62 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 63:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field63 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field63);
          this->__isset.field63 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 64:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field64);
          this->__isset.field64 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 65:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field65);
          this->__isset.field65 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 66:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field66 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field66);
          this->__isset.field66 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 67:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field67);
          this->__isset.field67 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 68:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field68);
          this->__isset.field68 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 69:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::read(iprot, &this->field69);
          this->__isset.field69 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 70:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field70);
          this->__isset.field70 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 71:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field71);
          this->__isset.field71 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 72:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::read(iprot, &this->field72);
          this->__isset.field72 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 73:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field73);
          this->__isset.field73 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 74:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field74);
          this->__isset.field74 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 75:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field75);
          this->__isset.field75 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 76:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field76 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field76);
          this->__isset.field76 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 77:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field77 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field77);
          this->__isset.field77 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 78:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field78 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field78);
          this->__isset.field78 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 79:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field79);
          this->__isset.field79 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 80:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::read(iprot, &this->field80);
          this->__isset.field80 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 81:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field81);
          this->__isset.field81 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 82:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field82);
          this->__isset.field82 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 83:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field83 = std::vector<std::map<std::map<float, bool>, int8_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>>, std::vector<std::map<std::map<float, bool>, int8_t>>>::read(*iprot, this->field83);
          this->__isset.field83 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 84:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field84);
          this->__isset.field84 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 85:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field85);
          this->__isset.field85 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 86:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field86);
          this->__isset.field86 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 87:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field87);
          this->__isset.field87 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 88:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field88 = std::set<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::read(*iprot, this->field88);
          this->__isset.field88 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 89:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field89);
          this->__isset.field89 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 90:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field90);
          this->__isset.field90 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 91:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field91 = std::vector<std::vector<std::vector<int64_t>>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>>, std::vector<std::vector<std::vector<int64_t>>>>::read(*iprot, this->field91);
          this->__isset.field91 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 92:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field92);
          this->__isset.field92 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 93:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field93 = std::set<std::set<int64_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int64_t>>>::read(*iprot, this->field93);
          this->__isset.field93 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 94:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field94);
          this->__isset.field94 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 95:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field95);
          this->__isset.field95 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 96:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field96);
          this->__isset.field96 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 97:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field97);
          this->__isset.field97 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 98:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field98);
          this->__isset.field98 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 99:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field99);
          this->__isset.field99 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 100:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct13>::read(iprot, &this->field100);
          this->__isset.field100 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 101:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field101);
          this->__isset.field101 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 102:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field102);
          this->__isset.field102 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 103:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field103);
          this->__isset.field103 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 104:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field104);
          this->__isset.field104 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 105:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field105);
          this->__isset.field105 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 106:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field106 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field106);
          this->__isset.field106 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 107:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::read(iprot, &this->field107);
          this->__isset.field107 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 108:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field108 = std::map<int64_t, std::vector<bool>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<int64_t, std::vector<bool>>>::read(*iprot, this->field108);
          this->__isset.field108 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 109:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field109);
          this->__isset.field109 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 110:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field110);
          this->__isset.field110 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 111:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field111 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field111);
          this->__isset.field111 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 112:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field112);
          this->__isset.field112 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 113:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field113);
          this->__isset.field113 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 114:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::read(iprot, &this->field114);
          this->__isset.field114 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 115:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::read(iprot, &this->field115);
          this->__isset.field115 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 116:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field116);
          this->__isset.field116 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 117:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field117 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field117);
          this->__isset.field117 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 118:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field118);
          this->__isset.field118 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 119:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field119 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field119);
          this->__isset.field119 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 120:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::read(iprot, &this->field120);
          this->__isset.field120 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 121:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct14>::read(iprot, &this->field121);
          this->__isset.field121 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 122:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field122);
          this->__isset.field122 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 123:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field123 = std::map<int32_t, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int32_t, std::string>>::read(*iprot, this->field123);
          this->__isset.field123 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 124:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field124);
          this->__isset.field124 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 125:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field125);
          this->__isset.field125 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 126:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field126 = std::vector<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::read(*iprot, this->field126);
          this->__isset.field126 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 127:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field127);
          this->__isset.field127 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 128:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field128 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field128);
          this->__isset.field128 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 129:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field129);
          this->__isset.field129 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 130:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field130 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field130);
          this->__isset.field130 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 131:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field131 = std::vector<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::read(*iprot, this->field131);
          this->__isset.field131 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 132:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field132 = std::map<std::set<std::string>, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, ::apache::thrift::type_class::floating_point>, std::map<std::set<std::string>, float>>::read(*iprot, this->field132);
          this->__isset.field132 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 133:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field133 = std::vector<std::map<std::vector<std::vector<float>>, int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, ::apache::thrift::type_class::integral>>, std::vector<std::map<std::vector<std::vector<float>>, int32_t>>>::read(*iprot, this->field133);
          this->__isset.field133 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 134:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field134 = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->field134);
          this->__isset.field134 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 135:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field135 = std::map< ::cpp2::Struct13, double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::floating_point>, std::map< ::cpp2::Struct13, double>>::read(*iprot, this->field135);
          this->__isset.field135 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 136:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field136);
          this->__isset.field136 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 137:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field137 = std::map<int8_t, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int8_t, float>>::read(*iprot, this->field137);
          this->__isset.field137 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 138:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field138 = std::map<double,  ::cpp2::Struct7>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::structure>, std::map<double,  ::cpp2::Struct7>>::read(*iprot, this->field138);
          this->__isset.field138 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 139:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field139 = std::vector<std::set<std::string>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>, std::vector<std::set<std::string>>>::read(*iprot, this->field139);
          this->__isset.field139 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 140:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field140 = std::map<std::set<double>, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::string>, std::map<std::set<double>, std::string>>::read(*iprot, this->field140);
          this->__isset.field140 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 141:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::read(iprot, &this->field141);
          this->__isset.field141 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 142:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field142);
          this->__isset.field142 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 143:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field143);
          this->__isset.field143 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 144:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field144 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field144);
          this->__isset.field144 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 145:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field145);
          this->__isset.field145 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 146:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct17>::read(iprot, &this->field146);
          this->__isset.field146 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 147:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field147);
          this->__isset.field147 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 148:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field148);
          this->__isset.field148 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 149:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field149);
          this->__isset.field149 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 150:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field150 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field150);
          this->__isset.field150 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 151:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct18>::read(iprot, &this->field151);
          this->__isset.field151 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 152:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field152);
          this->__isset.field152 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 153:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field153);
          this->__isset.field153 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 154:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field154);
          this->__isset.field154 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 155:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field155 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field155);
          this->__isset.field155 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 156:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::read(iprot, &this->field156);
          this->__isset.field156 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 157:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field157);
          this->__isset.field157 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 158:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field158 = std::map<int16_t, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int16_t>>::read(*iprot, this->field158);
          this->__isset.field158 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 159:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::read(iprot, &this->field159);
          this->__isset.field159 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 160:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field160);
          this->__isset.field160 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 161:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field161);
          this->__isset.field161 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 162:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field162);
          this->__isset.field162 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 163:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field163 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field163);
          this->__isset.field163 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 164:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field164 = std::vector<std::map<int64_t, int32_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::vector<std::map<int64_t, int32_t>>>::read(*iprot, this->field164);
          this->__isset.field164 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 165:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field165 = std::vector<int64_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::read(*iprot, this->field165);
          this->__isset.field165 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 166:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field166);
          this->__isset.field166 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 167:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field167);
          this->__isset.field167 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 168:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field168 = std::map<std::string, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::string>, std::map<std::string, std::string>>::read(*iprot, this->field168);
          this->__isset.field168 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 169:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field169 = std::map<int8_t, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int8_t>>::read(*iprot, this->field169);
          this->__isset.field169 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 170:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field170);
          this->__isset.field170 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 171:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field171 = std::map<std::string, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::read(*iprot, this->field171);
          this->__isset.field171 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 172:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field172 = std::map< ::cpp2::Struct3, float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::floating_point>, std::map< ::cpp2::Struct3, float>>::read(*iprot, this->field172);
          this->__isset.field172 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 173:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field173);
          this->__isset.field173 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 174:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field174);
          this->__isset.field174 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 175:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field175);
          this->__isset.field175 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 176:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field176);
          this->__isset.field176 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 177:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field177 = std::map<float, int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int16_t>>::read(*iprot, this->field177);
          this->__isset.field177 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 178:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::read(iprot, &this->field178);
          this->__isset.field178 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 179:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field179 = std::map<int64_t, std::set<int64_t>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<int64_t, std::set<int64_t>>>::read(*iprot, this->field179);
          this->__isset.field179 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 180:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field180 = std::map<double, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>, std::map<double, std::string>>::read(*iprot, this->field180);
          this->__isset.field180 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 181:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field181);
          this->__isset.field181 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 182:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct21>::read(iprot, &this->field182);
          this->__isset.field182 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 183:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field183);
          this->__isset.field183 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 184:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field184 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::read(*iprot, this->field184);
          this->__isset.field184 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 185:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field185);
          this->__isset.field185 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 186:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field186);
          this->__isset.field186 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 187:
      {
        if (_ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->field187);
          this->__isset.field187 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 188:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field188 = std::set<std::set<double>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<double>>>::read(*iprot, this->field188);
          this->__isset.field188 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 189:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field189);
          this->__isset.field189 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 190:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field190 = std::set<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::read(*iprot, this->field190);
          this->__isset.field190 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 191:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field191 = std::set<bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::read(*iprot, this->field191);
          this->__isset.field191 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 192:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field192);
          this->__isset.field192 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 193:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field193);
          this->__isset.field193 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 194:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field194);
          this->__isset.field194 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 195:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field195 = std::map<int64_t, int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int8_t>>::read(*iprot, this->field195);
          this->__isset.field195 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 196:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::read(iprot, &this->field196);
          this->__isset.field196 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 197:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field197);
          this->__isset.field197 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 198:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field198 = std::map<double, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int32_t>>::read(*iprot, this->field198);
          this->__isset.field198 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 199:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field199 = std::set<int16_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::read(*iprot, this->field199);
          this->__isset.field199 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 200:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct18>::read(iprot, &this->field200);
          this->__isset.field200 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 201:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field201);
          this->__isset.field201 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 202:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field202);
          this->__isset.field202 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 203:
      {
        if (_ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct16>::read(iprot, &this->field203);
          this->__isset.field203 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 204:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field204 = std::map<std::vector<bool>, std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::string>, std::map<std::vector<bool>, std::string>>::read(*iprot, this->field204);
          this->__isset.field204 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 205:
      {
        if (_ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->field205);
          this->__isset.field205 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 206:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field206 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field206);
          this->__isset.field206 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 207:
      {
        if (_ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->field207);
          this->__isset.field207 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 208:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field208 = std::map<int8_t, int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int32_t>>::read(*iprot, this->field208);
          this->__isset.field208 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 209:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field209);
          this->__isset.field209 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 210:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field210 = std::vector<int32_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::read(*iprot, this->field210);
          this->__isset.field210 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 211:
      {
        if (_ftype == apache::thrift::protocol::T_FLOAT) {
          xfer += iprot->readFloat(this->field211);
          this->__isset.field211 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 212:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->field212);
          this->__isset.field212 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 213:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field213 = std::set<float>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::read(*iprot, this->field213);
          this->__isset.field213 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 214:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field214 = std::vector<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::read(*iprot, this->field214);
          this->__isset.field214 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 215:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field215 = std::map<std::string,  ::cpp2::Struct5>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::structure>, std::map<std::string,  ::cpp2::Struct5>>::read(*iprot, this->field215);
          this->__isset.field215 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 216:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field216);
          this->__isset.field216 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 217:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field217 = std::map<int64_t, double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int64_t, double>>::read(*iprot, this->field217);
          this->__isset.field217 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 218:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field218);
          this->__isset.field218 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 219:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field219);
          this->__isset.field219 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 220:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field220 = std::set<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::read(*iprot, this->field220);
          this->__isset.field220 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 221:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field221 = std::map<std::vector<std::vector<std::string>>, std::vector<float>>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<std::vector<std::vector<std::string>>, std::vector<float>>>::read(*iprot, this->field221);
          this->__isset.field221 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 222:
      {
        if (_ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->field222);
          this->__isset.field222 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 223:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field223 = std::vector<int8_t>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::read(*iprot, this->field223);
          this->__isset.field223 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 224:
      {
        if (_ftype == apache::thrift::protocol::T_SET) {
          this->field224 = std::set<std::string>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::read(*iprot, this->field224);
          this->__isset.field224 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 225:
      {
        if (_ftype == apache::thrift::protocol::T_MAP) {
          this->field225 = std::map<float, bool>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, bool>>::read(*iprot, this->field225);
          this->__isset.field225 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 226:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field226);
          this->__isset.field226 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 227:
      {
        if (_ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->field227);
          this->__isset.field227 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 228:
      {
        if (_ftype == apache::thrift::protocol::T_LIST) {
          this->field228 = std::vector<double>();
          xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::read(*iprot, this->field228);
          this->__isset.field228 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 229:
      {
        if (_ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->field229);
          this->__isset.field229 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      case 230:
      {
        if (_ftype == apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->field230);
          this->__isset.field230 = true;
        } else {
          xfer += iprot->skip(_ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(_ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t Struct27::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct27");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSize(prot_, &this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_FLOAT, 2);
  xfer += prot_->serializedSizeFloat(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeBinary(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int8_t, std::string>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_I64, 7);
  xfer += prot_->serializedSizeI64(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_SET, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_SET, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct1>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_SET, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_I64, 11);
  xfer += prot_->serializedSizeI64(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_SET, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<float>>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_MAP, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<bool, std::string>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_BOOL, 14);
  xfer += prot_->serializedSizeBool(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_FLOAT, 15);
  xfer += prot_->serializedSizeFloat(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_BOOL, 16);
  xfer += prot_->serializedSizeBool(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_STRUCT, 17);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_STRUCT, 18);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSize(prot_, &this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_SET, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_I16, 20);
  xfer += prot_->serializedSizeI16(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_SET, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_STRING, 22);
  xfer += prot_->serializedSizeString(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_BYTE, 23);
  xfer += prot_->serializedSizeByte(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_MAP, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int16_t, float>>::serializedSize<false>(*prot_, this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_STRUCT, 25);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_MAP, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>>, std::map<std::string, std::map<std::string, std::map<int32_t, float>>>>::serializedSize<false>(*prot_, this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_SET, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_FLOAT, 28);
  xfer += prot_->serializedSizeFloat(this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_LIST, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_I32, 30);
  xfer += prot_->serializedSizeI32(this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_LIST, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_I64, 32);
  xfer += prot_->serializedSizeI64(this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_STRUCT, 33);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSize(prot_, &this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_SET, 34);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_STRUCT, 35);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::serializedSize(prot_, &this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_BYTE, 36);
  xfer += prot_->serializedSizeByte(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_I64, 37);
  xfer += prot_->serializedSizeI64(this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_BOOL, 38);
  xfer += prot_->serializedSizeBool(this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_MAP, 39);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::map<std::vector<float>, int8_t>, int32_t>>::serializedSize<false>(*prot_, this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_LIST, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_STRUCT, 41);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSize(prot_, &this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_DOUBLE, 42);
  xfer += prot_->serializedSizeDouble(this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_STRUCT, 43);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSize(prot_, &this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_STRING, 44);
  xfer += prot_->serializedSizeString(this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_I16, 45);
  xfer += prot_->serializedSizeI16(this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_I32, 46);
  xfer += prot_->serializedSizeI32(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_MAP, 47);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, std::map<double, std::string>>::serializedSize<false>(*prot_, this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_BYTE, 48);
  xfer += prot_->serializedSizeByte(this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_STRUCT, 49);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSize(prot_, &this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_STRUCT, 50);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct19>::serializedSize(prot_, &this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_STRING, 51);
  xfer += prot_->serializedSizeBinary(this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_STRUCT, 52);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct16>::serializedSize(prot_, &this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_SET, 53);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_SET, 54);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::set<std::vector<std::string>>>::serializedSize<false>(*prot_, this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_DOUBLE, 55);
  xfer += prot_->serializedSizeDouble(this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_BOOL, 56);
  xfer += prot_->serializedSizeBool(this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_LIST, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_SET, 58);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_MAP, 59);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>, ::apache::thrift::type_class::floating_point>, std::map<std::map<std::map<int32_t, int64_t>, std::string>, float>>::serializedSize<false>(*prot_, this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_STRUCT, 60);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_FLOAT, 61);
  xfer += prot_->serializedSizeFloat(this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_STRUCT, 62);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct16>::serializedSize(prot_, &this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_SET, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_I64, 64);
  xfer += prot_->serializedSizeI64(this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_I32, 65);
  xfer += prot_->serializedSizeI32(this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_LIST, 66);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_BOOL, 67);
  xfer += prot_->serializedSizeBool(this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_BOOL, 68);
  xfer += prot_->serializedSizeBool(this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_STRUCT, 69);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSize(prot_, &this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_BYTE, 70);
  xfer += prot_->serializedSizeByte(this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_I32, 71);
  xfer += prot_->serializedSizeI32(this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_STRUCT, 72);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSize(prot_, &this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_I16, 73);
  xfer += prot_->serializedSizeI16(this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_DOUBLE, 74);
  xfer += prot_->serializedSizeDouble(this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_I64, 75);
  xfer += prot_->serializedSizeI64(this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_LIST, 76);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_LIST, 77);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_LIST, 78);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_BYTE, 79);
  xfer += prot_->serializedSizeByte(this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_STRUCT, 80);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSize(prot_, &this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_BYTE, 81);
  xfer += prot_->serializedSizeByte(this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_STRING, 82);
  xfer += prot_->serializedSizeString(this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_LIST, 83);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>>, std::vector<std::map<std::map<float, bool>, int8_t>>>::serializedSize<false>(*prot_, this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_FLOAT, 84);
  xfer += prot_->serializedSizeFloat(this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_STRING, 85);
  xfer += prot_->serializedSizeBinary(this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_I32, 86);
  xfer += prot_->serializedSizeI32(this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_I16, 87);
  xfer += prot_->serializedSizeI16(this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_SET, 88);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_BOOL, 89);
  xfer += prot_->serializedSizeBool(this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_BOOL, 90);
  xfer += prot_->serializedSizeBool(this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_LIST, 91);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>>, std::vector<std::vector<std::vector<int64_t>>>>::serializedSize<false>(*prot_, this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_STRING, 92);
  xfer += prot_->serializedSizeBinary(this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_SET, 93);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int64_t>>>::serializedSize<false>(*prot_, this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_DOUBLE, 94);
  xfer += prot_->serializedSizeDouble(this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_STRING, 95);
  xfer += prot_->serializedSizeString(this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_BOOL, 96);
  xfer += prot_->serializedSizeBool(this->field96);
  xfer += prot_->serializedFieldSize("field97", apache::thrift::protocol::T_STRING, 97);
  xfer += prot_->serializedSizeString(this->field97);
  xfer += prot_->serializedFieldSize("field98", apache::thrift::protocol::T_STRING, 98);
  xfer += prot_->serializedSizeBinary(this->field98);
  xfer += prot_->serializedFieldSize("field99", apache::thrift::protocol::T_STRING, 99);
  xfer += prot_->serializedSizeBinary(this->field99);
  xfer += prot_->serializedFieldSize("field100", apache::thrift::protocol::T_STRUCT, 100);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct13>::serializedSize(prot_, &this->field100);
  xfer += prot_->serializedFieldSize("field101", apache::thrift::protocol::T_BOOL, 101);
  xfer += prot_->serializedSizeBool(this->field101);
  xfer += prot_->serializedFieldSize("field102", apache::thrift::protocol::T_FLOAT, 102);
  xfer += prot_->serializedSizeFloat(this->field102);
  xfer += prot_->serializedFieldSize("field103", apache::thrift::protocol::T_I16, 103);
  xfer += prot_->serializedSizeI16(this->field103);
  xfer += prot_->serializedFieldSize("field104", apache::thrift::protocol::T_I32, 104);
  xfer += prot_->serializedSizeI32(this->field104);
  xfer += prot_->serializedFieldSize("field105", apache::thrift::protocol::T_I32, 105);
  xfer += prot_->serializedSizeI32(this->field105);
  xfer += prot_->serializedFieldSize("field106", apache::thrift::protocol::T_SET, 106);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field106);
  xfer += prot_->serializedFieldSize("field107", apache::thrift::protocol::T_STRUCT, 107);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSize(prot_, &this->field107);
  xfer += prot_->serializedFieldSize("field108", apache::thrift::protocol::T_MAP, 108);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<int64_t, std::vector<bool>>>::serializedSize<false>(*prot_, this->field108);
  xfer += prot_->serializedFieldSize("field109", apache::thrift::protocol::T_BOOL, 109);
  xfer += prot_->serializedSizeBool(this->field109);
  xfer += prot_->serializedFieldSize("field110", apache::thrift::protocol::T_I16, 110);
  xfer += prot_->serializedSizeI16(this->field110);
  xfer += prot_->serializedFieldSize("field111", apache::thrift::protocol::T_LIST, 111);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field111);
  xfer += prot_->serializedFieldSize("field112", apache::thrift::protocol::T_FLOAT, 112);
  xfer += prot_->serializedSizeFloat(this->field112);
  xfer += prot_->serializedFieldSize("field113", apache::thrift::protocol::T_I32, 113);
  xfer += prot_->serializedSizeI32(this->field113);
  xfer += prot_->serializedFieldSize("field114", apache::thrift::protocol::T_STRUCT, 114);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSize(prot_, &this->field114);
  xfer += prot_->serializedFieldSize("field115", apache::thrift::protocol::T_STRUCT, 115);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSize(prot_, &this->field115);
  xfer += prot_->serializedFieldSize("field116", apache::thrift::protocol::T_I64, 116);
  xfer += prot_->serializedSizeI64(this->field116);
  xfer += prot_->serializedFieldSize("field117", apache::thrift::protocol::T_SET, 117);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field117);
  xfer += prot_->serializedFieldSize("field118", apache::thrift::protocol::T_BYTE, 118);
  xfer += prot_->serializedSizeByte(this->field118);
  xfer += prot_->serializedFieldSize("field119", apache::thrift::protocol::T_LIST, 119);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field119);
  xfer += prot_->serializedFieldSize("field120", apache::thrift::protocol::T_STRUCT, 120);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSize(prot_, &this->field120);
  xfer += prot_->serializedFieldSize("field121", apache::thrift::protocol::T_STRUCT, 121);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct14>::serializedSize(prot_, &this->field121);
  xfer += prot_->serializedFieldSize("field122", apache::thrift::protocol::T_I64, 122);
  xfer += prot_->serializedSizeI64(this->field122);
  xfer += prot_->serializedFieldSize("field123", apache::thrift::protocol::T_MAP, 123);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int32_t, std::string>>::serializedSize<false>(*prot_, this->field123);
  xfer += prot_->serializedFieldSize("field124", apache::thrift::protocol::T_I64, 124);
  xfer += prot_->serializedSizeI64(this->field124);
  xfer += prot_->serializedFieldSize("field125", apache::thrift::protocol::T_STRING, 125);
  xfer += prot_->serializedSizeBinary(this->field125);
  xfer += prot_->serializedFieldSize("field126", apache::thrift::protocol::T_LIST, 126);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field126);
  xfer += prot_->serializedFieldSize("field127", apache::thrift::protocol::T_FLOAT, 127);
  xfer += prot_->serializedSizeFloat(this->field127);
  xfer += prot_->serializedFieldSize("field128", apache::thrift::protocol::T_SET, 128);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field128);
  xfer += prot_->serializedFieldSize("field129", apache::thrift::protocol::T_I16, 129);
  xfer += prot_->serializedSizeI16(this->field129);
  xfer += prot_->serializedFieldSize("field130", apache::thrift::protocol::T_SET, 130);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field130);
  xfer += prot_->serializedFieldSize("field131", apache::thrift::protocol::T_LIST, 131);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field131);
  xfer += prot_->serializedFieldSize("field132", apache::thrift::protocol::T_MAP, 132);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, ::apache::thrift::type_class::floating_point>, std::map<std::set<std::string>, float>>::serializedSize<false>(*prot_, this->field132);
  xfer += prot_->serializedFieldSize("field133", apache::thrift::protocol::T_LIST, 133);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, ::apache::thrift::type_class::integral>>, std::vector<std::map<std::vector<std::vector<float>>, int32_t>>>::serializedSize<false>(*prot_, this->field133);
  xfer += prot_->serializedFieldSize("field134", apache::thrift::protocol::T_LIST, 134);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field134);
  xfer += prot_->serializedFieldSize("field135", apache::thrift::protocol::T_MAP, 135);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::floating_point>, std::map< ::cpp2::Struct13, double>>::serializedSize<false>(*prot_, this->field135);
  xfer += prot_->serializedFieldSize("field136", apache::thrift::protocol::T_FLOAT, 136);
  xfer += prot_->serializedSizeFloat(this->field136);
  xfer += prot_->serializedFieldSize("field137", apache::thrift::protocol::T_MAP, 137);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int8_t, float>>::serializedSize<false>(*prot_, this->field137);
  xfer += prot_->serializedFieldSize("field138", apache::thrift::protocol::T_MAP, 138);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::structure>, std::map<double,  ::cpp2::Struct7>>::serializedSize<false>(*prot_, this->field138);
  xfer += prot_->serializedFieldSize("field139", apache::thrift::protocol::T_LIST, 139);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>, std::vector<std::set<std::string>>>::serializedSize<false>(*prot_, this->field139);
  xfer += prot_->serializedFieldSize("field140", apache::thrift::protocol::T_MAP, 140);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::string>, std::map<std::set<double>, std::string>>::serializedSize<false>(*prot_, this->field140);
  xfer += prot_->serializedFieldSize("field141", apache::thrift::protocol::T_STRUCT, 141);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::serializedSize(prot_, &this->field141);
  xfer += prot_->serializedFieldSize("field142", apache::thrift::protocol::T_I16, 142);
  xfer += prot_->serializedSizeI16(this->field142);
  xfer += prot_->serializedFieldSize("field143", apache::thrift::protocol::T_STRING, 143);
  xfer += prot_->serializedSizeString(this->field143);
  xfer += prot_->serializedFieldSize("field144", apache::thrift::protocol::T_SET, 144);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field144);
  xfer += prot_->serializedFieldSize("field145", apache::thrift::protocol::T_DOUBLE, 145);
  xfer += prot_->serializedSizeDouble(this->field145);
  xfer += prot_->serializedFieldSize("field146", apache::thrift::protocol::T_STRUCT, 146);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct17>::serializedSize(prot_, &this->field146);
  xfer += prot_->serializedFieldSize("field147", apache::thrift::protocol::T_STRING, 147);
  xfer += prot_->serializedSizeBinary(this->field147);
  xfer += prot_->serializedFieldSize("field148", apache::thrift::protocol::T_FLOAT, 148);
  xfer += prot_->serializedSizeFloat(this->field148);
  xfer += prot_->serializedFieldSize("field149", apache::thrift::protocol::T_FLOAT, 149);
  xfer += prot_->serializedSizeFloat(this->field149);
  xfer += prot_->serializedFieldSize("field150", apache::thrift::protocol::T_SET, 150);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field150);
  xfer += prot_->serializedFieldSize("field151", apache::thrift::protocol::T_STRUCT, 151);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct18>::serializedSize(prot_, &this->field151);
  xfer += prot_->serializedFieldSize("field152", apache::thrift::protocol::T_BYTE, 152);
  xfer += prot_->serializedSizeByte(this->field152);
  xfer += prot_->serializedFieldSize("field153", apache::thrift::protocol::T_STRING, 153);
  xfer += prot_->serializedSizeBinary(this->field153);
  xfer += prot_->serializedFieldSize("field154", apache::thrift::protocol::T_DOUBLE, 154);
  xfer += prot_->serializedSizeDouble(this->field154);
  xfer += prot_->serializedFieldSize("field155", apache::thrift::protocol::T_LIST, 155);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field155);
  xfer += prot_->serializedFieldSize("field156", apache::thrift::protocol::T_STRUCT, 156);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSize(prot_, &this->field156);
  xfer += prot_->serializedFieldSize("field157", apache::thrift::protocol::T_I32, 157);
  xfer += prot_->serializedSizeI32(this->field157);
  xfer += prot_->serializedFieldSize("field158", apache::thrift::protocol::T_MAP, 158);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int16_t>>::serializedSize<false>(*prot_, this->field158);
  xfer += prot_->serializedFieldSize("field159", apache::thrift::protocol::T_STRUCT, 159);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSize(prot_, &this->field159);
  xfer += prot_->serializedFieldSize("field160", apache::thrift::protocol::T_STRING, 160);
  xfer += prot_->serializedSizeString(this->field160);
  xfer += prot_->serializedFieldSize("field161", apache::thrift::protocol::T_BYTE, 161);
  xfer += prot_->serializedSizeByte(this->field161);
  xfer += prot_->serializedFieldSize("field162", apache::thrift::protocol::T_I32, 162);
  xfer += prot_->serializedSizeI32(this->field162);
  xfer += prot_->serializedFieldSize("field163", apache::thrift::protocol::T_SET, 163);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field163);
  xfer += prot_->serializedFieldSize("field164", apache::thrift::protocol::T_LIST, 164);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::vector<std::map<int64_t, int32_t>>>::serializedSize<false>(*prot_, this->field164);
  xfer += prot_->serializedFieldSize("field165", apache::thrift::protocol::T_LIST, 165);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field165);
  xfer += prot_->serializedFieldSize("field166", apache::thrift::protocol::T_STRING, 166);
  xfer += prot_->serializedSizeString(this->field166);
  xfer += prot_->serializedFieldSize("field167", apache::thrift::protocol::T_DOUBLE, 167);
  xfer += prot_->serializedSizeDouble(this->field167);
  xfer += prot_->serializedFieldSize("field168", apache::thrift::protocol::T_MAP, 168);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::string>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->field168);
  xfer += prot_->serializedFieldSize("field169", apache::thrift::protocol::T_MAP, 169);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int8_t>>::serializedSize<false>(*prot_, this->field169);
  xfer += prot_->serializedFieldSize("field170", apache::thrift::protocol::T_DOUBLE, 170);
  xfer += prot_->serializedSizeDouble(this->field170);
  xfer += prot_->serializedFieldSize("field171", apache::thrift::protocol::T_MAP, 171);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->field171);
  xfer += prot_->serializedFieldSize("field172", apache::thrift::protocol::T_MAP, 172);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::floating_point>, std::map< ::cpp2::Struct3, float>>::serializedSize<false>(*prot_, this->field172);
  xfer += prot_->serializedFieldSize("field173", apache::thrift::protocol::T_STRING, 173);
  xfer += prot_->serializedSizeString(this->field173);
  xfer += prot_->serializedFieldSize("field174", apache::thrift::protocol::T_I16, 174);
  xfer += prot_->serializedSizeI16(this->field174);
  xfer += prot_->serializedFieldSize("field175", apache::thrift::protocol::T_I64, 175);
  xfer += prot_->serializedSizeI64(this->field175);
  xfer += prot_->serializedFieldSize("field176", apache::thrift::protocol::T_STRING, 176);
  xfer += prot_->serializedSizeString(this->field176);
  xfer += prot_->serializedFieldSize("field177", apache::thrift::protocol::T_MAP, 177);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int16_t>>::serializedSize<false>(*prot_, this->field177);
  xfer += prot_->serializedFieldSize("field178", apache::thrift::protocol::T_STRUCT, 178);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSize(prot_, &this->field178);
  xfer += prot_->serializedFieldSize("field179", apache::thrift::protocol::T_MAP, 179);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<int64_t, std::set<int64_t>>>::serializedSize<false>(*prot_, this->field179);
  xfer += prot_->serializedFieldSize("field180", apache::thrift::protocol::T_MAP, 180);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>, std::map<double, std::string>>::serializedSize<false>(*prot_, this->field180);
  xfer += prot_->serializedFieldSize("field181", apache::thrift::protocol::T_I32, 181);
  xfer += prot_->serializedSizeI32(this->field181);
  xfer += prot_->serializedFieldSize("field182", apache::thrift::protocol::T_STRUCT, 182);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct21>::serializedSize(prot_, &this->field182);
  xfer += prot_->serializedFieldSize("field183", apache::thrift::protocol::T_STRING, 183);
  xfer += prot_->serializedSizeBinary(this->field183);
  xfer += prot_->serializedFieldSize("field184", apache::thrift::protocol::T_SET, 184);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field184);
  xfer += prot_->serializedFieldSize("field185", apache::thrift::protocol::T_BYTE, 185);
  xfer += prot_->serializedSizeByte(this->field185);
  xfer += prot_->serializedFieldSize("field186", apache::thrift::protocol::T_FLOAT, 186);
  xfer += prot_->serializedSizeFloat(this->field186);
  xfer += prot_->serializedFieldSize("field187", apache::thrift::protocol::T_I16, 187);
  xfer += prot_->serializedSizeI16(this->field187);
  xfer += prot_->serializedFieldSize("field188", apache::thrift::protocol::T_SET, 188);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<double>>>::serializedSize<false>(*prot_, this->field188);
  xfer += prot_->serializedFieldSize("field189", apache::thrift::protocol::T_STRING, 189);
  xfer += prot_->serializedSizeString(this->field189);
  xfer += prot_->serializedFieldSize("field190", apache::thrift::protocol::T_SET, 190);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field190);
  xfer += prot_->serializedFieldSize("field191", apache::thrift::protocol::T_SET, 191);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field191);
  xfer += prot_->serializedFieldSize("field192", apache::thrift::protocol::T_FLOAT, 192);
  xfer += prot_->serializedSizeFloat(this->field192);
  xfer += prot_->serializedFieldSize("field193", apache::thrift::protocol::T_STRING, 193);
  xfer += prot_->serializedSizeString(this->field193);
  xfer += prot_->serializedFieldSize("field194", apache::thrift::protocol::T_FLOAT, 194);
  xfer += prot_->serializedSizeFloat(this->field194);
  xfer += prot_->serializedFieldSize("field195", apache::thrift::protocol::T_MAP, 195);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int8_t>>::serializedSize<false>(*prot_, this->field195);
  xfer += prot_->serializedFieldSize("field196", apache::thrift::protocol::T_STRUCT, 196);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSize(prot_, &this->field196);
  xfer += prot_->serializedFieldSize("field197", apache::thrift::protocol::T_BOOL, 197);
  xfer += prot_->serializedSizeBool(this->field197);
  xfer += prot_->serializedFieldSize("field198", apache::thrift::protocol::T_MAP, 198);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int32_t>>::serializedSize<false>(*prot_, this->field198);
  xfer += prot_->serializedFieldSize("field199", apache::thrift::protocol::T_SET, 199);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field199);
  xfer += prot_->serializedFieldSize("field200", apache::thrift::protocol::T_STRUCT, 200);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct18>::serializedSize(prot_, &this->field200);
  xfer += prot_->serializedFieldSize("field201", apache::thrift::protocol::T_I32, 201);
  xfer += prot_->serializedSizeI32(this->field201);
  xfer += prot_->serializedFieldSize("field202", apache::thrift::protocol::T_BYTE, 202);
  xfer += prot_->serializedSizeByte(this->field202);
  xfer += prot_->serializedFieldSize("field203", apache::thrift::protocol::T_STRUCT, 203);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct16>::serializedSize(prot_, &this->field203);
  xfer += prot_->serializedFieldSize("field204", apache::thrift::protocol::T_MAP, 204);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::string>, std::map<std::vector<bool>, std::string>>::serializedSize<false>(*prot_, this->field204);
  xfer += prot_->serializedFieldSize("field205", apache::thrift::protocol::T_I32, 205);
  xfer += prot_->serializedSizeI32(this->field205);
  xfer += prot_->serializedFieldSize("field206", apache::thrift::protocol::T_LIST, 206);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field206);
  xfer += prot_->serializedFieldSize("field207", apache::thrift::protocol::T_BOOL, 207);
  xfer += prot_->serializedSizeBool(this->field207);
  xfer += prot_->serializedFieldSize("field208", apache::thrift::protocol::T_MAP, 208);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int32_t>>::serializedSize<false>(*prot_, this->field208);
  xfer += prot_->serializedFieldSize("field209", apache::thrift::protocol::T_FLOAT, 209);
  xfer += prot_->serializedSizeFloat(this->field209);
  xfer += prot_->serializedFieldSize("field210", apache::thrift::protocol::T_LIST, 210);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field210);
  xfer += prot_->serializedFieldSize("field211", apache::thrift::protocol::T_FLOAT, 211);
  xfer += prot_->serializedSizeFloat(this->field211);
  xfer += prot_->serializedFieldSize("field212", apache::thrift::protocol::T_STRING, 212);
  xfer += prot_->serializedSizeBinary(this->field212);
  xfer += prot_->serializedFieldSize("field213", apache::thrift::protocol::T_SET, 213);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field213);
  xfer += prot_->serializedFieldSize("field214", apache::thrift::protocol::T_LIST, 214);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field214);
  xfer += prot_->serializedFieldSize("field215", apache::thrift::protocol::T_MAP, 215);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::structure>, std::map<std::string,  ::cpp2::Struct5>>::serializedSize<false>(*prot_, this->field215);
  xfer += prot_->serializedFieldSize("field216", apache::thrift::protocol::T_I64, 216);
  xfer += prot_->serializedSizeI64(this->field216);
  xfer += prot_->serializedFieldSize("field217", apache::thrift::protocol::T_MAP, 217);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int64_t, double>>::serializedSize<false>(*prot_, this->field217);
  xfer += prot_->serializedFieldSize("field218", apache::thrift::protocol::T_I64, 218);
  xfer += prot_->serializedSizeI64(this->field218);
  xfer += prot_->serializedFieldSize("field219", apache::thrift::protocol::T_STRING, 219);
  xfer += prot_->serializedSizeString(this->field219);
  xfer += prot_->serializedFieldSize("field220", apache::thrift::protocol::T_SET, 220);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field220);
  xfer += prot_->serializedFieldSize("field221", apache::thrift::protocol::T_MAP, 221);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<std::vector<std::vector<std::string>>, std::vector<float>>>::serializedSize<false>(*prot_, this->field221);
  xfer += prot_->serializedFieldSize("field222", apache::thrift::protocol::T_DOUBLE, 222);
  xfer += prot_->serializedSizeDouble(this->field222);
  xfer += prot_->serializedFieldSize("field223", apache::thrift::protocol::T_LIST, 223);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field223);
  xfer += prot_->serializedFieldSize("field224", apache::thrift::protocol::T_SET, 224);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field224);
  xfer += prot_->serializedFieldSize("field225", apache::thrift::protocol::T_MAP, 225);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, bool>>::serializedSize<false>(*prot_, this->field225);
  xfer += prot_->serializedFieldSize("field226", apache::thrift::protocol::T_I64, 226);
  xfer += prot_->serializedSizeI64(this->field226);
  xfer += prot_->serializedFieldSize("field227", apache::thrift::protocol::T_STRING, 227);
  xfer += prot_->serializedSizeString(this->field227);
  xfer += prot_->serializedFieldSize("field228", apache::thrift::protocol::T_LIST, 228);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field228);
  xfer += prot_->serializedFieldSize("field229", apache::thrift::protocol::T_I64, 229);
  xfer += prot_->serializedSizeI64(this->field229);
  xfer += prot_->serializedFieldSize("field230", apache::thrift::protocol::T_BYTE, 230);
  xfer += prot_->serializedSizeByte(this->field230);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct27::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("Struct27");
  xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSizeZC(prot_, &this->field1);
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_FLOAT, 2);
  xfer += prot_->serializedSizeFloat(this->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeZCBinary(this->field4);
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int8_t, std::string>>::serializedSize<false>(*prot_, this->field5);
  xfer += prot_->serializedFieldSize("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field6);
  xfer += prot_->serializedFieldSize("field7", apache::thrift::protocol::T_I64, 7);
  xfer += prot_->serializedSizeI64(this->field7);
  xfer += prot_->serializedFieldSize("field8", apache::thrift::protocol::T_SET, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field8);
  xfer += prot_->serializedFieldSize("field9", apache::thrift::protocol::T_SET, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct1>>::serializedSize<false>(*prot_, this->field9);
  xfer += prot_->serializedFieldSize("field10", apache::thrift::protocol::T_SET, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field10);
  xfer += prot_->serializedFieldSize("field11", apache::thrift::protocol::T_I64, 11);
  xfer += prot_->serializedSizeI64(this->field11);
  xfer += prot_->serializedFieldSize("field12", apache::thrift::protocol::T_SET, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<float>>>::serializedSize<false>(*prot_, this->field12);
  xfer += prot_->serializedFieldSize("field13", apache::thrift::protocol::T_MAP, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<bool, std::string>>::serializedSize<false>(*prot_, this->field13);
  xfer += prot_->serializedFieldSize("field14", apache::thrift::protocol::T_BOOL, 14);
  xfer += prot_->serializedSizeBool(this->field14);
  xfer += prot_->serializedFieldSize("field15", apache::thrift::protocol::T_FLOAT, 15);
  xfer += prot_->serializedSizeFloat(this->field15);
  xfer += prot_->serializedFieldSize("field16", apache::thrift::protocol::T_BOOL, 16);
  xfer += prot_->serializedSizeBool(this->field16);
  xfer += prot_->serializedFieldSize("field17", apache::thrift::protocol::T_STRUCT, 17);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field17);
  xfer += prot_->serializedFieldSize("field18", apache::thrift::protocol::T_STRUCT, 18);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSizeZC(prot_, &this->field18);
  xfer += prot_->serializedFieldSize("field19", apache::thrift::protocol::T_SET, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field19);
  xfer += prot_->serializedFieldSize("field20", apache::thrift::protocol::T_I16, 20);
  xfer += prot_->serializedSizeI16(this->field20);
  xfer += prot_->serializedFieldSize("field21", apache::thrift::protocol::T_SET, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field21);
  xfer += prot_->serializedFieldSize("field22", apache::thrift::protocol::T_STRING, 22);
  xfer += prot_->serializedSizeString(this->field22);
  xfer += prot_->serializedFieldSize("field23", apache::thrift::protocol::T_BYTE, 23);
  xfer += prot_->serializedSizeByte(this->field23);
  xfer += prot_->serializedFieldSize("field24", apache::thrift::protocol::T_MAP, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int16_t, float>>::serializedSize<false>(*prot_, this->field24);
  xfer += prot_->serializedFieldSize("field25", apache::thrift::protocol::T_STRUCT, 25);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field25);
  xfer += prot_->serializedFieldSize("field26", apache::thrift::protocol::T_MAP, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>>, std::map<std::string, std::map<std::string, std::map<int32_t, float>>>>::serializedSize<false>(*prot_, this->field26);
  xfer += prot_->serializedFieldSize("field27", apache::thrift::protocol::T_SET, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field27);
  xfer += prot_->serializedFieldSize("field28", apache::thrift::protocol::T_FLOAT, 28);
  xfer += prot_->serializedSizeFloat(this->field28);
  xfer += prot_->serializedFieldSize("field29", apache::thrift::protocol::T_LIST, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field29);
  xfer += prot_->serializedFieldSize("field30", apache::thrift::protocol::T_I32, 30);
  xfer += prot_->serializedSizeI32(this->field30);
  xfer += prot_->serializedFieldSize("field31", apache::thrift::protocol::T_LIST, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field31);
  xfer += prot_->serializedFieldSize("field32", apache::thrift::protocol::T_I64, 32);
  xfer += prot_->serializedSizeI64(this->field32);
  xfer += prot_->serializedFieldSize("field33", apache::thrift::protocol::T_STRUCT, 33);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSizeZC(prot_, &this->field33);
  xfer += prot_->serializedFieldSize("field34", apache::thrift::protocol::T_SET, 34);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field34);
  xfer += prot_->serializedFieldSize("field35", apache::thrift::protocol::T_STRUCT, 35);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::serializedSizeZC(prot_, &this->field35);
  xfer += prot_->serializedFieldSize("field36", apache::thrift::protocol::T_BYTE, 36);
  xfer += prot_->serializedSizeByte(this->field36);
  xfer += prot_->serializedFieldSize("field37", apache::thrift::protocol::T_I64, 37);
  xfer += prot_->serializedSizeI64(this->field37);
  xfer += prot_->serializedFieldSize("field38", apache::thrift::protocol::T_BOOL, 38);
  xfer += prot_->serializedSizeBool(this->field38);
  xfer += prot_->serializedFieldSize("field39", apache::thrift::protocol::T_MAP, 39);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::map<std::vector<float>, int8_t>, int32_t>>::serializedSize<false>(*prot_, this->field39);
  xfer += prot_->serializedFieldSize("field40", apache::thrift::protocol::T_LIST, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field40);
  xfer += prot_->serializedFieldSize("field41", apache::thrift::protocol::T_STRUCT, 41);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSizeZC(prot_, &this->field41);
  xfer += prot_->serializedFieldSize("field42", apache::thrift::protocol::T_DOUBLE, 42);
  xfer += prot_->serializedSizeDouble(this->field42);
  xfer += prot_->serializedFieldSize("field43", apache::thrift::protocol::T_STRUCT, 43);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::serializedSizeZC(prot_, &this->field43);
  xfer += prot_->serializedFieldSize("field44", apache::thrift::protocol::T_STRING, 44);
  xfer += prot_->serializedSizeString(this->field44);
  xfer += prot_->serializedFieldSize("field45", apache::thrift::protocol::T_I16, 45);
  xfer += prot_->serializedSizeI16(this->field45);
  xfer += prot_->serializedFieldSize("field46", apache::thrift::protocol::T_I32, 46);
  xfer += prot_->serializedSizeI32(this->field46);
  xfer += prot_->serializedFieldSize("field47", apache::thrift::protocol::T_MAP, 47);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, std::map<double, std::string>>::serializedSize<false>(*prot_, this->field47);
  xfer += prot_->serializedFieldSize("field48", apache::thrift::protocol::T_BYTE, 48);
  xfer += prot_->serializedSizeByte(this->field48);
  xfer += prot_->serializedFieldSize("field49", apache::thrift::protocol::T_STRUCT, 49);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSizeZC(prot_, &this->field49);
  xfer += prot_->serializedFieldSize("field50", apache::thrift::protocol::T_STRUCT, 50);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct19>::serializedSizeZC(prot_, &this->field50);
  xfer += prot_->serializedFieldSize("field51", apache::thrift::protocol::T_STRING, 51);
  xfer += prot_->serializedSizeZCBinary(this->field51);
  xfer += prot_->serializedFieldSize("field52", apache::thrift::protocol::T_STRUCT, 52);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct16>::serializedSizeZC(prot_, &this->field52);
  xfer += prot_->serializedFieldSize("field53", apache::thrift::protocol::T_SET, 53);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field53);
  xfer += prot_->serializedFieldSize("field54", apache::thrift::protocol::T_SET, 54);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::set<std::vector<std::string>>>::serializedSize<false>(*prot_, this->field54);
  xfer += prot_->serializedFieldSize("field55", apache::thrift::protocol::T_DOUBLE, 55);
  xfer += prot_->serializedSizeDouble(this->field55);
  xfer += prot_->serializedFieldSize("field56", apache::thrift::protocol::T_BOOL, 56);
  xfer += prot_->serializedSizeBool(this->field56);
  xfer += prot_->serializedFieldSize("field57", apache::thrift::protocol::T_LIST, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field57);
  xfer += prot_->serializedFieldSize("field58", apache::thrift::protocol::T_SET, 58);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field58);
  xfer += prot_->serializedFieldSize("field59", apache::thrift::protocol::T_MAP, 59);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>, ::apache::thrift::type_class::floating_point>, std::map<std::map<std::map<int32_t, int64_t>, std::string>, float>>::serializedSize<false>(*prot_, this->field59);
  xfer += prot_->serializedFieldSize("field60", apache::thrift::protocol::T_STRUCT, 60);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field60);
  xfer += prot_->serializedFieldSize("field61", apache::thrift::protocol::T_FLOAT, 61);
  xfer += prot_->serializedSizeFloat(this->field61);
  xfer += prot_->serializedFieldSize("field62", apache::thrift::protocol::T_STRUCT, 62);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct16>::serializedSizeZC(prot_, &this->field62);
  xfer += prot_->serializedFieldSize("field63", apache::thrift::protocol::T_SET, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field63);
  xfer += prot_->serializedFieldSize("field64", apache::thrift::protocol::T_I64, 64);
  xfer += prot_->serializedSizeI64(this->field64);
  xfer += prot_->serializedFieldSize("field65", apache::thrift::protocol::T_I32, 65);
  xfer += prot_->serializedSizeI32(this->field65);
  xfer += prot_->serializedFieldSize("field66", apache::thrift::protocol::T_LIST, 66);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field66);
  xfer += prot_->serializedFieldSize("field67", apache::thrift::protocol::T_BOOL, 67);
  xfer += prot_->serializedSizeBool(this->field67);
  xfer += prot_->serializedFieldSize("field68", apache::thrift::protocol::T_BOOL, 68);
  xfer += prot_->serializedSizeBool(this->field68);
  xfer += prot_->serializedFieldSize("field69", apache::thrift::protocol::T_STRUCT, 69);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSizeZC(prot_, &this->field69);
  xfer += prot_->serializedFieldSize("field70", apache::thrift::protocol::T_BYTE, 70);
  xfer += prot_->serializedSizeByte(this->field70);
  xfer += prot_->serializedFieldSize("field71", apache::thrift::protocol::T_I32, 71);
  xfer += prot_->serializedSizeI32(this->field71);
  xfer += prot_->serializedFieldSize("field72", apache::thrift::protocol::T_STRUCT, 72);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::serializedSizeZC(prot_, &this->field72);
  xfer += prot_->serializedFieldSize("field73", apache::thrift::protocol::T_I16, 73);
  xfer += prot_->serializedSizeI16(this->field73);
  xfer += prot_->serializedFieldSize("field74", apache::thrift::protocol::T_DOUBLE, 74);
  xfer += prot_->serializedSizeDouble(this->field74);
  xfer += prot_->serializedFieldSize("field75", apache::thrift::protocol::T_I64, 75);
  xfer += prot_->serializedSizeI64(this->field75);
  xfer += prot_->serializedFieldSize("field76", apache::thrift::protocol::T_LIST, 76);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field76);
  xfer += prot_->serializedFieldSize("field77", apache::thrift::protocol::T_LIST, 77);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field77);
  xfer += prot_->serializedFieldSize("field78", apache::thrift::protocol::T_LIST, 78);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field78);
  xfer += prot_->serializedFieldSize("field79", apache::thrift::protocol::T_BYTE, 79);
  xfer += prot_->serializedSizeByte(this->field79);
  xfer += prot_->serializedFieldSize("field80", apache::thrift::protocol::T_STRUCT, 80);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSizeZC(prot_, &this->field80);
  xfer += prot_->serializedFieldSize("field81", apache::thrift::protocol::T_BYTE, 81);
  xfer += prot_->serializedSizeByte(this->field81);
  xfer += prot_->serializedFieldSize("field82", apache::thrift::protocol::T_STRING, 82);
  xfer += prot_->serializedSizeString(this->field82);
  xfer += prot_->serializedFieldSize("field83", apache::thrift::protocol::T_LIST, 83);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>>, std::vector<std::map<std::map<float, bool>, int8_t>>>::serializedSize<false>(*prot_, this->field83);
  xfer += prot_->serializedFieldSize("field84", apache::thrift::protocol::T_FLOAT, 84);
  xfer += prot_->serializedSizeFloat(this->field84);
  xfer += prot_->serializedFieldSize("field85", apache::thrift::protocol::T_STRING, 85);
  xfer += prot_->serializedSizeZCBinary(this->field85);
  xfer += prot_->serializedFieldSize("field86", apache::thrift::protocol::T_I32, 86);
  xfer += prot_->serializedSizeI32(this->field86);
  xfer += prot_->serializedFieldSize("field87", apache::thrift::protocol::T_I16, 87);
  xfer += prot_->serializedSizeI16(this->field87);
  xfer += prot_->serializedFieldSize("field88", apache::thrift::protocol::T_SET, 88);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::serializedSize<false>(*prot_, this->field88);
  xfer += prot_->serializedFieldSize("field89", apache::thrift::protocol::T_BOOL, 89);
  xfer += prot_->serializedSizeBool(this->field89);
  xfer += prot_->serializedFieldSize("field90", apache::thrift::protocol::T_BOOL, 90);
  xfer += prot_->serializedSizeBool(this->field90);
  xfer += prot_->serializedFieldSize("field91", apache::thrift::protocol::T_LIST, 91);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>>, std::vector<std::vector<std::vector<int64_t>>>>::serializedSize<false>(*prot_, this->field91);
  xfer += prot_->serializedFieldSize("field92", apache::thrift::protocol::T_STRING, 92);
  xfer += prot_->serializedSizeZCBinary(this->field92);
  xfer += prot_->serializedFieldSize("field93", apache::thrift::protocol::T_SET, 93);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int64_t>>>::serializedSize<false>(*prot_, this->field93);
  xfer += prot_->serializedFieldSize("field94", apache::thrift::protocol::T_DOUBLE, 94);
  xfer += prot_->serializedSizeDouble(this->field94);
  xfer += prot_->serializedFieldSize("field95", apache::thrift::protocol::T_STRING, 95);
  xfer += prot_->serializedSizeString(this->field95);
  xfer += prot_->serializedFieldSize("field96", apache::thrift::protocol::T_BOOL, 96);
  xfer += prot_->serializedSizeBool(this->field96);
  xfer += prot_->serializedFieldSize("field97", apache::thrift::protocol::T_STRING, 97);
  xfer += prot_->serializedSizeString(this->field97);
  xfer += prot_->serializedFieldSize("field98", apache::thrift::protocol::T_STRING, 98);
  xfer += prot_->serializedSizeZCBinary(this->field98);
  xfer += prot_->serializedFieldSize("field99", apache::thrift::protocol::T_STRING, 99);
  xfer += prot_->serializedSizeZCBinary(this->field99);
  xfer += prot_->serializedFieldSize("field100", apache::thrift::protocol::T_STRUCT, 100);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct13>::serializedSizeZC(prot_, &this->field100);
  xfer += prot_->serializedFieldSize("field101", apache::thrift::protocol::T_BOOL, 101);
  xfer += prot_->serializedSizeBool(this->field101);
  xfer += prot_->serializedFieldSize("field102", apache::thrift::protocol::T_FLOAT, 102);
  xfer += prot_->serializedSizeFloat(this->field102);
  xfer += prot_->serializedFieldSize("field103", apache::thrift::protocol::T_I16, 103);
  xfer += prot_->serializedSizeI16(this->field103);
  xfer += prot_->serializedFieldSize("field104", apache::thrift::protocol::T_I32, 104);
  xfer += prot_->serializedSizeI32(this->field104);
  xfer += prot_->serializedFieldSize("field105", apache::thrift::protocol::T_I32, 105);
  xfer += prot_->serializedSizeI32(this->field105);
  xfer += prot_->serializedFieldSize("field106", apache::thrift::protocol::T_SET, 106);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field106);
  xfer += prot_->serializedFieldSize("field107", apache::thrift::protocol::T_STRUCT, 107);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::serializedSizeZC(prot_, &this->field107);
  xfer += prot_->serializedFieldSize("field108", apache::thrift::protocol::T_MAP, 108);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<int64_t, std::vector<bool>>>::serializedSize<false>(*prot_, this->field108);
  xfer += prot_->serializedFieldSize("field109", apache::thrift::protocol::T_BOOL, 109);
  xfer += prot_->serializedSizeBool(this->field109);
  xfer += prot_->serializedFieldSize("field110", apache::thrift::protocol::T_I16, 110);
  xfer += prot_->serializedSizeI16(this->field110);
  xfer += prot_->serializedFieldSize("field111", apache::thrift::protocol::T_LIST, 111);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field111);
  xfer += prot_->serializedFieldSize("field112", apache::thrift::protocol::T_FLOAT, 112);
  xfer += prot_->serializedSizeFloat(this->field112);
  xfer += prot_->serializedFieldSize("field113", apache::thrift::protocol::T_I32, 113);
  xfer += prot_->serializedSizeI32(this->field113);
  xfer += prot_->serializedFieldSize("field114", apache::thrift::protocol::T_STRUCT, 114);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::serializedSizeZC(prot_, &this->field114);
  xfer += prot_->serializedFieldSize("field115", apache::thrift::protocol::T_STRUCT, 115);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::serializedSizeZC(prot_, &this->field115);
  xfer += prot_->serializedFieldSize("field116", apache::thrift::protocol::T_I64, 116);
  xfer += prot_->serializedSizeI64(this->field116);
  xfer += prot_->serializedFieldSize("field117", apache::thrift::protocol::T_SET, 117);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field117);
  xfer += prot_->serializedFieldSize("field118", apache::thrift::protocol::T_BYTE, 118);
  xfer += prot_->serializedSizeByte(this->field118);
  xfer += prot_->serializedFieldSize("field119", apache::thrift::protocol::T_LIST, 119);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field119);
  xfer += prot_->serializedFieldSize("field120", apache::thrift::protocol::T_STRUCT, 120);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSizeZC(prot_, &this->field120);
  xfer += prot_->serializedFieldSize("field121", apache::thrift::protocol::T_STRUCT, 121);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct14>::serializedSizeZC(prot_, &this->field121);
  xfer += prot_->serializedFieldSize("field122", apache::thrift::protocol::T_I64, 122);
  xfer += prot_->serializedSizeI64(this->field122);
  xfer += prot_->serializedFieldSize("field123", apache::thrift::protocol::T_MAP, 123);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int32_t, std::string>>::serializedSize<false>(*prot_, this->field123);
  xfer += prot_->serializedFieldSize("field124", apache::thrift::protocol::T_I64, 124);
  xfer += prot_->serializedSizeI64(this->field124);
  xfer += prot_->serializedFieldSize("field125", apache::thrift::protocol::T_STRING, 125);
  xfer += prot_->serializedSizeZCBinary(this->field125);
  xfer += prot_->serializedFieldSize("field126", apache::thrift::protocol::T_LIST, 126);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::serializedSize<false>(*prot_, this->field126);
  xfer += prot_->serializedFieldSize("field127", apache::thrift::protocol::T_FLOAT, 127);
  xfer += prot_->serializedSizeFloat(this->field127);
  xfer += prot_->serializedFieldSize("field128", apache::thrift::protocol::T_SET, 128);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field128);
  xfer += prot_->serializedFieldSize("field129", apache::thrift::protocol::T_I16, 129);
  xfer += prot_->serializedSizeI16(this->field129);
  xfer += prot_->serializedFieldSize("field130", apache::thrift::protocol::T_SET, 130);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field130);
  xfer += prot_->serializedFieldSize("field131", apache::thrift::protocol::T_LIST, 131);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::serializedSize<false>(*prot_, this->field131);
  xfer += prot_->serializedFieldSize("field132", apache::thrift::protocol::T_MAP, 132);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, ::apache::thrift::type_class::floating_point>, std::map<std::set<std::string>, float>>::serializedSize<false>(*prot_, this->field132);
  xfer += prot_->serializedFieldSize("field133", apache::thrift::protocol::T_LIST, 133);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, ::apache::thrift::type_class::integral>>, std::vector<std::map<std::vector<std::vector<float>>, int32_t>>>::serializedSize<false>(*prot_, this->field133);
  xfer += prot_->serializedFieldSize("field134", apache::thrift::protocol::T_LIST, 134);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field134);
  xfer += prot_->serializedFieldSize("field135", apache::thrift::protocol::T_MAP, 135);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::floating_point>, std::map< ::cpp2::Struct13, double>>::serializedSize<false>(*prot_, this->field135);
  xfer += prot_->serializedFieldSize("field136", apache::thrift::protocol::T_FLOAT, 136);
  xfer += prot_->serializedSizeFloat(this->field136);
  xfer += prot_->serializedFieldSize("field137", apache::thrift::protocol::T_MAP, 137);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int8_t, float>>::serializedSize<false>(*prot_, this->field137);
  xfer += prot_->serializedFieldSize("field138", apache::thrift::protocol::T_MAP, 138);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::structure>, std::map<double,  ::cpp2::Struct7>>::serializedSize<false>(*prot_, this->field138);
  xfer += prot_->serializedFieldSize("field139", apache::thrift::protocol::T_LIST, 139);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>, std::vector<std::set<std::string>>>::serializedSize<false>(*prot_, this->field139);
  xfer += prot_->serializedFieldSize("field140", apache::thrift::protocol::T_MAP, 140);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::string>, std::map<std::set<double>, std::string>>::serializedSize<false>(*prot_, this->field140);
  xfer += prot_->serializedFieldSize("field141", apache::thrift::protocol::T_STRUCT, 141);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::serializedSizeZC(prot_, &this->field141);
  xfer += prot_->serializedFieldSize("field142", apache::thrift::protocol::T_I16, 142);
  xfer += prot_->serializedSizeI16(this->field142);
  xfer += prot_->serializedFieldSize("field143", apache::thrift::protocol::T_STRING, 143);
  xfer += prot_->serializedSizeString(this->field143);
  xfer += prot_->serializedFieldSize("field144", apache::thrift::protocol::T_SET, 144);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field144);
  xfer += prot_->serializedFieldSize("field145", apache::thrift::protocol::T_DOUBLE, 145);
  xfer += prot_->serializedSizeDouble(this->field145);
  xfer += prot_->serializedFieldSize("field146", apache::thrift::protocol::T_STRUCT, 146);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct17>::serializedSizeZC(prot_, &this->field146);
  xfer += prot_->serializedFieldSize("field147", apache::thrift::protocol::T_STRING, 147);
  xfer += prot_->serializedSizeZCBinary(this->field147);
  xfer += prot_->serializedFieldSize("field148", apache::thrift::protocol::T_FLOAT, 148);
  xfer += prot_->serializedSizeFloat(this->field148);
  xfer += prot_->serializedFieldSize("field149", apache::thrift::protocol::T_FLOAT, 149);
  xfer += prot_->serializedSizeFloat(this->field149);
  xfer += prot_->serializedFieldSize("field150", apache::thrift::protocol::T_SET, 150);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field150);
  xfer += prot_->serializedFieldSize("field151", apache::thrift::protocol::T_STRUCT, 151);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct18>::serializedSizeZC(prot_, &this->field151);
  xfer += prot_->serializedFieldSize("field152", apache::thrift::protocol::T_BYTE, 152);
  xfer += prot_->serializedSizeByte(this->field152);
  xfer += prot_->serializedFieldSize("field153", apache::thrift::protocol::T_STRING, 153);
  xfer += prot_->serializedSizeZCBinary(this->field153);
  xfer += prot_->serializedFieldSize("field154", apache::thrift::protocol::T_DOUBLE, 154);
  xfer += prot_->serializedSizeDouble(this->field154);
  xfer += prot_->serializedFieldSize("field155", apache::thrift::protocol::T_LIST, 155);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field155);
  xfer += prot_->serializedFieldSize("field156", apache::thrift::protocol::T_STRUCT, 156);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::serializedSizeZC(prot_, &this->field156);
  xfer += prot_->serializedFieldSize("field157", apache::thrift::protocol::T_I32, 157);
  xfer += prot_->serializedSizeI32(this->field157);
  xfer += prot_->serializedFieldSize("field158", apache::thrift::protocol::T_MAP, 158);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int16_t>>::serializedSize<false>(*prot_, this->field158);
  xfer += prot_->serializedFieldSize("field159", apache::thrift::protocol::T_STRUCT, 159);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::serializedSizeZC(prot_, &this->field159);
  xfer += prot_->serializedFieldSize("field160", apache::thrift::protocol::T_STRING, 160);
  xfer += prot_->serializedSizeString(this->field160);
  xfer += prot_->serializedFieldSize("field161", apache::thrift::protocol::T_BYTE, 161);
  xfer += prot_->serializedSizeByte(this->field161);
  xfer += prot_->serializedFieldSize("field162", apache::thrift::protocol::T_I32, 162);
  xfer += prot_->serializedSizeI32(this->field162);
  xfer += prot_->serializedFieldSize("field163", apache::thrift::protocol::T_SET, 163);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field163);
  xfer += prot_->serializedFieldSize("field164", apache::thrift::protocol::T_LIST, 164);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::vector<std::map<int64_t, int32_t>>>::serializedSize<false>(*prot_, this->field164);
  xfer += prot_->serializedFieldSize("field165", apache::thrift::protocol::T_LIST, 165);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::serializedSize<false>(*prot_, this->field165);
  xfer += prot_->serializedFieldSize("field166", apache::thrift::protocol::T_STRING, 166);
  xfer += prot_->serializedSizeString(this->field166);
  xfer += prot_->serializedFieldSize("field167", apache::thrift::protocol::T_DOUBLE, 167);
  xfer += prot_->serializedSizeDouble(this->field167);
  xfer += prot_->serializedFieldSize("field168", apache::thrift::protocol::T_MAP, 168);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::string>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->field168);
  xfer += prot_->serializedFieldSize("field169", apache::thrift::protocol::T_MAP, 169);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int8_t>>::serializedSize<false>(*prot_, this->field169);
  xfer += prot_->serializedFieldSize("field170", apache::thrift::protocol::T_DOUBLE, 170);
  xfer += prot_->serializedSizeDouble(this->field170);
  xfer += prot_->serializedFieldSize("field171", apache::thrift::protocol::T_MAP, 171);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::serializedSize<false>(*prot_, this->field171);
  xfer += prot_->serializedFieldSize("field172", apache::thrift::protocol::T_MAP, 172);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::floating_point>, std::map< ::cpp2::Struct3, float>>::serializedSize<false>(*prot_, this->field172);
  xfer += prot_->serializedFieldSize("field173", apache::thrift::protocol::T_STRING, 173);
  xfer += prot_->serializedSizeString(this->field173);
  xfer += prot_->serializedFieldSize("field174", apache::thrift::protocol::T_I16, 174);
  xfer += prot_->serializedSizeI16(this->field174);
  xfer += prot_->serializedFieldSize("field175", apache::thrift::protocol::T_I64, 175);
  xfer += prot_->serializedSizeI64(this->field175);
  xfer += prot_->serializedFieldSize("field176", apache::thrift::protocol::T_STRING, 176);
  xfer += prot_->serializedSizeString(this->field176);
  xfer += prot_->serializedFieldSize("field177", apache::thrift::protocol::T_MAP, 177);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int16_t>>::serializedSize<false>(*prot_, this->field177);
  xfer += prot_->serializedFieldSize("field178", apache::thrift::protocol::T_STRUCT, 178);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::serializedSizeZC(prot_, &this->field178);
  xfer += prot_->serializedFieldSize("field179", apache::thrift::protocol::T_MAP, 179);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<int64_t, std::set<int64_t>>>::serializedSize<false>(*prot_, this->field179);
  xfer += prot_->serializedFieldSize("field180", apache::thrift::protocol::T_MAP, 180);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>, std::map<double, std::string>>::serializedSize<false>(*prot_, this->field180);
  xfer += prot_->serializedFieldSize("field181", apache::thrift::protocol::T_I32, 181);
  xfer += prot_->serializedSizeI32(this->field181);
  xfer += prot_->serializedFieldSize("field182", apache::thrift::protocol::T_STRUCT, 182);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct21>::serializedSizeZC(prot_, &this->field182);
  xfer += prot_->serializedFieldSize("field183", apache::thrift::protocol::T_STRING, 183);
  xfer += prot_->serializedSizeZCBinary(this->field183);
  xfer += prot_->serializedFieldSize("field184", apache::thrift::protocol::T_SET, 184);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::serializedSize<false>(*prot_, this->field184);
  xfer += prot_->serializedFieldSize("field185", apache::thrift::protocol::T_BYTE, 185);
  xfer += prot_->serializedSizeByte(this->field185);
  xfer += prot_->serializedFieldSize("field186", apache::thrift::protocol::T_FLOAT, 186);
  xfer += prot_->serializedSizeFloat(this->field186);
  xfer += prot_->serializedFieldSize("field187", apache::thrift::protocol::T_I16, 187);
  xfer += prot_->serializedSizeI16(this->field187);
  xfer += prot_->serializedFieldSize("field188", apache::thrift::protocol::T_SET, 188);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<double>>>::serializedSize<false>(*prot_, this->field188);
  xfer += prot_->serializedFieldSize("field189", apache::thrift::protocol::T_STRING, 189);
  xfer += prot_->serializedSizeString(this->field189);
  xfer += prot_->serializedFieldSize("field190", apache::thrift::protocol::T_SET, 190);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::serializedSize<false>(*prot_, this->field190);
  xfer += prot_->serializedFieldSize("field191", apache::thrift::protocol::T_SET, 191);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::serializedSize<false>(*prot_, this->field191);
  xfer += prot_->serializedFieldSize("field192", apache::thrift::protocol::T_FLOAT, 192);
  xfer += prot_->serializedSizeFloat(this->field192);
  xfer += prot_->serializedFieldSize("field193", apache::thrift::protocol::T_STRING, 193);
  xfer += prot_->serializedSizeString(this->field193);
  xfer += prot_->serializedFieldSize("field194", apache::thrift::protocol::T_FLOAT, 194);
  xfer += prot_->serializedSizeFloat(this->field194);
  xfer += prot_->serializedFieldSize("field195", apache::thrift::protocol::T_MAP, 195);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int8_t>>::serializedSize<false>(*prot_, this->field195);
  xfer += prot_->serializedFieldSize("field196", apache::thrift::protocol::T_STRUCT, 196);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::serializedSizeZC(prot_, &this->field196);
  xfer += prot_->serializedFieldSize("field197", apache::thrift::protocol::T_BOOL, 197);
  xfer += prot_->serializedSizeBool(this->field197);
  xfer += prot_->serializedFieldSize("field198", apache::thrift::protocol::T_MAP, 198);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int32_t>>::serializedSize<false>(*prot_, this->field198);
  xfer += prot_->serializedFieldSize("field199", apache::thrift::protocol::T_SET, 199);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::serializedSize<false>(*prot_, this->field199);
  xfer += prot_->serializedFieldSize("field200", apache::thrift::protocol::T_STRUCT, 200);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct18>::serializedSizeZC(prot_, &this->field200);
  xfer += prot_->serializedFieldSize("field201", apache::thrift::protocol::T_I32, 201);
  xfer += prot_->serializedSizeI32(this->field201);
  xfer += prot_->serializedFieldSize("field202", apache::thrift::protocol::T_BYTE, 202);
  xfer += prot_->serializedSizeByte(this->field202);
  xfer += prot_->serializedFieldSize("field203", apache::thrift::protocol::T_STRUCT, 203);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct16>::serializedSizeZC(prot_, &this->field203);
  xfer += prot_->serializedFieldSize("field204", apache::thrift::protocol::T_MAP, 204);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::string>, std::map<std::vector<bool>, std::string>>::serializedSize<false>(*prot_, this->field204);
  xfer += prot_->serializedFieldSize("field205", apache::thrift::protocol::T_I32, 205);
  xfer += prot_->serializedSizeI32(this->field205);
  xfer += prot_->serializedFieldSize("field206", apache::thrift::protocol::T_LIST, 206);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field206);
  xfer += prot_->serializedFieldSize("field207", apache::thrift::protocol::T_BOOL, 207);
  xfer += prot_->serializedSizeBool(this->field207);
  xfer += prot_->serializedFieldSize("field208", apache::thrift::protocol::T_MAP, 208);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int32_t>>::serializedSize<false>(*prot_, this->field208);
  xfer += prot_->serializedFieldSize("field209", apache::thrift::protocol::T_FLOAT, 209);
  xfer += prot_->serializedSizeFloat(this->field209);
  xfer += prot_->serializedFieldSize("field210", apache::thrift::protocol::T_LIST, 210);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::serializedSize<false>(*prot_, this->field210);
  xfer += prot_->serializedFieldSize("field211", apache::thrift::protocol::T_FLOAT, 211);
  xfer += prot_->serializedSizeFloat(this->field211);
  xfer += prot_->serializedFieldSize("field212", apache::thrift::protocol::T_STRING, 212);
  xfer += prot_->serializedSizeZCBinary(this->field212);
  xfer += prot_->serializedFieldSize("field213", apache::thrift::protocol::T_SET, 213);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::serializedSize<false>(*prot_, this->field213);
  xfer += prot_->serializedFieldSize("field214", apache::thrift::protocol::T_LIST, 214);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::serializedSize<false>(*prot_, this->field214);
  xfer += prot_->serializedFieldSize("field215", apache::thrift::protocol::T_MAP, 215);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::structure>, std::map<std::string,  ::cpp2::Struct5>>::serializedSize<false>(*prot_, this->field215);
  xfer += prot_->serializedFieldSize("field216", apache::thrift::protocol::T_I64, 216);
  xfer += prot_->serializedSizeI64(this->field216);
  xfer += prot_->serializedFieldSize("field217", apache::thrift::protocol::T_MAP, 217);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int64_t, double>>::serializedSize<false>(*prot_, this->field217);
  xfer += prot_->serializedFieldSize("field218", apache::thrift::protocol::T_I64, 218);
  xfer += prot_->serializedSizeI64(this->field218);
  xfer += prot_->serializedFieldSize("field219", apache::thrift::protocol::T_STRING, 219);
  xfer += prot_->serializedSizeString(this->field219);
  xfer += prot_->serializedFieldSize("field220", apache::thrift::protocol::T_SET, 220);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::serializedSize<false>(*prot_, this->field220);
  xfer += prot_->serializedFieldSize("field221", apache::thrift::protocol::T_MAP, 221);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<std::vector<std::vector<std::string>>, std::vector<float>>>::serializedSize<false>(*prot_, this->field221);
  xfer += prot_->serializedFieldSize("field222", apache::thrift::protocol::T_DOUBLE, 222);
  xfer += prot_->serializedSizeDouble(this->field222);
  xfer += prot_->serializedFieldSize("field223", apache::thrift::protocol::T_LIST, 223);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::serializedSize<false>(*prot_, this->field223);
  xfer += prot_->serializedFieldSize("field224", apache::thrift::protocol::T_SET, 224);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::serializedSize<false>(*prot_, this->field224);
  xfer += prot_->serializedFieldSize("field225", apache::thrift::protocol::T_MAP, 225);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, bool>>::serializedSize<false>(*prot_, this->field225);
  xfer += prot_->serializedFieldSize("field226", apache::thrift::protocol::T_I64, 226);
  xfer += prot_->serializedSizeI64(this->field226);
  xfer += prot_->serializedFieldSize("field227", apache::thrift::protocol::T_STRING, 227);
  xfer += prot_->serializedSizeString(this->field227);
  xfer += prot_->serializedFieldSize("field228", apache::thrift::protocol::T_LIST, 228);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::serializedSize<false>(*prot_, this->field228);
  xfer += prot_->serializedFieldSize("field229", apache::thrift::protocol::T_I64, 229);
  xfer += prot_->serializedSizeI64(this->field229);
  xfer += prot_->serializedFieldSize("field230", apache::thrift::protocol::T_BYTE, 230);
  xfer += prot_->serializedSizeByte(this->field230);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t Struct27::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("Struct27");
  xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRUCT, 1);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::write(prot_, &this->field1);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_FLOAT, 2);
  xfer += prot_->writeFloat(this->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_SET, 3);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->writeBinary(this->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_MAP, 5);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<int8_t, std::string>>::write(*prot_, this->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field6", apache::thrift::protocol::T_LIST, 6);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field6);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field7", apache::thrift::protocol::T_I64, 7);
  xfer += prot_->writeI64(this->field7);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field8", apache::thrift::protocol::T_SET, 8);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field8);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field9", apache::thrift::protocol::T_SET, 9);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::structure>, std::set< ::cpp2::Struct1>>::write(*prot_, this->field9);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field10", apache::thrift::protocol::T_SET, 10);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field10);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field11", apache::thrift::protocol::T_I64, 11);
  xfer += prot_->writeI64(this->field11);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field12", apache::thrift::protocol::T_SET, 12);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<float>>>::write(*prot_, this->field12);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field13", apache::thrift::protocol::T_MAP, 13);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::binary>, std::map<bool, std::string>>::write(*prot_, this->field13);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field14", apache::thrift::protocol::T_BOOL, 14);
  xfer += prot_->writeBool(this->field14);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field15", apache::thrift::protocol::T_FLOAT, 15);
  xfer += prot_->writeFloat(this->field15);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field16", apache::thrift::protocol::T_BOOL, 16);
  xfer += prot_->writeBool(this->field16);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field17", apache::thrift::protocol::T_STRUCT, 17);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field17);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field18", apache::thrift::protocol::T_STRUCT, 18);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::write(prot_, &this->field18);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field19", apache::thrift::protocol::T_SET, 19);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field19);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field20", apache::thrift::protocol::T_I16, 20);
  xfer += prot_->writeI16(this->field20);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field21", apache::thrift::protocol::T_SET, 21);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field21);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field22", apache::thrift::protocol::T_STRING, 22);
  xfer += prot_->writeString(this->field22);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field23", apache::thrift::protocol::T_BYTE, 23);
  xfer += prot_->writeByte(this->field23);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field24", apache::thrift::protocol::T_MAP, 24);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int16_t, float>>::write(*prot_, this->field24);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field25", apache::thrift::protocol::T_STRUCT, 25);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field25);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field26", apache::thrift::protocol::T_MAP, 26);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::string, ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>>>, std::map<std::string, std::map<std::string, std::map<int32_t, float>>>>::write(*prot_, this->field26);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field27", apache::thrift::protocol::T_SET, 27);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field27);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field28", apache::thrift::protocol::T_FLOAT, 28);
  xfer += prot_->writeFloat(this->field28);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field29", apache::thrift::protocol::T_LIST, 29);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field29);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field30", apache::thrift::protocol::T_I32, 30);
  xfer += prot_->writeI32(this->field30);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field31", apache::thrift::protocol::T_LIST, 31);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field31);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field32", apache::thrift::protocol::T_I64, 32);
  xfer += prot_->writeI64(this->field32);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field33", apache::thrift::protocol::T_STRUCT, 33);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::write(prot_, &this->field33);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field34", apache::thrift::protocol::T_SET, 34);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field34);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field35", apache::thrift::protocol::T_STRUCT, 35);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct15>::write(prot_, &this->field35);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field36", apache::thrift::protocol::T_BYTE, 36);
  xfer += prot_->writeByte(this->field36);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field37", apache::thrift::protocol::T_I64, 37);
  xfer += prot_->writeI64(this->field37);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field38", apache::thrift::protocol::T_BOOL, 38);
  xfer += prot_->writeBool(this->field38);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field39", apache::thrift::protocol::T_MAP, 39);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>, std::map<std::map<std::vector<float>, int8_t>, int32_t>>::write(*prot_, this->field39);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field40", apache::thrift::protocol::T_LIST, 40);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field40);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field41", apache::thrift::protocol::T_STRUCT, 41);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::write(prot_, &this->field41);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field42", apache::thrift::protocol::T_DOUBLE, 42);
  xfer += prot_->writeDouble(this->field42);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field43", apache::thrift::protocol::T_STRUCT, 43);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::write(prot_, &this->field43);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field44", apache::thrift::protocol::T_STRING, 44);
  xfer += prot_->writeString(this->field44);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field45", apache::thrift::protocol::T_I16, 45);
  xfer += prot_->writeI16(this->field45);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field46", apache::thrift::protocol::T_I32, 46);
  xfer += prot_->writeI32(this->field46);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field47", apache::thrift::protocol::T_MAP, 47);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::binary>, std::map<double, std::string>>::write(*prot_, this->field47);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field48", apache::thrift::protocol::T_BYTE, 48);
  xfer += prot_->writeByte(this->field48);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field49", apache::thrift::protocol::T_STRUCT, 49);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::write(prot_, &this->field49);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field50", apache::thrift::protocol::T_STRUCT, 50);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct19>::write(prot_, &this->field50);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field51", apache::thrift::protocol::T_STRING, 51);
  xfer += prot_->writeBinary(this->field51);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field52", apache::thrift::protocol::T_STRUCT, 52);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct16>::write(prot_, &this->field52);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field53", apache::thrift::protocol::T_SET, 53);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field53);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field54", apache::thrift::protocol::T_SET, 54);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::list<::apache::thrift::type_class::string>>, std::set<std::vector<std::string>>>::write(*prot_, this->field54);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field55", apache::thrift::protocol::T_DOUBLE, 55);
  xfer += prot_->writeDouble(this->field55);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field56", apache::thrift::protocol::T_BOOL, 56);
  xfer += prot_->writeBool(this->field56);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field57", apache::thrift::protocol::T_LIST, 57);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field57);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field58", apache::thrift::protocol::T_SET, 58);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field58);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field59", apache::thrift::protocol::T_MAP, 59);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::binary>, ::apache::thrift::type_class::floating_point>, std::map<std::map<std::map<int32_t, int64_t>, std::string>, float>>::write(*prot_, this->field59);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field60", apache::thrift::protocol::T_STRUCT, 60);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field60);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field61", apache::thrift::protocol::T_FLOAT, 61);
  xfer += prot_->writeFloat(this->field61);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field62", apache::thrift::protocol::T_STRUCT, 62);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct16>::write(prot_, &this->field62);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field63", apache::thrift::protocol::T_SET, 63);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field63);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field64", apache::thrift::protocol::T_I64, 64);
  xfer += prot_->writeI64(this->field64);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field65", apache::thrift::protocol::T_I32, 65);
  xfer += prot_->writeI32(this->field65);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field66", apache::thrift::protocol::T_LIST, 66);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field66);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field67", apache::thrift::protocol::T_BOOL, 67);
  xfer += prot_->writeBool(this->field67);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field68", apache::thrift::protocol::T_BOOL, 68);
  xfer += prot_->writeBool(this->field68);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field69", apache::thrift::protocol::T_STRUCT, 69);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::write(prot_, &this->field69);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field70", apache::thrift::protocol::T_BYTE, 70);
  xfer += prot_->writeByte(this->field70);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field71", apache::thrift::protocol::T_I32, 71);
  xfer += prot_->writeI32(this->field71);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field72", apache::thrift::protocol::T_STRUCT, 72);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::write(prot_, &this->field72);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field73", apache::thrift::protocol::T_I16, 73);
  xfer += prot_->writeI16(this->field73);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field74", apache::thrift::protocol::T_DOUBLE, 74);
  xfer += prot_->writeDouble(this->field74);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field75", apache::thrift::protocol::T_I64, 75);
  xfer += prot_->writeI64(this->field75);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field76", apache::thrift::protocol::T_LIST, 76);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field76);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field77", apache::thrift::protocol::T_LIST, 77);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field77);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field78", apache::thrift::protocol::T_LIST, 78);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field78);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field79", apache::thrift::protocol::T_BYTE, 79);
  xfer += prot_->writeByte(this->field79);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field80", apache::thrift::protocol::T_STRUCT, 80);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::write(prot_, &this->field80);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field81", apache::thrift::protocol::T_BYTE, 81);
  xfer += prot_->writeByte(this->field81);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field82", apache::thrift::protocol::T_STRING, 82);
  xfer += prot_->writeString(this->field82);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field83", apache::thrift::protocol::T_LIST, 83);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, ::apache::thrift::type_class::integral>>, std::vector<std::map<std::map<float, bool>, int8_t>>>::write(*prot_, this->field83);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field84", apache::thrift::protocol::T_FLOAT, 84);
  xfer += prot_->writeFloat(this->field84);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field85", apache::thrift::protocol::T_STRING, 85);
  xfer += prot_->writeBinary(this->field85);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field86", apache::thrift::protocol::T_I32, 86);
  xfer += prot_->writeI32(this->field86);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field87", apache::thrift::protocol::T_I16, 87);
  xfer += prot_->writeI16(this->field87);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field88", apache::thrift::protocol::T_SET, 88);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int64_t>>::write(*prot_, this->field88);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field89", apache::thrift::protocol::T_BOOL, 89);
  xfer += prot_->writeBool(this->field89);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field90", apache::thrift::protocol::T_BOOL, 90);
  xfer += prot_->writeBool(this->field90);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field91", apache::thrift::protocol::T_LIST, 91);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>>, std::vector<std::vector<std::vector<int64_t>>>>::write(*prot_, this->field91);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field92", apache::thrift::protocol::T_STRING, 92);
  xfer += prot_->writeBinary(this->field92);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field93", apache::thrift::protocol::T_SET, 93);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::set<std::set<int64_t>>>::write(*prot_, this->field93);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field94", apache::thrift::protocol::T_DOUBLE, 94);
  xfer += prot_->writeDouble(this->field94);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field95", apache::thrift::protocol::T_STRING, 95);
  xfer += prot_->writeString(this->field95);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field96", apache::thrift::protocol::T_BOOL, 96);
  xfer += prot_->writeBool(this->field96);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field97", apache::thrift::protocol::T_STRING, 97);
  xfer += prot_->writeString(this->field97);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field98", apache::thrift::protocol::T_STRING, 98);
  xfer += prot_->writeBinary(this->field98);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field99", apache::thrift::protocol::T_STRING, 99);
  xfer += prot_->writeBinary(this->field99);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field100", apache::thrift::protocol::T_STRUCT, 100);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct13>::write(prot_, &this->field100);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field101", apache::thrift::protocol::T_BOOL, 101);
  xfer += prot_->writeBool(this->field101);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field102", apache::thrift::protocol::T_FLOAT, 102);
  xfer += prot_->writeFloat(this->field102);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field103", apache::thrift::protocol::T_I16, 103);
  xfer += prot_->writeI16(this->field103);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field104", apache::thrift::protocol::T_I32, 104);
  xfer += prot_->writeI32(this->field104);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field105", apache::thrift::protocol::T_I32, 105);
  xfer += prot_->writeI32(this->field105);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field106", apache::thrift::protocol::T_SET, 106);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field106);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field107", apache::thrift::protocol::T_STRUCT, 107);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::write(prot_, &this->field107);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field108", apache::thrift::protocol::T_MAP, 108);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, std::map<int64_t, std::vector<bool>>>::write(*prot_, this->field108);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field109", apache::thrift::protocol::T_BOOL, 109);
  xfer += prot_->writeBool(this->field109);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field110", apache::thrift::protocol::T_I16, 110);
  xfer += prot_->writeI16(this->field110);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field111", apache::thrift::protocol::T_LIST, 111);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field111);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field112", apache::thrift::protocol::T_FLOAT, 112);
  xfer += prot_->writeFloat(this->field112);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field113", apache::thrift::protocol::T_I32, 113);
  xfer += prot_->writeI32(this->field113);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field114", apache::thrift::protocol::T_STRUCT, 114);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::write(prot_, &this->field114);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field115", apache::thrift::protocol::T_STRUCT, 115);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::write(prot_, &this->field115);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field116", apache::thrift::protocol::T_I64, 116);
  xfer += prot_->writeI64(this->field116);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field117", apache::thrift::protocol::T_SET, 117);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field117);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field118", apache::thrift::protocol::T_BYTE, 118);
  xfer += prot_->writeByte(this->field118);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field119", apache::thrift::protocol::T_LIST, 119);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field119);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field120", apache::thrift::protocol::T_STRUCT, 120);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::write(prot_, &this->field120);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field121", apache::thrift::protocol::T_STRUCT, 121);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct14>::write(prot_, &this->field121);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field122", apache::thrift::protocol::T_I64, 122);
  xfer += prot_->writeI64(this->field122);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field123", apache::thrift::protocol::T_MAP, 123);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::string>, std::map<int32_t, std::string>>::write(*prot_, this->field123);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field124", apache::thrift::protocol::T_I64, 124);
  xfer += prot_->writeI64(this->field124);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field125", apache::thrift::protocol::T_STRING, 125);
  xfer += prot_->writeBinary(this->field125);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field126", apache::thrift::protocol::T_LIST, 126);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<bool>>::write(*prot_, this->field126);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field127", apache::thrift::protocol::T_FLOAT, 127);
  xfer += prot_->writeFloat(this->field127);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field128", apache::thrift::protocol::T_SET, 128);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field128);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field129", apache::thrift::protocol::T_I16, 129);
  xfer += prot_->writeI16(this->field129);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field130", apache::thrift::protocol::T_SET, 130);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field130);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field131", apache::thrift::protocol::T_LIST, 131);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int16_t>>::write(*prot_, this->field131);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field132", apache::thrift::protocol::T_MAP, 132);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, ::apache::thrift::type_class::floating_point>, std::map<std::set<std::string>, float>>::write(*prot_, this->field132);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field133", apache::thrift::protocol::T_LIST, 133);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, ::apache::thrift::type_class::integral>>, std::vector<std::map<std::vector<std::vector<float>>, int32_t>>>::write(*prot_, this->field133);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field134", apache::thrift::protocol::T_LIST, 134);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->field134);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field135", apache::thrift::protocol::T_MAP, 135);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::floating_point>, std::map< ::cpp2::Struct13, double>>::write(*prot_, this->field135);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field136", apache::thrift::protocol::T_FLOAT, 136);
  xfer += prot_->writeFloat(this->field136);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field137", apache::thrift::protocol::T_MAP, 137);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int8_t, float>>::write(*prot_, this->field137);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field138", apache::thrift::protocol::T_MAP, 138);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::structure>, std::map<double,  ::cpp2::Struct7>>::write(*prot_, this->field138);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field139", apache::thrift::protocol::T_LIST, 139);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::set<::apache::thrift::type_class::binary>>, std::vector<std::set<std::string>>>::write(*prot_, this->field139);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field140", apache::thrift::protocol::T_MAP, 140);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, ::apache::thrift::type_class::string>, std::map<std::set<double>, std::string>>::write(*prot_, this->field140);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field141", apache::thrift::protocol::T_STRUCT, 141);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::write(prot_, &this->field141);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field142", apache::thrift::protocol::T_I16, 142);
  xfer += prot_->writeI16(this->field142);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field143", apache::thrift::protocol::T_STRING, 143);
  xfer += prot_->writeString(this->field143);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field144", apache::thrift::protocol::T_SET, 144);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field144);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field145", apache::thrift::protocol::T_DOUBLE, 145);
  xfer += prot_->writeDouble(this->field145);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field146", apache::thrift::protocol::T_STRUCT, 146);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct17>::write(prot_, &this->field146);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field147", apache::thrift::protocol::T_STRING, 147);
  xfer += prot_->writeBinary(this->field147);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field148", apache::thrift::protocol::T_FLOAT, 148);
  xfer += prot_->writeFloat(this->field148);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field149", apache::thrift::protocol::T_FLOAT, 149);
  xfer += prot_->writeFloat(this->field149);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field150", apache::thrift::protocol::T_SET, 150);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field150);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field151", apache::thrift::protocol::T_STRUCT, 151);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct18>::write(prot_, &this->field151);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field152", apache::thrift::protocol::T_BYTE, 152);
  xfer += prot_->writeByte(this->field152);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field153", apache::thrift::protocol::T_STRING, 153);
  xfer += prot_->writeBinary(this->field153);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field154", apache::thrift::protocol::T_DOUBLE, 154);
  xfer += prot_->writeDouble(this->field154);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field155", apache::thrift::protocol::T_LIST, 155);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field155);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field156", apache::thrift::protocol::T_STRUCT, 156);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::write(prot_, &this->field156);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field157", apache::thrift::protocol::T_I32, 157);
  xfer += prot_->writeI32(this->field157);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field158", apache::thrift::protocol::T_MAP, 158);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int16_t, int16_t>>::write(*prot_, this->field158);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field159", apache::thrift::protocol::T_STRUCT, 159);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct8>::write(prot_, &this->field159);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field160", apache::thrift::protocol::T_STRING, 160);
  xfer += prot_->writeString(this->field160);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field161", apache::thrift::protocol::T_BYTE, 161);
  xfer += prot_->writeByte(this->field161);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field162", apache::thrift::protocol::T_I32, 162);
  xfer += prot_->writeI32(this->field162);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field163", apache::thrift::protocol::T_SET, 163);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field163);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field164", apache::thrift::protocol::T_LIST, 164);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>>, std::vector<std::map<int64_t, int32_t>>>::write(*prot_, this->field164);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field165", apache::thrift::protocol::T_LIST, 165);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int64_t>>::write(*prot_, this->field165);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field166", apache::thrift::protocol::T_STRING, 166);
  xfer += prot_->writeString(this->field166);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field167", apache::thrift::protocol::T_DOUBLE, 167);
  xfer += prot_->writeDouble(this->field167);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field168", apache::thrift::protocol::T_MAP, 168);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::string>, std::map<std::string, std::string>>::write(*prot_, this->field168);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field169", apache::thrift::protocol::T_MAP, 169);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int8_t>>::write(*prot_, this->field169);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field170", apache::thrift::protocol::T_DOUBLE, 170);
  xfer += prot_->writeDouble(this->field170);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field171", apache::thrift::protocol::T_MAP, 171);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::binary>, std::map<std::string, std::string>>::write(*prot_, this->field171);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field172", apache::thrift::protocol::T_MAP, 172);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::structure, ::apache::thrift::type_class::floating_point>, std::map< ::cpp2::Struct3, float>>::write(*prot_, this->field172);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field173", apache::thrift::protocol::T_STRING, 173);
  xfer += prot_->writeString(this->field173);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field174", apache::thrift::protocol::T_I16, 174);
  xfer += prot_->writeI16(this->field174);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field175", apache::thrift::protocol::T_I64, 175);
  xfer += prot_->writeI64(this->field175);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field176", apache::thrift::protocol::T_STRING, 176);
  xfer += prot_->writeString(this->field176);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field177", apache::thrift::protocol::T_MAP, 177);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, int16_t>>::write(*prot_, this->field177);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field178", apache::thrift::protocol::T_STRUCT, 178);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::write(prot_, &this->field178);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field179", apache::thrift::protocol::T_MAP, 179);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>>, std::map<int64_t, std::set<int64_t>>>::write(*prot_, this->field179);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field180", apache::thrift::protocol::T_MAP, 180);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::string>, std::map<double, std::string>>::write(*prot_, this->field180);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field181", apache::thrift::protocol::T_I32, 181);
  xfer += prot_->writeI32(this->field181);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field182", apache::thrift::protocol::T_STRUCT, 182);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct21>::write(prot_, &this->field182);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field183", apache::thrift::protocol::T_STRING, 183);
  xfer += prot_->writeBinary(this->field183);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field184", apache::thrift::protocol::T_SET, 184);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::binary>, std::set<std::string>>::write(*prot_, this->field184);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field185", apache::thrift::protocol::T_BYTE, 185);
  xfer += prot_->writeByte(this->field185);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field186", apache::thrift::protocol::T_FLOAT, 186);
  xfer += prot_->writeFloat(this->field186);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field187", apache::thrift::protocol::T_I16, 187);
  xfer += prot_->writeI16(this->field187);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field188", apache::thrift::protocol::T_SET, 188);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>>, std::set<std::set<double>>>::write(*prot_, this->field188);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field189", apache::thrift::protocol::T_STRING, 189);
  xfer += prot_->writeString(this->field189);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field190", apache::thrift::protocol::T_SET, 190);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<double>>::write(*prot_, this->field190);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field191", apache::thrift::protocol::T_SET, 191);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<bool>>::write(*prot_, this->field191);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field192", apache::thrift::protocol::T_FLOAT, 192);
  xfer += prot_->writeFloat(this->field192);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field193", apache::thrift::protocol::T_STRING, 193);
  xfer += prot_->writeString(this->field193);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field194", apache::thrift::protocol::T_FLOAT, 194);
  xfer += prot_->writeFloat(this->field194);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field195", apache::thrift::protocol::T_MAP, 195);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int64_t, int8_t>>::write(*prot_, this->field195);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field196", apache::thrift::protocol::T_STRUCT, 196);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::write(prot_, &this->field196);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field197", apache::thrift::protocol::T_BOOL, 197);
  xfer += prot_->writeBool(this->field197);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field198", apache::thrift::protocol::T_MAP, 198);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<double, int32_t>>::write(*prot_, this->field198);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field199", apache::thrift::protocol::T_SET, 199);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int16_t>>::write(*prot_, this->field199);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field200", apache::thrift::protocol::T_STRUCT, 200);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct18>::write(prot_, &this->field200);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field201", apache::thrift::protocol::T_I32, 201);
  xfer += prot_->writeI32(this->field201);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field202", apache::thrift::protocol::T_BYTE, 202);
  xfer += prot_->writeByte(this->field202);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field203", apache::thrift::protocol::T_STRUCT, 203);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::Struct16>::write(prot_, &this->field203);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field204", apache::thrift::protocol::T_MAP, 204);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::apache::thrift::type_class::string>, std::map<std::vector<bool>, std::string>>::write(*prot_, this->field204);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field205", apache::thrift::protocol::T_I32, 205);
  xfer += prot_->writeI32(this->field205);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field206", apache::thrift::protocol::T_LIST, 206);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field206);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field207", apache::thrift::protocol::T_BOOL, 207);
  xfer += prot_->writeBool(this->field207);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field208", apache::thrift::protocol::T_MAP, 208);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::integral>, std::map<int8_t, int32_t>>::write(*prot_, this->field208);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field209", apache::thrift::protocol::T_FLOAT, 209);
  xfer += prot_->writeFloat(this->field209);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field210", apache::thrift::protocol::T_LIST, 210);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int32_t>>::write(*prot_, this->field210);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field211", apache::thrift::protocol::T_FLOAT, 211);
  xfer += prot_->writeFloat(this->field211);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field212", apache::thrift::protocol::T_STRING, 212);
  xfer += prot_->writeBinary(this->field212);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field213", apache::thrift::protocol::T_SET, 213);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::floating_point>, std::set<float>>::write(*prot_, this->field213);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field214", apache::thrift::protocol::T_LIST, 214);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::string>, std::vector<std::string>>::write(*prot_, this->field214);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field215", apache::thrift::protocol::T_MAP, 215);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::binary, ::apache::thrift::type_class::structure>, std::map<std::string,  ::cpp2::Struct5>>::write(*prot_, this->field215);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field216", apache::thrift::protocol::T_I64, 216);
  xfer += prot_->writeI64(this->field216);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field217", apache::thrift::protocol::T_MAP, 217);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::integral, ::apache::thrift::type_class::floating_point>, std::map<int64_t, double>>::write(*prot_, this->field217);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field218", apache::thrift::protocol::T_I64, 218);
  xfer += prot_->writeI64(this->field218);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field219", apache::thrift::protocol::T_STRING, 219);
  xfer += prot_->writeString(this->field219);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field220", apache::thrift::protocol::T_SET, 220);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::integral>, std::set<int8_t>>::write(*prot_, this->field220);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field221", apache::thrift::protocol::T_MAP, 221);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::binary>>, ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>>, std::map<std::vector<std::vector<std::string>>, std::vector<float>>>::write(*prot_, this->field221);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field222", apache::thrift::protocol::T_DOUBLE, 222);
  xfer += prot_->writeDouble(this->field222);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field223", apache::thrift::protocol::T_LIST, 223);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, std::vector<int8_t>>::write(*prot_, this->field223);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field224", apache::thrift::protocol::T_SET, 224);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::set<::apache::thrift::type_class::string>, std::set<std::string>>::write(*prot_, this->field224);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field225", apache::thrift::protocol::T_MAP, 225);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::map<::apache::thrift::type_class::floating_point, ::apache::thrift::type_class::integral>, std::map<float, bool>>::write(*prot_, this->field225);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field226", apache::thrift::protocol::T_I64, 226);
  xfer += prot_->writeI64(this->field226);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field227", apache::thrift::protocol::T_STRING, 227);
  xfer += prot_->writeString(this->field227);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field228", apache::thrift::protocol::T_LIST, 228);
  xfer += ::apache::thrift::detail::pm::protocol_methods< ::apache::thrift::type_class::list<::apache::thrift::type_class::floating_point>, std::vector<double>>::write(*prot_, this->field228);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field229", apache::thrift::protocol::T_I64, 229);
  xfer += prot_->writeI64(this->field229);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field230", apache::thrift::protocol::T_BYTE, 230);
  xfer += prot_->writeByte(this->field230);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
