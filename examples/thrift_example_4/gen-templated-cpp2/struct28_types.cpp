/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "struct28_types.h"
#include "struct28_types.tcc"

#include <algorithm>
#include <folly/Indestructible.h>

#include "file1_data.h"

namespace cpp2 {

void Struct28::__clear() {
  // clear all fields
  field1.clear();
  field2.clear();
  field3.clear();
  field4 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field5);
  field6 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field7.clear();
  field8 = 0;
  field9 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field10 = 0;
  field11.clear();
  field12 = 0;
  field13.clear();
  field14.clear();
  field15.clear();
  field16 = 0;
  field17 = 0;
  field18 = 0;
  field19 = 0;
  field20 = 0;
  field21.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct21>::clear(&field22);
  field23.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field24);
  field25 = 0;
  field26 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field27.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct0>::clear(&field28);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct2>::clear(&field29);
  field30.clear();
  field31 = 0;
  field32 = 0;
  field33 = 0;
  field34 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field35);
  field36 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::clear(&field37);
  field38 = 0;
  field39.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::clear(&field40);
  field41 = 0;
  field42 = 0;
  field43 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct10>::clear(&field44);
  field45.clear();
  field46 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct11>::clear(&field47);
  field48 = 0;
  field49.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct6>::clear(&field50);
  field51 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field52 = 0;
  field53 = 0;
  field54 = 0;
  field55.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct23>::clear(&field56);
  field57.clear();
  field58 = 0;
  field59.clear();
  field60 = 0;
  field61 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field62.clear();
  field63 = 0;
  field64 = 0;
  field65 = 0;
  field66 = 0;
  field67 = 0;
  field68 = 0;
  field69.clear();
  field70.clear();
  field71 = 0;
  field72.clear();
  field73.clear();
  field74 = 0;
  field75.clear();
  field76.clear();
  field77 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field78.clear();
  field79.clear();
  field80.clear();
  field81 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field82.clear();
  field83 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field84.clear();
  field85 = 0;
  field86 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field87 = 0;
  field88.clear();
  field89 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field90 = 0;
  field91 = 0;
  field92 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field93.clear();
  field94 = 0;
  field95 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field96 = 0;
  field97 = 0;
  field98 = 0;
  field99.clear();
  field100.clear();
  field101 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field102 = 0;
  field103 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct13>::clear(&field104);
  field105 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct5>::clear(&field106);
  field107.clear();
  field108 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field109 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct7>::clear(&field110);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct9>::clear(&field111);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::clear(&field112);
  field113.clear();
  field114 = 0;
  field115 = 0;
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::clear(&field116);
  field117.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct1>::clear(&field118);
  field119 = 0;
  field120 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct12>::clear(&field121);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct3>::clear(&field122);
  field123.clear();
  field124 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field125 = 0;
  field126 = 0;
  field127.clear();
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct25>::clear(&field128);
  ::apache::thrift::Cpp2Ops<  ::cpp2::Struct4>::clear(&field129);
  field130 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field131 = 0;
  field132.clear();
  field133 = 0;
  field134.clear();
  field135.clear();
  field136 = 0;
  field137 = 0;
  field138 = 0;
  field139.clear();
  field140 = 0;
  field141.clear();
  field142 = 0;
  field143 = 0;
  field144 = apache::thrift::StringTraits< std::string>::fromStringLiteral("");
  field145 = 0;
  field146.clear();
  field147 = 0;
  field148 = 0;
  field149 = 0;
  field150.clear();
  field151.clear();
  field152 = 0;
  field153.clear();
  field154 = 0;
  field155.clear();
  __isset.__clear();
}

bool Struct28::operator==(const Struct28& rhs) const {
  if (!((field1 == rhs.field1))) {
    return false;
  }
  if (!((field2 == rhs.field2))) {
    return false;
  }
  if (!((field3 == rhs.field3))) {
    return false;
  }
  if (!((field4 == rhs.field4))) {
    return false;
  }
  if (!((field5 == rhs.field5))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field6, rhs.field6))) {
    return false;
  }
  if (!((field7 == rhs.field7))) {
    return false;
  }
  if (!((field8 == rhs.field8))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field9, rhs.field9))) {
    return false;
  }
  if (!((field10 == rhs.field10))) {
    return false;
  }
  if (!((field11 == rhs.field11))) {
    return false;
  }
  if (!((field12 == rhs.field12))) {
    return false;
  }
  if (!((field13 == rhs.field13))) {
    return false;
  }
  if (!((field14 == rhs.field14))) {
    return false;
  }
  if (!((field15 == rhs.field15))) {
    return false;
  }
  if (!((field16 == rhs.field16))) {
    return false;
  }
  if (!((field17 == rhs.field17))) {
    return false;
  }
  if (!((field18 == rhs.field18))) {
    return false;
  }
  if (!((field19 == rhs.field19))) {
    return false;
  }
  if (!((field20 == rhs.field20))) {
    return false;
  }
  if (!((field21 == rhs.field21))) {
    return false;
  }
  if (!((field22 == rhs.field22))) {
    return false;
  }
  if (!((field23 == rhs.field23))) {
    return false;
  }
  if (!((field24 == rhs.field24))) {
    return false;
  }
  if (!((field25 == rhs.field25))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field26, rhs.field26))) {
    return false;
  }
  if (!((field27 == rhs.field27))) {
    return false;
  }
  if (!((field28 == rhs.field28))) {
    return false;
  }
  if (!((field29 == rhs.field29))) {
    return false;
  }
  if (!((field30 == rhs.field30))) {
    return false;
  }
  if (!((field31 == rhs.field31))) {
    return false;
  }
  if (!((field32 == rhs.field32))) {
    return false;
  }
  if (!((field33 == rhs.field33))) {
    return false;
  }
  if (!((field34 == rhs.field34))) {
    return false;
  }
  if (!((field35 == rhs.field35))) {
    return false;
  }
  if (!((field36 == rhs.field36))) {
    return false;
  }
  if (!((field37 == rhs.field37))) {
    return false;
  }
  if (!((field38 == rhs.field38))) {
    return false;
  }
  if (!((field39 == rhs.field39))) {
    return false;
  }
  if (!((field40 == rhs.field40))) {
    return false;
  }
  if (!((field41 == rhs.field41))) {
    return false;
  }
  if (!((field42 == rhs.field42))) {
    return false;
  }
  if (!((field43 == rhs.field43))) {
    return false;
  }
  if (!((field44 == rhs.field44))) {
    return false;
  }
  if (!((field45 == rhs.field45))) {
    return false;
  }
  if (!((field46 == rhs.field46))) {
    return false;
  }
  if (!((field47 == rhs.field47))) {
    return false;
  }
  if (!((field48 == rhs.field48))) {
    return false;
  }
  if (!((field49 == rhs.field49))) {
    return false;
  }
  if (!((field50 == rhs.field50))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field51, rhs.field51))) {
    return false;
  }
  if (!((field52 == rhs.field52))) {
    return false;
  }
  if (!((field53 == rhs.field53))) {
    return false;
  }
  if (!((field54 == rhs.field54))) {
    return false;
  }
  if (!((field55 == rhs.field55))) {
    return false;
  }
  if (!((field56 == rhs.field56))) {
    return false;
  }
  if (!((field57 == rhs.field57))) {
    return false;
  }
  if (!((field58 == rhs.field58))) {
    return false;
  }
  if (!((field59 == rhs.field59))) {
    return false;
  }
  if (!((field60 == rhs.field60))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field61, rhs.field61))) {
    return false;
  }
  if (!((field62 == rhs.field62))) {
    return false;
  }
  if (!((field63 == rhs.field63))) {
    return false;
  }
  if (!((field64 == rhs.field64))) {
    return false;
  }
  if (!((field65 == rhs.field65))) {
    return false;
  }
  if (!((field66 == rhs.field66))) {
    return false;
  }
  if (!((field67 == rhs.field67))) {
    return false;
  }
  if (!((field68 == rhs.field68))) {
    return false;
  }
  if (!((field69 == rhs.field69))) {
    return false;
  }
  if (!((field70 == rhs.field70))) {
    return false;
  }
  if (!((field71 == rhs.field71))) {
    return false;
  }
  if (!((field72 == rhs.field72))) {
    return false;
  }
  if (!((field73 == rhs.field73))) {
    return false;
  }
  if (!((field74 == rhs.field74))) {
    return false;
  }
  if (!((field75 == rhs.field75))) {
    return false;
  }
  if (!((field76 == rhs.field76))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field77, rhs.field77))) {
    return false;
  }
  if (!((field78 == rhs.field78))) {
    return false;
  }
  if (!((field79 == rhs.field79))) {
    return false;
  }
  if (!((field80 == rhs.field80))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field81, rhs.field81))) {
    return false;
  }
  if (!((field82 == rhs.field82))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field83, rhs.field83))) {
    return false;
  }
  if (!((field84 == rhs.field84))) {
    return false;
  }
  if (!((field85 == rhs.field85))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field86, rhs.field86))) {
    return false;
  }
  if (!((field87 == rhs.field87))) {
    return false;
  }
  if (!((field88 == rhs.field88))) {
    return false;
  }
  if (!((field89 == rhs.field89))) {
    return false;
  }
  if (!((field90 == rhs.field90))) {
    return false;
  }
  if (!((field91 == rhs.field91))) {
    return false;
  }
  if (!((field92 == rhs.field92))) {
    return false;
  }
  if (!((field93 == rhs.field93))) {
    return false;
  }
  if (!((field94 == rhs.field94))) {
    return false;
  }
  if (!((field95 == rhs.field95))) {
    return false;
  }
  if (!((field96 == rhs.field96))) {
    return false;
  }
  if (!((field97 == rhs.field97))) {
    return false;
  }
  if (!((field98 == rhs.field98))) {
    return false;
  }
  if (!((field99 == rhs.field99))) {
    return false;
  }
  if (!((field100 == rhs.field100))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field101, rhs.field101))) {
    return false;
  }
  if (!((field102 == rhs.field102))) {
    return false;
  }
  if (!((field103 == rhs.field103))) {
    return false;
  }
  if (!((field104 == rhs.field104))) {
    return false;
  }
  if (!((field105 == rhs.field105))) {
    return false;
  }
  if (!((field106 == rhs.field106))) {
    return false;
  }
  if (!((field107 == rhs.field107))) {
    return false;
  }
  if (!((field108 == rhs.field108))) {
    return false;
  }
  if (!((field109 == rhs.field109))) {
    return false;
  }
  if (!((field110 == rhs.field110))) {
    return false;
  }
  if (!((field111 == rhs.field111))) {
    return false;
  }
  if (!((field112 == rhs.field112))) {
    return false;
  }
  if (!((field113 == rhs.field113))) {
    return false;
  }
  if (!((field114 == rhs.field114))) {
    return false;
  }
  if (!((field115 == rhs.field115))) {
    return false;
  }
  if (!((field116 == rhs.field116))) {
    return false;
  }
  if (!((field117 == rhs.field117))) {
    return false;
  }
  if (!((field118 == rhs.field118))) {
    return false;
  }
  if (!((field119 == rhs.field119))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field120, rhs.field120))) {
    return false;
  }
  if (!((field121 == rhs.field121))) {
    return false;
  }
  if (!((field122 == rhs.field122))) {
    return false;
  }
  if (!((field123 == rhs.field123))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<std::string>::isEqual(field124, rhs.field124))) {
    return false;
  }
  if (!((field125 == rhs.field125))) {
    return false;
  }
  if (!((field126 == rhs.field126))) {
    return false;
  }
  if (!((field127 == rhs.field127))) {
    return false;
  }
  if (!((field128 == rhs.field128))) {
    return false;
  }
  if (!((field129 == rhs.field129))) {
    return false;
  }
  if (!((field130 == rhs.field130))) {
    return false;
  }
  if (!((field131 == rhs.field131))) {
    return false;
  }
  if (!((field132 == rhs.field132))) {
    return false;
  }
  if (!((field133 == rhs.field133))) {
    return false;
  }
  if (!((field134 == rhs.field134))) {
    return false;
  }
  if (!((field135 == rhs.field135))) {
    return false;
  }
  if (!((field136 == rhs.field136))) {
    return false;
  }
  if (!((field137 == rhs.field137))) {
    return false;
  }
  if (!((field138 == rhs.field138))) {
    return false;
  }
  if (!((field139 == rhs.field139))) {
    return false;
  }
  if (!((field140 == rhs.field140))) {
    return false;
  }
  if (!((field141 == rhs.field141))) {
    return false;
  }
  if (!((field142 == rhs.field142))) {
    return false;
  }
  if (!((field143 == rhs.field143))) {
    return false;
  }
  if (!((field144 == rhs.field144))) {
    return false;
  }
  if (!((field145 == rhs.field145))) {
    return false;
  }
  if (!((field146 == rhs.field146))) {
    return false;
  }
  if (!((field147 == rhs.field147))) {
    return false;
  }
  if (!((field148 == rhs.field148))) {
    return false;
  }
  if (!((field149 == rhs.field149))) {
    return false;
  }
  if (!((field150 == rhs.field150))) {
    return false;
  }
  if (!((field151 == rhs.field151))) {
    return false;
  }
  if (!((field152 == rhs.field152))) {
    return false;
  }
  if (!((field153 == rhs.field153))) {
    return false;
  }
  if (!((field154 == rhs.field154))) {
    return false;
  }
  if (!((field155 == rhs.field155))) {
    return false;
  }
  return true;
}

const std::set<std::string>& Struct28::get_field1() const& {
  return field1;
}

std::set<std::string> Struct28::get_field1() && {
  return std::move(field1);
}

const std::set< ::cpp2::Struct7>& Struct28::get_field2() const& {
  return field2;
}

std::set< ::cpp2::Struct7> Struct28::get_field2() && {
  return std::move(field2);
}

const std::vector< ::cpp2::Struct11>& Struct28::get_field3() const& {
  return field3;
}

std::vector< ::cpp2::Struct11> Struct28::get_field3() && {
  return std::move(field3);
}

const  ::cpp2::Struct3& Struct28::get_field5() const& {
  return field5;
}

 ::cpp2::Struct3 Struct28::get_field5() && {
  return std::move(field5);
}

const std::vector<std::set<std::string>>& Struct28::get_field7() const& {
  return field7;
}

std::vector<std::set<std::string>> Struct28::get_field7() && {
  return std::move(field7);
}

const std::map<std::set< ::cpp2::Struct14>, int16_t>& Struct28::get_field11() const& {
  return field11;
}

std::map<std::set< ::cpp2::Struct14>, int16_t> Struct28::get_field11() && {
  return std::move(field11);
}

const std::vector<int8_t>& Struct28::get_field13() const& {
  return field13;
}

std::vector<int8_t> Struct28::get_field13() && {
  return std::move(field13);
}

const std::vector<float>& Struct28::get_field14() const& {
  return field14;
}

std::vector<float> Struct28::get_field14() && {
  return std::move(field14);
}

const std::vector<int32_t>& Struct28::get_field15() const& {
  return field15;
}

std::vector<int32_t> Struct28::get_field15() && {
  return std::move(field15);
}

const std::set<int16_t>& Struct28::get_field21() const& {
  return field21;
}

std::set<int16_t> Struct28::get_field21() && {
  return std::move(field21);
}

const  ::cpp2::Struct21& Struct28::get_field22() const& {
  return field22;
}

 ::cpp2::Struct21 Struct28::get_field22() && {
  return std::move(field22);
}

const std::set<int32_t>& Struct28::get_field23() const& {
  return field23;
}

std::set<int32_t> Struct28::get_field23() && {
  return std::move(field23);
}

const  ::cpp2::Struct3& Struct28::get_field24() const& {
  return field24;
}

 ::cpp2::Struct3 Struct28::get_field24() && {
  return std::move(field24);
}

const std::vector<int64_t>& Struct28::get_field27() const& {
  return field27;
}

std::vector<int64_t> Struct28::get_field27() && {
  return std::move(field27);
}

const  ::cpp2::Struct0& Struct28::get_field28() const& {
  return field28;
}

 ::cpp2::Struct0 Struct28::get_field28() && {
  return std::move(field28);
}

const  ::cpp2::Struct2& Struct28::get_field29() const& {
  return field29;
}

 ::cpp2::Struct2 Struct28::get_field29() && {
  return std::move(field29);
}

const std::vector<int16_t>& Struct28::get_field30() const& {
  return field30;
}

std::vector<int16_t> Struct28::get_field30() && {
  return std::move(field30);
}

const  ::cpp2::Struct1& Struct28::get_field35() const& {
  return field35;
}

 ::cpp2::Struct1 Struct28::get_field35() && {
  return std::move(field35);
}

const  ::cpp2::Struct11& Struct28::get_field37() const& {
  return field37;
}

 ::cpp2::Struct11 Struct28::get_field37() && {
  return std::move(field37);
}

const std::set<int16_t>& Struct28::get_field39() const& {
  return field39;
}

std::set<int16_t> Struct28::get_field39() && {
  return std::move(field39);
}

const  ::cpp2::Struct6& Struct28::get_field40() const& {
  return field40;
}

 ::cpp2::Struct6 Struct28::get_field40() && {
  return std::move(field40);
}

const  ::cpp2::Struct10& Struct28::get_field44() const& {
  return field44;
}

 ::cpp2::Struct10 Struct28::get_field44() && {
  return std::move(field44);
}

const std::vector<double>& Struct28::get_field45() const& {
  return field45;
}

std::vector<double> Struct28::get_field45() && {
  return std::move(field45);
}

const  ::cpp2::Struct11& Struct28::get_field47() const& {
  return field47;
}

 ::cpp2::Struct11 Struct28::get_field47() && {
  return std::move(field47);
}

const std::map<int64_t, int32_t>& Struct28::get_field49() const& {
  return field49;
}

std::map<int64_t, int32_t> Struct28::get_field49() && {
  return std::move(field49);
}

const  ::cpp2::Struct6& Struct28::get_field50() const& {
  return field50;
}

 ::cpp2::Struct6 Struct28::get_field50() && {
  return std::move(field50);
}

const std::vector<double>& Struct28::get_field55() const& {
  return field55;
}

std::vector<double> Struct28::get_field55() && {
  return std::move(field55);
}

const  ::cpp2::Struct23& Struct28::get_field56() const& {
  return field56;
}

 ::cpp2::Struct23 Struct28::get_field56() && {
  return std::move(field56);
}

const std::set<int64_t>& Struct28::get_field57() const& {
  return field57;
}

std::set<int64_t> Struct28::get_field57() && {
  return std::move(field57);
}

const std::map<std::vector<float>, int32_t>& Struct28::get_field59() const& {
  return field59;
}

std::map<std::vector<float>, int32_t> Struct28::get_field59() && {
  return std::move(field59);
}

const std::vector<int64_t>& Struct28::get_field62() const& {
  return field62;
}

std::vector<int64_t> Struct28::get_field62() && {
  return std::move(field62);
}

const std::map<bool, int8_t>& Struct28::get_field69() const& {
  return field69;
}

std::map<bool, int8_t> Struct28::get_field69() && {
  return std::move(field69);
}

const std::set<int64_t>& Struct28::get_field70() const& {
  return field70;
}

std::set<int64_t> Struct28::get_field70() && {
  return std::move(field70);
}

const std::set<double>& Struct28::get_field72() const& {
  return field72;
}

std::set<double> Struct28::get_field72() && {
  return std::move(field72);
}

const std::map<int8_t, std::map<std::vector<double>, int16_t>>& Struct28::get_field73() const& {
  return field73;
}

std::map<int8_t, std::map<std::vector<double>, int16_t>> Struct28::get_field73() && {
  return std::move(field73);
}

const std::map< ::cpp2::Struct13, bool>& Struct28::get_field75() const& {
  return field75;
}

std::map< ::cpp2::Struct13, bool> Struct28::get_field75() && {
  return std::move(field75);
}

const std::vector<std::vector<int32_t>>& Struct28::get_field76() const& {
  return field76;
}

std::vector<std::vector<int32_t>> Struct28::get_field76() && {
  return std::move(field76);
}

const std::map<bool, std::set<std::set<int16_t>>>& Struct28::get_field78() const& {
  return field78;
}

std::map<bool, std::set<std::set<int16_t>>> Struct28::get_field78() && {
  return std::move(field78);
}

const std::map<bool, std::string>& Struct28::get_field79() const& {
  return field79;
}

std::map<bool, std::string> Struct28::get_field79() && {
  return std::move(field79);
}

const std::set<int16_t>& Struct28::get_field80() const& {
  return field80;
}

std::set<int16_t> Struct28::get_field80() && {
  return std::move(field80);
}

const std::vector<std::vector<std::string>>& Struct28::get_field82() const& {
  return field82;
}

std::vector<std::vector<std::string>> Struct28::get_field82() && {
  return std::move(field82);
}

const std::vector<int64_t>& Struct28::get_field84() const& {
  return field84;
}

std::vector<int64_t> Struct28::get_field84() && {
  return std::move(field84);
}

const std::set<std::map<std::string, bool>>& Struct28::get_field88() const& {
  return field88;
}

std::set<std::map<std::string, bool>> Struct28::get_field88() && {
  return std::move(field88);
}

const std::map< ::cpp2::Struct20, int32_t>& Struct28::get_field93() const& {
  return field93;
}

std::map< ::cpp2::Struct20, int32_t> Struct28::get_field93() && {
  return std::move(field93);
}

const std::set< ::cpp2::Struct12>& Struct28::get_field99() const& {
  return field99;
}

std::set< ::cpp2::Struct12> Struct28::get_field99() && {
  return std::move(field99);
}

const std::map<std::set<std::set<std::string>>, float>& Struct28::get_field100() const& {
  return field100;
}

std::map<std::set<std::set<std::string>>, float> Struct28::get_field100() && {
  return std::move(field100);
}

const  ::cpp2::Struct13& Struct28::get_field104() const& {
  return field104;
}

 ::cpp2::Struct13 Struct28::get_field104() && {
  return std::move(field104);
}

const  ::cpp2::Struct5& Struct28::get_field106() const& {
  return field106;
}

 ::cpp2::Struct5 Struct28::get_field106() && {
  return std::move(field106);
}

const std::map<int32_t, std::map<int16_t, double>>& Struct28::get_field107() const& {
  return field107;
}

std::map<int32_t, std::map<int16_t, double>> Struct28::get_field107() && {
  return std::move(field107);
}

const  ::cpp2::Struct7& Struct28::get_field110() const& {
  return field110;
}

 ::cpp2::Struct7 Struct28::get_field110() && {
  return std::move(field110);
}

const  ::cpp2::Struct9& Struct28::get_field111() const& {
  return field111;
}

 ::cpp2::Struct9 Struct28::get_field111() && {
  return std::move(field111);
}

const  ::cpp2::Struct12& Struct28::get_field112() const& {
  return field112;
}

 ::cpp2::Struct12 Struct28::get_field112() && {
  return std::move(field112);
}

const std::set<int16_t>& Struct28::get_field113() const& {
  return field113;
}

std::set<int16_t> Struct28::get_field113() && {
  return std::move(field113);
}

const  ::cpp2::Struct12& Struct28::get_field116() const& {
  return field116;
}

 ::cpp2::Struct12 Struct28::get_field116() && {
  return std::move(field116);
}

const std::set<std::set<int8_t>>& Struct28::get_field117() const& {
  return field117;
}

std::set<std::set<int8_t>> Struct28::get_field117() && {
  return std::move(field117);
}

const  ::cpp2::Struct1& Struct28::get_field118() const& {
  return field118;
}

 ::cpp2::Struct1 Struct28::get_field118() && {
  return std::move(field118);
}

const  ::cpp2::Struct12& Struct28::get_field121() const& {
  return field121;
}

 ::cpp2::Struct12 Struct28::get_field121() && {
  return std::move(field121);
}

const  ::cpp2::Struct3& Struct28::get_field122() const& {
  return field122;
}

 ::cpp2::Struct3 Struct28::get_field122() && {
  return std::move(field122);
}

const std::set<int32_t>& Struct28::get_field123() const& {
  return field123;
}

std::set<int32_t> Struct28::get_field123() && {
  return std::move(field123);
}

const std::map<std::vector<int64_t>, bool>& Struct28::get_field127() const& {
  return field127;
}

std::map<std::vector<int64_t>, bool> Struct28::get_field127() && {
  return std::move(field127);
}

const  ::cpp2::Struct25& Struct28::get_field128() const& {
  return field128;
}

 ::cpp2::Struct25 Struct28::get_field128() && {
  return std::move(field128);
}

const  ::cpp2::Struct4& Struct28::get_field129() const& {
  return field129;
}

 ::cpp2::Struct4 Struct28::get_field129() && {
  return std::move(field129);
}

const std::set<std::string>& Struct28::get_field132() const& {
  return field132;
}

std::set<std::string> Struct28::get_field132() && {
  return std::move(field132);
}

const std::map<std::string, std::map<int64_t, int16_t>>& Struct28::get_field134() const& {
  return field134;
}

std::map<std::string, std::map<int64_t, int16_t>> Struct28::get_field134() && {
  return std::move(field134);
}

const std::vector<std::string>& Struct28::get_field135() const& {
  return field135;
}

std::vector<std::string> Struct28::get_field135() && {
  return std::move(field135);
}

const std::set<int16_t>& Struct28::get_field139() const& {
  return field139;
}

std::set<int16_t> Struct28::get_field139() && {
  return std::move(field139);
}

const std::map<int8_t, int8_t>& Struct28::get_field141() const& {
  return field141;
}

std::map<int8_t, int8_t> Struct28::get_field141() && {
  return std::move(field141);
}

const std::set< ::cpp2::Struct18>& Struct28::get_field146() const& {
  return field146;
}

std::set< ::cpp2::Struct18> Struct28::get_field146() && {
  return std::move(field146);
}

const std::map<int8_t, std::string>& Struct28::get_field150() const& {
  return field150;
}

std::map<int8_t, std::string> Struct28::get_field150() && {
  return std::move(field150);
}

const std::map<std::string, bool>& Struct28::get_field151() const& {
  return field151;
}

std::map<std::string, bool> Struct28::get_field151() && {
  return std::move(field151);
}

const std::set<int64_t>& Struct28::get_field153() const& {
  return field153;
}

std::set<int64_t> Struct28::get_field153() && {
  return std::move(field153);
}

const std::vector<std::string>& Struct28::get_field155() const& {
  return field155;
}

std::vector<std::string> Struct28::get_field155() && {
  return std::move(field155);
}

void Struct28::translateFieldName(FOLLY_MAYBE_UNUSED folly::StringPiece _fname, FOLLY_MAYBE_UNUSED int16_t& fid, FOLLY_MAYBE_UNUSED apache::thrift::protocol::TType& _ftype) {
  if (false) {}
  else if (_fname == "field1") {
    fid = 1;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field2") {
    fid = 2;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field3") {
    fid = 3;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field4") {
    fid = 4;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field5") {
    fid = 5;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field6") {
    fid = 6;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field7") {
    fid = 7;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field8") {
    fid = 8;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field9") {
    fid = 9;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field10") {
    fid = 10;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field11") {
    fid = 11;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field12") {
    fid = 12;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field13") {
    fid = 13;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field14") {
    fid = 14;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field15") {
    fid = 15;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field16") {
    fid = 16;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field17") {
    fid = 17;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field18") {
    fid = 18;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field19") {
    fid = 19;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field20") {
    fid = 20;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field21") {
    fid = 21;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field22") {
    fid = 22;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field23") {
    fid = 23;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field24") {
    fid = 24;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field25") {
    fid = 25;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field26") {
    fid = 26;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field27") {
    fid = 27;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field28") {
    fid = 28;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field29") {
    fid = 29;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field30") {
    fid = 30;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field31") {
    fid = 31;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field32") {
    fid = 32;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field33") {
    fid = 33;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field34") {
    fid = 34;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field35") {
    fid = 35;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field36") {
    fid = 36;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field37") {
    fid = 37;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field38") {
    fid = 38;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field39") {
    fid = 39;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field40") {
    fid = 40;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field41") {
    fid = 41;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field42") {
    fid = 42;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field43") {
    fid = 43;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field44") {
    fid = 44;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field45") {
    fid = 45;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field46") {
    fid = 46;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field47") {
    fid = 47;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field48") {
    fid = 48;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field49") {
    fid = 49;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field50") {
    fid = 50;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field51") {
    fid = 51;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field52") {
    fid = 52;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field53") {
    fid = 53;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field54") {
    fid = 54;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field55") {
    fid = 55;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field56") {
    fid = 56;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field57") {
    fid = 57;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field58") {
    fid = 58;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field59") {
    fid = 59;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field60") {
    fid = 60;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field61") {
    fid = 61;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field62") {
    fid = 62;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field63") {
    fid = 63;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field64") {
    fid = 64;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field65") {
    fid = 65;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field66") {
    fid = 66;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field67") {
    fid = 67;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field68") {
    fid = 68;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field69") {
    fid = 69;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field70") {
    fid = 70;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field71") {
    fid = 71;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field72") {
    fid = 72;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field73") {
    fid = 73;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field74") {
    fid = 74;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field75") {
    fid = 75;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field76") {
    fid = 76;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field77") {
    fid = 77;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field78") {
    fid = 78;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field79") {
    fid = 79;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field80") {
    fid = 80;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field81") {
    fid = 81;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field82") {
    fid = 82;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field83") {
    fid = 83;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field84") {
    fid = 84;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field85") {
    fid = 85;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field86") {
    fid = 86;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field87") {
    fid = 87;
    _ftype = apache::thrift::protocol::T_I64;
  }
  else if (_fname == "field88") {
    fid = 88;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field89") {
    fid = 89;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field90") {
    fid = 90;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field91") {
    fid = 91;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field92") {
    fid = 92;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field93") {
    fid = 93;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field94") {
    fid = 94;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field95") {
    fid = 95;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field96") {
    fid = 96;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field97") {
    fid = 97;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field98") {
    fid = 98;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field99") {
    fid = 99;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field100") {
    fid = 100;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field101") {
    fid = 101;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field102") {
    fid = 102;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field103") {
    fid = 103;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field104") {
    fid = 104;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field105") {
    fid = 105;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field106") {
    fid = 106;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field107") {
    fid = 107;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field108") {
    fid = 108;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field109") {
    fid = 109;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field110") {
    fid = 110;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field111") {
    fid = 111;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field112") {
    fid = 112;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field113") {
    fid = 113;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field114") {
    fid = 114;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field115") {
    fid = 115;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field116") {
    fid = 116;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field117") {
    fid = 117;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field118") {
    fid = 118;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field119") {
    fid = 119;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field120") {
    fid = 120;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field121") {
    fid = 121;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field122") {
    fid = 122;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field123") {
    fid = 123;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field124") {
    fid = 124;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field125") {
    fid = 125;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field126") {
    fid = 126;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field127") {
    fid = 127;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field128") {
    fid = 128;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field129") {
    fid = 129;
    _ftype = apache::thrift::protocol::T_STRUCT;
  }
  else if (_fname == "field130") {
    fid = 130;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field131") {
    fid = 131;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field132") {
    fid = 132;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field133") {
    fid = 133;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field134") {
    fid = 134;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field135") {
    fid = 135;
    _ftype = apache::thrift::protocol::T_LIST;
  }
  else if (_fname == "field136") {
    fid = 136;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field137") {
    fid = 137;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field138") {
    fid = 138;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field139") {
    fid = 139;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field140") {
    fid = 140;
    _ftype = apache::thrift::protocol::T_BYTE;
  }
  else if (_fname == "field141") {
    fid = 141;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field142") {
    fid = 142;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field143") {
    fid = 143;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field144") {
    fid = 144;
    _ftype = apache::thrift::protocol::T_STRING;
  }
  else if (_fname == "field145") {
    fid = 145;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field146") {
    fid = 146;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field147") {
    fid = 147;
    _ftype = apache::thrift::protocol::T_I16;
  }
  else if (_fname == "field148") {
    fid = 148;
    _ftype = apache::thrift::protocol::T_BOOL;
  }
  else if (_fname == "field149") {
    fid = 149;
    _ftype = apache::thrift::protocol::T_I32;
  }
  else if (_fname == "field150") {
    fid = 150;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field151") {
    fid = 151;
    _ftype = apache::thrift::protocol::T_MAP;
  }
  else if (_fname == "field152") {
    fid = 152;
    _ftype = apache::thrift::protocol::T_FLOAT;
  }
  else if (_fname == "field153") {
    fid = 153;
    _ftype = apache::thrift::protocol::T_SET;
  }
  else if (_fname == "field154") {
    fid = 154;
    _ftype = apache::thrift::protocol::T_DOUBLE;
  }
  else if (_fname == "field155") {
    fid = 155;
    _ftype = apache::thrift::protocol::T_LIST;
  }
}

void swap(Struct28& a, Struct28& b) {
  using ::std::swap;
  swap(a.field1, b.field1);
  swap(a.field2, b.field2);
  swap(a.field3, b.field3);
  swap(a.field4, b.field4);
  swap(a.field5, b.field5);
  swap(a.field6, b.field6);
  swap(a.field7, b.field7);
  swap(a.field8, b.field8);
  swap(a.field9, b.field9);
  swap(a.field10, b.field10);
  swap(a.field11, b.field11);
  swap(a.field12, b.field12);
  swap(a.field13, b.field13);
  swap(a.field14, b.field14);
  swap(a.field15, b.field15);
  swap(a.field16, b.field16);
  swap(a.field17, b.field17);
  swap(a.field18, b.field18);
  swap(a.field19, b.field19);
  swap(a.field20, b.field20);
  swap(a.field21, b.field21);
  swap(a.field22, b.field22);
  swap(a.field23, b.field23);
  swap(a.field24, b.field24);
  swap(a.field25, b.field25);
  swap(a.field26, b.field26);
  swap(a.field27, b.field27);
  swap(a.field28, b.field28);
  swap(a.field29, b.field29);
  swap(a.field30, b.field30);
  swap(a.field31, b.field31);
  swap(a.field32, b.field32);
  swap(a.field33, b.field33);
  swap(a.field34, b.field34);
  swap(a.field35, b.field35);
  swap(a.field36, b.field36);
  swap(a.field37, b.field37);
  swap(a.field38, b.field38);
  swap(a.field39, b.field39);
  swap(a.field40, b.field40);
  swap(a.field41, b.field41);
  swap(a.field42, b.field42);
  swap(a.field43, b.field43);
  swap(a.field44, b.field44);
  swap(a.field45, b.field45);
  swap(a.field46, b.field46);
  swap(a.field47, b.field47);
  swap(a.field48, b.field48);
  swap(a.field49, b.field49);
  swap(a.field50, b.field50);
  swap(a.field51, b.field51);
  swap(a.field52, b.field52);
  swap(a.field53, b.field53);
  swap(a.field54, b.field54);
  swap(a.field55, b.field55);
  swap(a.field56, b.field56);
  swap(a.field57, b.field57);
  swap(a.field58, b.field58);
  swap(a.field59, b.field59);
  swap(a.field60, b.field60);
  swap(a.field61, b.field61);
  swap(a.field62, b.field62);
  swap(a.field63, b.field63);
  swap(a.field64, b.field64);
  swap(a.field65, b.field65);
  swap(a.field66, b.field66);
  swap(a.field67, b.field67);
  swap(a.field68, b.field68);
  swap(a.field69, b.field69);
  swap(a.field70, b.field70);
  swap(a.field71, b.field71);
  swap(a.field72, b.field72);
  swap(a.field73, b.field73);
  swap(a.field74, b.field74);
  swap(a.field75, b.field75);
  swap(a.field76, b.field76);
  swap(a.field77, b.field77);
  swap(a.field78, b.field78);
  swap(a.field79, b.field79);
  swap(a.field80, b.field80);
  swap(a.field81, b.field81);
  swap(a.field82, b.field82);
  swap(a.field83, b.field83);
  swap(a.field84, b.field84);
  swap(a.field85, b.field85);
  swap(a.field86, b.field86);
  swap(a.field87, b.field87);
  swap(a.field88, b.field88);
  swap(a.field89, b.field89);
  swap(a.field90, b.field90);
  swap(a.field91, b.field91);
  swap(a.field92, b.field92);
  swap(a.field93, b.field93);
  swap(a.field94, b.field94);
  swap(a.field95, b.field95);
  swap(a.field96, b.field96);
  swap(a.field97, b.field97);
  swap(a.field98, b.field98);
  swap(a.field99, b.field99);
  swap(a.field100, b.field100);
  swap(a.field101, b.field101);
  swap(a.field102, b.field102);
  swap(a.field103, b.field103);
  swap(a.field104, b.field104);
  swap(a.field105, b.field105);
  swap(a.field106, b.field106);
  swap(a.field107, b.field107);
  swap(a.field108, b.field108);
  swap(a.field109, b.field109);
  swap(a.field110, b.field110);
  swap(a.field111, b.field111);
  swap(a.field112, b.field112);
  swap(a.field113, b.field113);
  swap(a.field114, b.field114);
  swap(a.field115, b.field115);
  swap(a.field116, b.field116);
  swap(a.field117, b.field117);
  swap(a.field118, b.field118);
  swap(a.field119, b.field119);
  swap(a.field120, b.field120);
  swap(a.field121, b.field121);
  swap(a.field122, b.field122);
  swap(a.field123, b.field123);
  swap(a.field124, b.field124);
  swap(a.field125, b.field125);
  swap(a.field126, b.field126);
  swap(a.field127, b.field127);
  swap(a.field128, b.field128);
  swap(a.field129, b.field129);
  swap(a.field130, b.field130);
  swap(a.field131, b.field131);
  swap(a.field132, b.field132);
  swap(a.field133, b.field133);
  swap(a.field134, b.field134);
  swap(a.field135, b.field135);
  swap(a.field136, b.field136);
  swap(a.field137, b.field137);
  swap(a.field138, b.field138);
  swap(a.field139, b.field139);
  swap(a.field140, b.field140);
  swap(a.field141, b.field141);
  swap(a.field142, b.field142);
  swap(a.field143, b.field143);
  swap(a.field144, b.field144);
  swap(a.field145, b.field145);
  swap(a.field146, b.field146);
  swap(a.field147, b.field147);
  swap(a.field148, b.field148);
  swap(a.field149, b.field149);
  swap(a.field150, b.field150);
  swap(a.field151, b.field151);
  swap(a.field152, b.field152);
  swap(a.field153, b.field153);
  swap(a.field154, b.field154);
  swap(a.field155, b.field155);
  swap(a.__isset, b.__isset);
}

template uint32_t Struct28::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Struct28::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Struct28::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct28::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Struct28::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Struct28::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Struct28::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Struct28::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
